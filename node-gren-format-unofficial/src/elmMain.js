// -- (function (scope) {
    // -- "use strict";
    function $$Record1(G, an, Y, A, E) {
        this.G = G;
        this.an =
            an;
        this.Y = Y;
        this.A = A;
        this.E = E;
    }
    $$Record1.prototype.$c
        = function () {
            return new $$Record1(this.G, this.an, this.Y, this.A, this.E);
        };
    function $$Record2(G, ae, A, E) {
        this.G = G;
        this.ae = ae;
        this.A = A;
        this.E =
            E;
    }
    $$Record2.prototype.$c = function () {
        return new $$Record2(this.G, this.ae, this.A, this.E);
    };
    function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
    }
    function F2(fun) {
        var curried = function (a) {
            return function (b) {
                return fun(a, b);
            };
        };
        curried.a2 = fun;
        return curried;
    }
    function F3(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return fun(a, b, c);
                };
            };
        };
        curried.a3 =
            fun;
        return curried;
    }
    function F4(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return fun(a, b, c, d);
                    };
                };
            };
        };
        curried.a4 = fun;
        return curried;
    }
    function F5(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return fun(a, b, c, d, e);
                        };
                    };
                };
            };
        };
        curried.a5 = fun;
        return curried;
    }
    function F6(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return fun(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        };
        curried.a6 = fun;
        return curried;
    }
    function F7(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) { return fun(a, b, c, d, e, f, g); };
                            };
                        };
                    };
                };
            };
        };
        curried.
            a7 = fun;
        return curried;
    }
    function F8(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return fun(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried.a8 = fun;
        return curried;
    }
    function F9(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return fun(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried
            .a9 = fun;
        return curried;
    }
    function A2(fun, a, b) {
        return fun.a2 ? fun.a2(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
        return fun.a3 ? fun.a3(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
        return fun.a4 ? fun.a4(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
        return fun.a5 ? fun.a5(a, b, c, d, e)
            : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
        return fun.a6 ? fun.a6(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g) {
        return fun.a7 ? fun.a7(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
    }
    function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a8 ? fun.a8(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
    }
    function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a9 ? fun.a9(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
    }
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
        return [value];
    }
    function _JsArray_length(array) {
        return array.length;
    }
    var _JsArray_initialize_fn = function (size, offset, func) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
            result[i] = func(offset + i);
        }
        return result;
    }, _JsArray_initialize = F3(_JsArray_initialize_fn);
    var _JsArray_initializeFromList_fn = function (max, ls) {
        var result = new Array(max);
        for (var i = 0; i < max && ls.b; i++) {
            result[i] = ls.a;
            ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
    }, _JsArray_initializeFromList = F2(_JsArray_initializeFromList_fn);
    var _JsArray_unsafeGet_fn = function (index, array) {
        return array[index];
    }, _JsArray_unsafeGet = F2(_JsArray_unsafeGet_fn);
    var _JsArray_unsafeSet_fn = function (index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[index] = value;
        return result;
    }, _JsArray_unsafeSet = F3(_JsArray_unsafeSet_fn);
    var _JsArray_push_fn = function (value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[length] = value;
        return result;
    }, _JsArray_push = F2(_JsArray_push_fn);
    var _JsArray_foldl_fn = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldl_fn_unwrapped = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldl = F3(_JsArray_foldl_fn);
    var _JsArray_foldr_fn = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldr_fn_unwrapped = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldr = F3(_JsArray_foldr_fn);
    var _JsArray_map_fn = function (func, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(array[i]);
        }
        return result;
    }, _JsArray_map = F2(_JsArray_map_fn);
    var _JsArray_indexedMap_fn = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = A2(func, offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap_fn_unwrapped = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap = F3(_JsArray_indexedMap_fn);
    var _JsArray_slice_fn = function (from, to, array) {
        return array.slice(from, to);
    }, _JsArray_slice = F3(_JsArray_slice_fn);
    var _JsArray_appendN_fn = function (n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) {
            itemsToCopy = source.length;
        }
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for (var i = 0; i < destLen; i++) {
            result[i] = dest[i];
        }
        for (var i = 0; i < itemsToCopy; i++) {
            result[i + destLen] = source[i];
        }
        return result;
    }, _JsArray_appendN = F3(_JsArray_appendN_fn);
    var _Debug_log_fn = function (tag, value) {
        return value;
    }, _Debug_log = F2(_Debug_log_fn);
    var _Debug_log_UNUSED_fn = function (tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
    }, _Debug_log_UNUSED = F2(_Debug_log_UNUSED_fn);
    function _Debug_todo(moduleName, region) {
        return function (message) {
            _Debug_crash(8, moduleName, region, message);
        };
    }
    function _Debug_todoCase(moduleName, region, value) {
        return function (message) {
            _Debug_crash(9, moduleName, region, value, message);
        };
    }
    function _Debug_toString(value) {
        return "<internals>";
    }
    function _Debug_toString_UNUSED(value) {
        return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") {
            return _Debug_internalColor(ansi, "<function>");
        }
        if (typeof value === "boolean") {
            return _Debug_ctorColor(ansi, value ? "True" : "False");
        }
        if (typeof value === "number") {
            return _Debug_numberColor(ansi, value + "");
        }
        if (value instanceof String) {
            return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        }
        if (typeof value === "string") {
            return _Debug_stringColor(ansi, "\"" + _Debug_addSlashes(value, false) + "\"");
        }
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") {
                return _Debug_internalColor(ansi, "<internals>");
            }
            if (tag[0] === "#") {
                var output = [];
                for (var k in value) {
                    if (k === "$")
                        continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") {
                return _Debug_ctorColor(ansi, "Set")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            }
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
                return _Debug_ctorColor(ansi, "Dict")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            }
            if (tag === "Array_elm_builtin") {
                return _Debug_ctorColor(ansi, "Array")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            }
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for (; value.b; value = value.b) {
                    output += "," + _Debug_toAnsiString(ansi, value.a);
                }
                return output + "]";
            }
            var output = "";
            for (var i in value) {
                if (i === "$")
                    continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === "\"" || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) {
            return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        }
        if (typeof File !== "undefined" && value instanceof File) {
            return _Debug_internalColor(ansi, "<" + value.name + ">");
        }
        if (typeof value === "object") {
            var output = [];
            for (var key in value) {
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) {
                return "{}";
            }
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str
            .replace(/\\/g, "\\\\")
            .replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r")
            .replace(/\v/g, "\\v")
            .replace(/\0/g, "\\0");
        if (isChar) {
            return s.replace(/\'/g, "\\'");
        }
        else {
            return s.replace(/\"/g, "\\\"");
        }
    }
    function _Debug_ctorColor(ansi, string) {
        return ansi ? "\u001B[96m" + string + "\u001B[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
        return ansi ? "\u001B[95m" + string + "\u001B[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
        return ansi ? "\u001B[93m" + string + "\u001B[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
        return ansi ? "\u001B[92m" + string + "\u001B[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
        return ansi ? "\u001B[37m" + string + "\u001B[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
        return ansi ? "\u001B[36m" + string + "\u001B[0m" : string;
    }
    function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    function _Debug_crash(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
        switch (identifier) {
            case 0:
                throw new Error("What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById(\"elm-node\")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.");
            case 1:
                throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
            case 2:
                var jsonErrorString = fact1;
                throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
            case 3:
                var portName = fact1;
                throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
            case 4:
                var portName = fact1;
                var problem = fact2;
                throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
            case 5:
                throw new Error("Trying to use `(==)` on functions.\nThere is no way to know if functions are \"the same\" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.");
            case 6:
                var moduleName = fact1;
                throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
            case 8:
                var moduleName = fact1;
                var region = fact2;
                var message = fact3;
                throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
            case 9:
                var moduleName = fact1;
                var region = fact2;
                var value = fact3;
                var message = fact4;
                throw new Error("TODO in module `" + moduleName + "` from the `case` expression "
                    + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    "
                    + _Debug_toString(value).replace("\n", "\n    ")
                    + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
            case 10:
                throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
            case 11:
                throw new Error("Cannot perform mod 0. Division by zero error.");
        }
    }
    function _Debug_regionToString(region) {
        if (region.d.bK === region.c.bK) {
            return "on line " + region.d.bK;
        }
        return "on lines " + region.d.bK + " through " + region.c.bK;
    }
    function _Utils_eq(x, y) {
        for (var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) { }
        return isEqual;
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) {
            return true;
        }
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && _Debug_crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        if (x.$ < 0) {
            x = $elm$core$Dict$toList(x);
            y = $elm$core$Dict$toList(y);
        }
        for (var key in x) {
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
                return false;
            }
        }
        return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual_fn = function (a, b) { return !_Utils_eq(a, b); }, _Utils_notEqual = F2(_Utils_notEqual_fn);
    function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") {
            return x === y ? 0 : x < y ? -1 : 1;
        }
        if (typeof x.$ === "undefined") {
            return (ord = _Utils_cmp(x.a, y.a))
                ? ord
                : (ord = _Utils_cmp(x.b, y.b))
                    ? ord
                    : _Utils_cmp(x.c, y.c);
        }
        for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) { }
        return ord || (x.b ? 1 : y.b ? -1 : 0);
    }
    var _Utils_lt_fn = function (a, b) { return _Utils_cmp(a, b) < 0; }, _Utils_lt = F2(_Utils_lt_fn);
    var _Utils_le_fn = function (a, b) { return _Utils_cmp(a, b) < 1; }, _Utils_le = F2(_Utils_le_fn);
    var _Utils_gt_fn = function (a, b) { return _Utils_cmp(a, b) > 0; }, _Utils_gt = F2(_Utils_gt_fn);
    var _Utils_ge_fn = function (a, b) { return _Utils_cmp(a, b) >= 0; }, _Utils_ge = F2(_Utils_ge_fn);
    var _Utils_compare_fn = function (x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    }, _Utils_compare = F2(_Utils_compare_fn);
    var _Utils_Tuple0 = 0;
    var _Utils_Tuple0_UNUSED = { $: "#0" };
    function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
    function _Utils_Tuple2_UNUSED(a, b) { return { $: "#2", a: a, b: b }; }
    function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
    function _Utils_Tuple3_UNUSED(a, b, c) { return { $: "#3", a: a, b: b, c: c }; }
    function _Utils_chr(c) { return c; }
    function _Utils_chr_UNUSED(c) { return new String(c); }
    function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for (var key in oldRecord) {
            newRecord[key] = oldRecord[key];
        }
        for (var key in updatedFields) {
            newRecord[key] = updatedFields[key];
        }
        return newRecord;
    }
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
        if (typeof xs === "string") {
            return xs + ys;
        }
        if (!xs.b) {
            return ys;
        }
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for (var curr = root; xs.b; xs = xs.b) {
            curr = curr.b = _List_Cons(xs.a, ys);
        }
        return root;
    }
    var _List_Nil = { $: 0, a: null, b: null };
    var _List_Nil_UNUSED = { $: "[]" };
    function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
    function _List_Cons_UNUSED(hd, tl) { return { $: "::", a: hd, b: tl }; }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
        var out = _List_Nil;
        for (var i = arr.length; i--;) {
            out = _List_Cons(arr[i], out);
        }
        return out;
    }
    function _List_toArray(xs) {
        for (var out = []; xs.b; xs = xs.b) {
            out.push(xs.a);
        }
        return out;
    }
    var _List_map2_fn = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(A2(f, xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2_fn_unwrapped = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(f(xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2 = F3(_List_map2_fn);
    var _List_map3_fn = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A3(f, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3_fn_unwrapped = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3 = F4(_List_map3_fn);
    var _List_map4_fn = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4_fn_unwrapped = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4 = F5(_List_map4_fn);
    var _List_map5_fn = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5_fn_unwrapped = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5 = F6(_List_map5_fn);
    var _List_sortBy_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            return _Utils_cmp(f(a), f(b));
        }));
    }, _List_sortBy = F2(_List_sortBy_fn);
    var _List_sortWith_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = A2(f, a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith_fn_unwrapped = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = f(a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith = F2(_List_sortWith_fn);
    var _Basics_add_fn = function (a, b) { return a + b; }, _Basics_add = F2(_Basics_add_fn);
    var _Basics_sub_fn = function (a, b) { return a - b; }, _Basics_sub = F2(_Basics_sub_fn);
    var _Basics_mul_fn = function (a, b) { return a * b; }, _Basics_mul = F2(_Basics_mul_fn);
    var _Basics_fdiv_fn = function (a, b) { return a / b; }, _Basics_fdiv = F2(_Basics_fdiv_fn);
    var _Basics_idiv_fn = function (a, b) { return (a / b) | 0; }, _Basics_idiv = F2(_Basics_idiv_fn);
    var _Basics_pow_fn = Math.pow, _Basics_pow = F2(_Basics_pow_fn);
    var _Basics_remainderBy_fn = function (b, a) { return a % b; }, _Basics_remainderBy = F2(_Basics_remainderBy_fn);
    var _Basics_modBy_fn = function (modulus, x) {
        var answer = x % modulus;
        return modulus === 0
            ? _Debug_crash(11)
            :
                ((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
                    ? answer + modulus
                    : answer;
    }, _Basics_modBy = F2(_Basics_modBy_fn);
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2_fn = Math.atan2, _Basics_atan2 = F2(_Basics_atan2_fn);
    function _Basics_toFloat(x) { return x; }
    function _Basics_truncate(n) { return n | 0; }
    function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    function _Basics_not(bool) { return !bool; }
    var _Basics_and_fn = function (a, b) { return a && b; }, _Basics_and = F2(_Basics_and_fn);
    var _Basics_or_fn = function (a, b) { return a || b; }, _Basics_or = F2(_Basics_or_fn);
    var _Basics_xor_fn = function (a, b) { return a !== b; }, _Basics_xor = F2(_Basics_xor_fn);
    var _String_cons_fn = function (chr, str) {
        return chr + str;
    }, _String_cons = F2(_String_cons_fn);
    function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word)
            ? $elm$core$Maybe$Just(55296 <= word && word <= 56319
                ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
                : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1)))
            : $elm$core$Maybe$Nothing;
    }
    var _String_append_fn = function (a, b) {
        return a + b;
    }, _String_append = F2(_String_append_fn);
    function _String_length(str) {
        return str.length;
    }
    var _String_map_fn = function (func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while (i < len) {
            var word = string.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]));
                i += 2;
                continue;
            }
            array[i] = func(_Utils_chr(string[i]));
            i++;
        }
        return array.join("");
    }, _String_map = F2(_String_map_fn);
    var _String_filter_fn = function (isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while (i < len) {
            var char = str[i];
            var word = str.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += str[i];
                i++;
            }
            if (isGood(_Utils_chr(char))) {
                arr.push(char);
            }
        }
        return arr.join("");
    }, _String_filter = F2(_String_filter_fn);
    function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while (i < len) {
            var word = str.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                arr[len - i] = str[i + 1];
                i++;
                arr[len - i] = str[i - 1];
                i++;
            }
            else {
                arr[len - i] = str[i];
                i++;
            }
        }
        return arr.join("");
    }
    var _String_foldl_fn = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldl_fn_unwrapped = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldl = F3(_String_foldl_fn);
    var _String_foldr_fn = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldr_fn_unwrapped = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldr = F3(_String_foldr_fn);
    var _String_split_fn = function (sep, str) {
        return str.split(sep);
    }, _String_split = F2(_String_split_fn);
    var _String_join_fn = function (sep, strs) {
        return strs.join(sep);
    }, _String_join = F2(_String_join_fn);
    var _String_slice_fn = function (start, end, str) {
        return str.slice(start, end);
    }, _String_slice = F3(_String_slice_fn);
    function _String_trim(str) {
        return str.trim();
    }
    function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
        return str.toUpperCase();
    }
    function _String_toLower(str) {
        return str.toLowerCase();
    }
    var _String_any_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (isGood(_Utils_chr(char))) {
                return true;
            }
        }
        return false;
    }, _String_any = F2(_String_any_fn);
    var _String_all_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (!isGood(_Utils_chr(char))) {
                return false;
            }
        }
        return true;
    }, _String_all = F2(_String_all_fn);
    var _String_contains_fn = function (sub, str) {
        return str.indexOf(sub) > -1;
    }, _String_contains = F2(_String_contains_fn);
    var _String_startsWith_fn = function (sub, str) {
        return str.indexOf(sub) === 0;
    }, _String_startsWith = F2(_String_startsWith_fn);
    var _String_endsWith_fn = function (sub, str) {
        return str.length >= sub.length &&
            str.lastIndexOf(sub) === str.length - sub.length;
    }, _String_endsWith = F2(_String_endsWith_fn);
    var _String_indexes_fn = function (sub, str) {
        var subLen = sub.length;
        if (subLen < 1) {
            return _List_Nil;
        }
        var i = 0;
        var is = [];
        while ((i = str.indexOf(sub, i)) > -1) {
            is.push(i);
            i = i + subLen;
        }
        return _List_fromArray(is);
    }, _String_indexes = F2(_String_indexes_fn);
    function _String_fromNumber(number) {
        return number + "";
    }
    function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 43 || code0 == 45 ? 1 : 0;
        for (var i = start; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 48 || 57 < code) {
                return $elm$core$Maybe$Nothing;
            }
            total = 10 * total + code - 48;
        }
        return i == start
            ? $elm$core$Maybe$Nothing
            : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
    }
    function _String_toFloat(s) {
        if (s.length === 0 || /[\sxbo]/.test(s)) {
            return $elm$core$Maybe$Nothing;
        }
        var n = +s;
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
        return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (55296 <= code && code <= 56319) {
            return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
        }
        return code;
    }
    function _Char_fromCode(code) {
        return _Utils_chr((code < 0 || 1114111 < code)
            ? "\uFFFD"
            :
                (code <= 65535)
                    ? String.fromCharCode(code)
                    :
                        (code -= 65536,
                            String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320)));
    }
    function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
    }
    function _Json_succeed(msg) {
        return {
            $: 0,
            a: msg
        };
    }
    function _Json_fail(msg) {
        return {
            $: 1,
            a: msg
        };
    }
    function _Json_decodePrim(decoder) {
        return { $: 2, b: decoder };
    }
    var _Json_decodeInt = _Json_decodePrim(function (value) {
        return (typeof value !== "number")
            ? _Json_expecting("an INT", value)
            :
                (-2147483647 < value && value < 2147483647 && (value | 0) === value)
                    ? $elm$core$Result$Ok(value)
                    :
                        (isFinite(value) && !(value % 1))
                            ? $elm$core$Result$Ok(value)
                            : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function (value) {
        return (typeof value === "boolean")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function (value) {
        return (typeof value === "number")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function (value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function (value) {
        return (typeof value === "string")
            ? $elm$core$Result$Ok(value)
            : (value instanceof String)
                ? $elm$core$Result$Ok(value + "")
                : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
    function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }
    function _Json_decodeNull(value) { return { $: 5, c: value }; }
    var _Json_decodeField_fn = function (field, decoder) {
        return {
            $: 6,
            d: field,
            b: decoder
        };
    }, _Json_decodeField = F2(_Json_decodeField_fn);
    var _Json_decodeIndex_fn = function (index, decoder) {
        return {
            $: 7,
            e: index,
            b: decoder
        };
    }, _Json_decodeIndex = F2(_Json_decodeIndex_fn);
    function _Json_decodeKeyValuePairs(decoder) {
        return {
            $: 8,
            b: decoder
        };
    }
    function _Json_mapMany(f, decoders) {
        return {
            $: 9,
            f: f,
            g: decoders
        };
    }
    var _Json_andThen_fn = function (callback, decoder) {
        return {
            $: 10,
            b: decoder,
            h: callback
        };
    }, _Json_andThen = F2(_Json_andThen_fn);
    function _Json_oneOf(decoders) {
        return {
            $: 11,
            g: decoders
        };
    }
    var _Json_map1_fn = function (f, d1) {
        return _Json_mapMany(f, [d1]);
    }, _Json_map1 = F2(_Json_map1_fn);
    var _Json_map2_fn = function (f, d1, d2) {
        return _Json_mapMany(f, [d1, d2]);
    }, _Json_map2 = F3(_Json_map2_fn);
    var _Json_map3_fn = function (f, d1, d2, d3) {
        return _Json_mapMany(f, [d1, d2, d3]);
    }, _Json_map3 = F4(_Json_map3_fn);
    var _Json_map4_fn = function (f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [d1, d2, d3, d4]);
    }, _Json_map4 = F5(_Json_map4_fn);
    var _Json_map5_fn = function (f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
    }, _Json_map5 = F6(_Json_map5_fn);
    var _Json_map6_fn = function (f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
    }, _Json_map6 = F7(_Json_map6_fn);
    var _Json_map7_fn = function (f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
    }, _Json_map7 = F8(_Json_map7_fn);
    var _Json_map8_fn = function (f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
    }, _Json_map8 = F9(_Json_map8_fn);
    var _Json_runOnString_fn = function (decoder, string) {
        try {
            var value = JSON.parse(string);
            return _Json_runHelp(decoder, value);
        }
        catch (e) {
            return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
    }, _Json_runOnString = F2(_Json_runOnString_fn);
    var _Json_run_fn = function (decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
    }, _Json_run = F2(_Json_run_fn);
    function _Json_runHelp(decoder, value) {
        switch (decoder.$) {
            case 2:
                return decoder.b(value);
            case 5:
                return (value === null)
                    ? $elm$core$Result$Ok(decoder.c)
                    : _Json_expecting("null", value);
            case 3:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("a LIST", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
            case 4:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
            case 6:
                var field = decoder.d;
                if (typeof value !== "object" || value === null || !(field in value)) {
                    return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
                }
                var result = _Json_runHelp(decoder.b, value[field]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(field, result.a));
            case 7:
                var index = decoder.e;
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                if (index >= value.length) {
                    return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
                }
                var result = _Json_runHelp(decoder.b, value[index]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(index, result.a));
            case 8:
                if (typeof value !== "object" || value === null || _Json_isArray(value)) {
                    return _Json_expecting("an OBJECT", value);
                }
                var keyValuePairs = _List_Nil;
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        var result = _Json_runHelp(decoder.b, value[key]);
                        if (!$elm$core$Result$isOk(result)) {
                            return $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(key, result.a));
                        }
                        keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                    }
                }
                return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
            case 9:
                var answer = decoder.f;
                var decoders = decoder.g;
                for (var i = 0; i < decoders.length; i++) {
                    var result = _Json_runHelp(decoders[i], value);
                    if (!$elm$core$Result$isOk(result)) {
                        return result;
                    }
                    answer = answer(result.a);
                }
                return $elm$core$Result$Ok(answer);
            case 10:
                var result = _Json_runHelp(decoder.b, value);
                return (!$elm$core$Result$isOk(result))
                    ? result
                    : _Json_runHelp(decoder.h(result.a), value);
            case 11:
                var errors = _List_Nil;
                for (var temp = decoder.g; temp.b; temp = temp.b) {
                    var result = _Json_runHelp(temp.a, value);
                    if ($elm$core$Result$isOk(result)) {
                        return result;
                    }
                    errors = _List_Cons(result.a, errors);
                }
                return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
            case 1:
                return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn(decoder.a, _Json_wrap(value)));
            case 0:
                return $elm$core$Result$Ok(decoder.a);
        }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for (var i = 0; i < len; i++) {
            var result = _Json_runHelp(decoder, value[i]);
            if (!$elm$core$Result$isOk(result)) {
                return $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(i, result.a));
            }
            array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
        return Array.isArray(value) || (typeof FileList !== "undefined" && value instanceof FileList);
    }
    function _Json_toElmArray(array) {
        return $elm$core$Array$initialize_fn(array.length, function (i) { return array[i]; });
    }
    function _Json_expecting(type, value) {
        return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("Expecting " + type, _Json_wrap(value)));
    }
    function _Json_equality(x, y) {
        if (x === y) {
            return true;
        }
        if (x.$ !== y.$) {
            return false;
        }
        switch (x.$) {
            case 0:
            case 1:
                return x.a === y.a;
            case 2:
                return x.b === y.b;
            case 5:
                return x.c === y.c;
            case 3:
            case 4:
            case 8:
                return _Json_equality(x.b, y.b);
            case 6:
                return x.d === y.d && _Json_equality(x.b, y.b);
            case 7:
                return x.e === y.e && _Json_equality(x.b, y.b);
            case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g);
            case 10:
                return x.h === y.h && _Json_equality(x.b, y.b);
            case 11:
                return _Json_listEquality(x.g, y.g);
        }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) {
            return false;
        }
        for (var i = 0; i < len; i++) {
            if (!_Json_equality(aDecoders[i], bDecoders[i])) {
                return false;
            }
        }
        return true;
    }
    var _Json_encode_fn = function (indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    }, _Json_encode = F2(_Json_encode_fn);
    function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
    function _Json_unwrap_UNUSED(value) { return value.a; }
    function _Json_wrap(value) { return value; }
    function _Json_unwrap(value) { return value; }
    function _Json_emptyArray() { return []; }
    function _Json_emptyObject() { return {}; }
    var _Json_addField_fn = function (key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
    }, _Json_addField = F3(_Json_addField_fn);
    function _Json_addEntry(func) {
        return F2(function (entry, array) {
            array.push(_Json_unwrap(func(entry)));
            return array;
        });
    }
    var _Json_encodeNull = _Json_wrap(null);
    var _Bitwise_and_fn = function (a, b) {
        return a & b;
    }, _Bitwise_and = F2(_Bitwise_and_fn);
    var _Bitwise_or_fn = function (a, b) {
        return a | b;
    }, _Bitwise_or = F2(_Bitwise_or_fn);
    var _Bitwise_xor_fn = function (a, b) {
        return a ^ b;
    }, _Bitwise_xor = F2(_Bitwise_xor_fn);
    function _Bitwise_complement(a) {
        return ~a;
    }
    ;
    var _Bitwise_shiftLeftBy_fn = function (offset, a) {
        return a << offset;
    }, _Bitwise_shiftLeftBy = F2(_Bitwise_shiftLeftBy_fn);
    var _Bitwise_shiftRightBy_fn = function (offset, a) {
        return a >> offset;
    }, _Bitwise_shiftRightBy = F2(_Bitwise_shiftRightBy_fn);
    var _Bitwise_shiftRightZfBy_fn = function (offset, a) {
        return a >>> offset;
    }, _Bitwise_shiftRightZfBy = F2(_Bitwise_shiftRightZfBy_fn);
    function _Scheduler_succeed(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Scheduler_fail(error) {
        return {
            $: 1,
            a: error
        };
    }
    function _Scheduler_binding(callback) {
        return {
            $: 2,
            b: callback,
            c: null
        };
    }
    var _Scheduler_andThen_fn = function (callback, task) {
        return {
            $: 3,
            b: callback,
            d: task
        };
    }, _Scheduler_andThen = F2(_Scheduler_andThen_fn);
    var _Scheduler_onError_fn = function (callback, task) {
        return {
            $: 4,
            b: callback,
            d: task
        };
    }, _Scheduler_onError = F2(_Scheduler_onError_fn);
    function _Scheduler_receive(callback) {
        return {
            $: 5,
            b: callback
        };
    }
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
        var proc = {
            $: 0,
            e: _Scheduler_guid++,
            f: task,
            g: null,
            h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
    }
    function _Scheduler_spawn(task) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
    }
    function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
    }
    var _Scheduler_send_fn = function (proc, msg) {
        return _Scheduler_binding(function (callback) {
            _Scheduler_rawSend(proc, msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Scheduler_send = F2(_Scheduler_send_fn);
    function _Scheduler_kill(proc) {
        return _Scheduler_binding(function (callback) {
            var task = proc.f;
            if (task.$ === 2 && task.c) {
                task.c();
            }
            proc.f = null;
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) {
            return;
        }
        _Scheduler_working = true;
        while (proc = _Scheduler_queue.shift()) {
            _Scheduler_step(proc);
        }
        _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
        while (proc.f) {
            var rootTag = proc.f.$;
            if (rootTag === 0 || rootTag === 1) {
                while (proc.g && proc.g.$ !== rootTag) {
                    proc.g = proc.g.i;
                }
                if (!proc.g) {
                    return;
                }
                proc.f = proc.g.b(proc.f.a);
                proc.g = proc.g.i;
            }
            else if (rootTag === 2) {
                proc.f.c = proc.f.b(function (newRoot) {
                    proc.f = newRoot;
                    _Scheduler_enqueue(proc);
                });
                return;
            }
            else if (rootTag === 5) {
                if (proc.h.length === 0) {
                    return;
                }
                proc.f = proc.f.b(proc.h.shift());
            }
            else {
                proc.g = {
                    $: rootTag === 3 ? 0 : 1,
                    b: proc.f.b,
                    i: proc.g
                };
                proc.f = proc.f.d;
            }
        }
    }
    function _Bytes_width(bytes) {
        return bytes.byteLength;
    }
    var _Bytes_getHostEndianness_fn = function (le, be) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
        });
    }, _Bytes_getHostEndianness = F2(_Bytes_getHostEndianness_fn);
    function _Bytes_encode(encoder) {
        var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
        $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
        return mutableBytes;
    }
    var _Bytes_write_i8_fn = function (mb, i, n) { mb.setInt8(i, n); return i + 1; }, _Bytes_write_i8 = F3(_Bytes_write_i8_fn);
    var _Bytes_write_i16_fn = function (mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; }, _Bytes_write_i16 = F4(_Bytes_write_i16_fn);
    var _Bytes_write_i32_fn = function (mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; }, _Bytes_write_i32 = F4(_Bytes_write_i32_fn);
    var _Bytes_write_u8_fn = function (mb, i, n) { mb.setUint8(i, n); return i + 1; }, _Bytes_write_u8 = F3(_Bytes_write_u8_fn);
    var _Bytes_write_u16_fn = function (mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; }, _Bytes_write_u16 = F4(_Bytes_write_u16_fn);
    var _Bytes_write_u32_fn = function (mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; }, _Bytes_write_u32 = F4(_Bytes_write_u32_fn);
    var _Bytes_write_f32_fn = function (mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; }, _Bytes_write_f32 = F4(_Bytes_write_f32_fn);
    var _Bytes_write_f64_fn = function (mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; }, _Bytes_write_f64 = F4(_Bytes_write_f64_fn);
    var _Bytes_write_bytes_fn = function (mb, offset, bytes) {
        for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4) {
            mb.setUint32(offset + i, bytes.getUint32(i));
        }
        for (; i < len; i++) {
            mb.setUint8(offset + i, bytes.getUint8(i));
        }
        return offset + len;
    }, _Bytes_write_bytes = F3(_Bytes_write_bytes_fn);
    function _Bytes_getStringWidth(string) {
        for (var width = 0, i = 0; i < string.length; i++) {
            var code = string.charCodeAt(i);
            width +=
                (code < 128) ? 1 :
                    (code < 2048) ? 2 :
                        (code < 55296 || 56319 < code) ? 3 : (i++, 4);
        }
        return width;
    }
    var _Bytes_write_string_fn = function (mb, offset, string) {
        for (var i = 0; i < string.length; i++) {
            var code = string.charCodeAt(i);
            offset +=
                (code < 128)
                    ? (mb.setUint8(offset, code)
                        , 1)
                    :
                        (code < 2048)
                            ? (mb.setUint16(offset, 49280
                                | (code >>> 6 & 31) << 8
                                | code & 63)
                                , 2)
                            :
                                (code < 55296 || 56319 < code)
                                    ? (mb.setUint16(offset, 57472
                                        | (code >>> 12 & 15) << 8
                                        | code >>> 6 & 63)
                                        , mb.setUint8(offset + 2, 128
                                            | code & 63)
                                        , 3)
                                    :
                                        (code = (code - 55296) * 1024 + string.charCodeAt(++i) - 56320 + 65536
                                            , mb.setUint32(offset, 4034953344
                                                | (code >>> 18 & 7) << 24
                                                | (code >>> 12 & 63) << 16
                                                | (code >>> 6 & 63) << 8
                                                | code & 63)
                                            , 4);
        }
        return offset;
    }, _Bytes_write_string = F3(_Bytes_write_string_fn);
    var _Bytes_decode_fn = function (decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
        }
        catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }, _Bytes_decode_fn_unwrapped = function (decoder, bytes) {
        try {
            return $elm$core$Maybe$Just(decoder(bytes, 0).b);
        }
        catch (e) {
            return $elm$core$Maybe$Nothing;
        }
    }, _Bytes_decode = F2(_Bytes_decode_fn);
    var _Bytes_read_i8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); }, _Bytes_read_i8 = F2(_Bytes_read_i8_fn);
    var _Bytes_read_i16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); }, _Bytes_read_i16 = F3(_Bytes_read_i16_fn);
    var _Bytes_read_i32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); }, _Bytes_read_i32 = F3(_Bytes_read_i32_fn);
    var _Bytes_read_u8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); }, _Bytes_read_u8 = F2(_Bytes_read_u8_fn);
    var _Bytes_read_u16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); }, _Bytes_read_u16 = F3(_Bytes_read_u16_fn);
    var _Bytes_read_u32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); }, _Bytes_read_u32 = F3(_Bytes_read_u32_fn);
    var _Bytes_read_f32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); }, _Bytes_read_f32 = F3(_Bytes_read_f32_fn);
    var _Bytes_read_f64_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); }, _Bytes_read_f64 = F3(_Bytes_read_f64_fn);
    var _Bytes_read_bytes_fn = function (len, bytes, offset) {
        return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
    }, _Bytes_read_bytes = F3(_Bytes_read_bytes_fn);
    var _Bytes_read_string_fn = function (len, bytes, offset) {
        var string = "";
        var end = offset + len;
        for (; offset < end;) {
            var byte = bytes.getUint8(offset++);
            string +=
                (byte < 128)
                    ? String.fromCharCode(byte)
                    :
                        ((byte & 224) === 192)
                            ? String.fromCharCode((byte & 31) << 6 | bytes.getUint8(offset++) & 63)
                            :
                                ((byte & 240) === 224)
                                    ? String.fromCharCode((byte & 15) << 12
                                        | (bytes.getUint8(offset++) & 63) << 6
                                        | bytes.getUint8(offset++) & 63)
                                    :
                                        (byte =
                                            ((byte & 7) << 18
                                                | (bytes.getUint8(offset++) & 63) << 12
                                                | (bytes.getUint8(offset++) & 63) << 6
                                                | bytes.getUint8(offset++) & 63) - 65536
                                            , String.fromCharCode(Math.floor(byte / 1024) + 55296, byte % 1024 + 56320));
        }
        return _Utils_Tuple2(offset, string);
    }, _Bytes_read_string = F3(_Bytes_read_string_fn);
    var _Bytes_decodeFailure_fn = function () { throw 0; }, _Bytes_decodeFailure = F2(_Bytes_decodeFailure_fn);
    function _Process_sleep(time) {
        return _Scheduler_binding(function (callback) {
            var id = setTimeout(function () {
                callback(_Scheduler_succeed(_Utils_Tuple0));
            }, time);
            return function () { clearTimeout(id); };
        });
    }
    var _Platform_worker_fn = function (impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.ed, impl.e6, impl.eW, function () { return function () { }; });
    }, _Platform_worker = F4(_Platform_worker_fn);
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = _Json_run_fn(flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2);
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? { ports: ports } : {};
    }
    var _Platform_preload;
    function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
    }
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        for (var key in _Platform_effectManagers) {
            var manager = _Platform_effectManagers[key];
            if (manager.a) {
                ports = ports || {};
                ports[key] = manager.a(key, sendToApp);
            }
            managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
            b: init,
            c: onEffects,
            d: onSelfMsg,
            e: cmdMap,
            f: subMap
        };
    }
    function _Platform_instantiateManager(info, sendToApp) {
        var router = {
            g: sendToApp,
            h: undefined
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
            return _Scheduler_andThen_fn(loop, _Scheduler_receive(function (msg) {
                var value = msg.a;
                if (msg.$ === 0) {
                    return A3(onSelfMsg, router, value, state);
                }
                return cmdMap && subMap
                    ? A4(onEffects, router, value.i, value.j, state)
                    : A3(onEffects, router, cmdMap ? value.i : value.j, state);
            }));
        }
        return router.h = _Scheduler_rawSpawn(_Scheduler_andThen_fn(loop, info.b));
    }
    var _Platform_sendToApp_fn = function (router, msg) {
        return _Scheduler_binding(function (callback) {
            router.g(msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Platform_sendToApp = F2(_Platform_sendToApp_fn);
    var _Platform_sendToSelf_fn = function (router, msg) {
        return _Scheduler_send_fn(router.h, {
            $: 0,
            a: msg
        });
    }, _Platform_sendToSelf = F2(_Platform_sendToSelf_fn);
    function _Platform_leaf(home) {
        return function (value) {
            return {
                $: 1,
                k: home,
                l: value
            };
        };
    }
    function _Platform_batch(list) {
        return {
            $: 2,
            m: list
        };
    }
    var _Platform_map_fn = function (tagger, bag) {
        return {
            $: 3,
            n: tagger,
            o: bag
        };
    }, _Platform_map = F2(_Platform_map_fn);
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
        if (_Platform_effectsActive)
            return;
        _Platform_effectsActive = true;
        for (var fx; fx = _Platform_effectsQueue.shift();) {
            _Platform_dispatchEffects(fx.p, fx.q, fx.r);
        }
        _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for (var home in managers) {
            _Scheduler_rawSend(managers[home], {
                $: "fx",
                a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
            });
        }
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch (bag.$) {
            case 1:
                var home = bag.k;
                var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
                effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
                return;
            case 2:
                for (var list = bag.m; list.b; list = list.b) {
                    _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
                }
                return;
            case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                    s: bag.n,
                    t: taggers
                });
                return;
        }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
            for (var temp = taggers; temp; temp = temp.t) {
                x = temp.s(x);
            }
            return x;
        }
        var map = isCmd
            ? _Platform_effectManagers[home].e
            : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || { i: _List_Nil, j: _List_Nil };
        isCmd
            ? (effects.i = _List_Cons(newEffect, effects.i))
            : (effects.j = _List_Cons(newEffect, effects.j));
        return effects;
    }
    function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) {
            _Debug_crash(3, name);
        }
    }
    function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            e: _Platform_outgoingPortMap,
            u: converter,
            a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap_fn = function (tagger, value) { return value; }, _Platform_outgoingPortMap = F2(_Platform_outgoingPortMap_fn);
    function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, cmdList, state) {
            for (; cmdList.b; cmdList = cmdList.b) {
                var currentSubs = subs;
                var value = _Json_unwrap(converter(cmdList.a));
                for (var i = 0; i < currentSubs.length; i++) {
                    currentSubs[i](value);
                }
            }
            return init;
        });
        function subscribe(callback) {
            subs.push(callback);
        }
        function unsubscribe(callback) {
            subs = subs.slice();
            var index = subs.indexOf(callback);
            if (index >= 0) {
                subs.splice(index, 1);
            }
        }
        return {
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    }
    function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            f: _Platform_incomingPortMap,
            u: converter,
            a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap_fn = function (tagger, finalTagger) {
        return function (value) {
            return tagger(finalTagger(value));
        };
    }, _Platform_incomingPortMap = F2(_Platform_incomingPortMap_fn);
    function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, subList, state) {
            subs = subList;
            return init;
        });
        function send(incomingValue) {
            var result = _Json_run_fn(converter, _Json_wrap(incomingValue));
            $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
            var value = result.a;
            for (var temp = subs; temp.b; temp = temp.b) {
                sendToApp(temp.a(value));
            }
        }
        return { send: send };
    }
    /*
function _Platform_export(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsProd(scope["Elm"], exports)
            : scope["Elm"] = exports;
    }

*/    /*
function _Platform_mergeExportsProd(obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6)
                    : _Platform_mergeExportsProd(obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
*/
    /*
function _Platform_export_UNUSED(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports)
            : scope["Elm"] = exports;
    }

*/    /*
function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6, moduleName)
                    : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
*/
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr_fn = function (func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function (node, acc) {
            if (!node.$) {
                var subTree = node.a;
                return _JsArray_foldr_fn(helper, acc, subTree);
            }
            else {
                var values = node.a;
                return _JsArray_foldr_fn(func, acc, values);
            }
        });
        return _JsArray_foldr_fn(helper, _JsArray_foldr_fn(func, baseCase, tail), tree);
    }, $elm$core$Array$foldr = F3($elm$core$Array$foldr_fn);
    var $elm$core$Array$toList = function (array) {
        return $elm$core$Array$foldr_fn($elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Dict$foldr_fn = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, $elm$core$Dict$foldr_fn(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr_fn_unwrapped = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = func(key, value, $elm$core$Dict$foldr_fn_unwrapped(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr = F3($elm$core$Dict$foldr_fn);
    var $elm$core$Dict$toList = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, list) {
            return _List_Cons(_Utils_Tuple2(key, value), list);
        }, _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, keyList) {
            return _List_Cons(key, keyList);
        }, _List_Nil, dict);
    };
    var $elm$core$Set$toList = function (_v0) {
        var dict = _v0;
        return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Basics$EQ = 1;
    var $elm$core$Basics$GT = 2;
    var $elm$core$Basics$LT = 0;
    var $elm$core$Result$Err = function (a) {
        return { $: 1, a: a };
    };
    var $elm$json$Json$Decode$Failure_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $elm$json$Json$Decode$Failure = F2($elm$json$Json$Decode$Failure_fn);
    var $elm$json$Json$Decode$Field_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$json$Json$Decode$Field = F2($elm$json$Json$Decode$Field_fn);
    var $elm$json$Json$Decode$Index_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$json$Json$Decode$Index = F2($elm$json$Json$Decode$Index_fn);
    var $elm$core$Result$Ok = function (a) {
        return { $: 0, a: a };
    };
    var $elm$json$Json$Decode$OneOf = function (a) {
        return { $: 2, a: a };
    };
    var $elm$core$Basics$False = 1;
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$Maybe$Just = function (a) { return { $: 0, a: a }; };
    var $elm$core$Maybe$Nothing = { $: 1, a: null };
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$core$Basics$append = _Utils_append;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join_fn = function (sep, chunks) {
        return _String_join_fn(sep, _List_toArray(chunks));
    }, $elm$core$String$join = F2($elm$core$String$join_fn);
    var $elm$core$String$split_fn = function (sep, string) {
        return _List_fromArray(_String_split_fn(sep, string));
    }, $elm$core$String$split = F2($elm$core$String$split_fn);
    var $elm$json$Json$Decode$indent = function (str) {
        return $elm$core$String$join_fn("\n    ", $elm$core$String$split_fn("\n", str));
    };
    var $elm$core$List$foldl_fn = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl_fn_unwrapped = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = func(x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl = F3($elm$core$List$foldl_fn);
    var $elm$core$List$length = function (xs) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, i) {
            return i + 1;
        }, 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp_fn = function (lo, hi, list) {
        rangeHelp: while (true) {
            if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = _List_Cons(hi, list);
                lo = $temp$lo;
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
            }
            else {
                return list;
            }
        }
    }, $elm$core$List$rangeHelp = F3($elm$core$List$rangeHelp_fn);
    var $elm$core$List$range_fn = function (lo, hi) {
        return $elm$core$List$rangeHelp_fn(lo, hi, _List_Nil);
    }, $elm$core$List$range = F2($elm$core$List$range_fn);
    var $elm$core$List$indexedMap_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap_fn_unwrapped = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(f(i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap = F2($elm$core$List$indexedMap_fn);
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (97 <= code) && (code <= 122);
    };
    var $elm$core$Char$isUpper = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 90) && (65 <= code);
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function (_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 57) && (48 <= code);
    };
    var $elm$core$Char$isAlphaNum = function (_char) {
        return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
    };
    var $elm$core$List$reverse = function (list) {
        return $elm$core$List$foldl_fn($elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf_fn = function (i, error) {
        return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    }, $elm$json$Json$Decode$errorOneOf = F2($elm$json$Json$Decode$errorOneOf_fn);
    var $elm$json$Json$Decode$errorToString = function (error) {
        return $elm$json$Json$Decode$errorToStringHelp_fn(error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp_fn = function (error, context) {
        errorToStringHelp: while (true) {
            switch (error.$) {
                case 0:
                    var f = error.a;
                    var err = error.b;
                    var isSimple = function () {
                        var _v1 = $elm$core$String$uncons(f);
                        if (_v1.$ === 1) {
                            return false;
                        }
                        else {
                            var _v2 = _v1.a;
                            var _char = _v2.a;
                            var rest = _v2.b;
                            return $elm$core$Char$isAlpha(_char) && _String_all_fn($elm$core$Char$isAlphaNum, rest);
                        }
                    }();
                    var fieldName = isSimple ? ("." + f) : ("['" + (f + "']"));
                    var $temp$error = err, $temp$context = _List_Cons(fieldName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 1:
                    var i = error.a;
                    var err = error.b;
                    var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                    var $temp$error = err, $temp$context = _List_Cons(indexName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 2:
                    var errors = error.a;
                    if (!errors.b) {
                        return "Ran into a Json.Decode.oneOf with no possibilities" + function () {
                            if (!context.b) {
                                return "!";
                            }
                            else {
                                return " at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                            }
                        }();
                    }
                    else {
                        if (!errors.b.b) {
                            var err = errors.a;
                            var $temp$error = err, $temp$context = context;
                            error = $temp$error;
                            context = $temp$context;
                            continue errorToStringHelp;
                        }
                        else {
                            var starter = function () {
                                if (!context.b) {
                                    return "Json.Decode.oneOf";
                                }
                                else {
                                    return "The Json.Decode.oneOf at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                                }
                            }();
                            var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                            return $elm$core$String$join_fn("\n\n", _List_Cons(introduction, $elm$core$List$indexedMap_fn($elm$json$Json$Decode$errorOneOf, errors)));
                        }
                    }
                default:
                    var msg = error.a;
                    var json = error.b;
                    var introduction = function () {
                        if (!context.b) {
                            return "Problem with the given value:\n\n";
                        }
                        else {
                            return "Problem with the value at json" + ($elm$core$String$join_fn("", $elm$core$List$reverse(context)) + ":\n\n    ");
                        }
                    }();
                    return introduction + ($elm$json$Json$Decode$indent(_Json_encode_fn(4, json)) + ("\n\n" + msg));
            }
        }
    }, $elm$json$Json$Decode$errorToStringHelp = F2($elm$json$Json$Decode$errorToStringHelp_fn);
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin_fn = function (a, b, c, d) {
        return { $: 0, a: a, b: b, c: c, d: d };
    }, $elm$core$Array$Array_elm_builtin = F4($elm$core$Array$Array_elm_builtin_fn);
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase_fn = function (base, number) {
        return _Basics_log(number) / _Basics_log(base);
    }, $elm$core$Basics$logBase = F2($elm$core$Basics$logBase_fn);
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling($elm$core$Basics$logBase_fn(2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = $elm$core$Array$Array_elm_builtin_fn(0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$Basics$apL_fn = function (f, x) {
        return f(x);
    }, $elm$core$Basics$apL = F2($elm$core$Basics$apL_fn);
    var $elm$core$Basics$apR_fn = function (x, f) {
        return f(x);
    }, $elm$core$Basics$apR = F2($elm$core$Basics$apR_fn);
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$Basics$max_fn = function (x, y) {
        return (_Utils_cmp(x, y) > 0) ? x : y;
    }, $elm$core$Basics$max = F2($elm$core$Basics$max_fn);
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes_fn = function (nodes, acc) {
        compressNodes: while (true) {
            var _v0 = _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodes);
            var node = _v0.a;
            var remainingNodes = _v0.b;
            var newAcc = _List_Cons($elm$core$Array$SubTree(node), acc);
            if (!remainingNodes.b) {
                return $elm$core$List$reverse(newAcc);
            }
            else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
            }
        }
    }, $elm$core$Array$compressNodes = F2($elm$core$Array$compressNodes_fn);
    var $elm$core$Tuple$first = function (_v0) {
        var x = _v0.a;
        return x;
    };
    var $elm$core$Array$treeFromBuilder_fn = function (nodeList, nodeListSize) {
        treeFromBuilder: while (true) {
            var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
            if (newNodeSize === 1) {
                return _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodeList).a;
            }
            else {
                var $temp$nodeList = $elm$core$Array$compressNodes_fn(nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
            }
        }
    }, $elm$core$Array$treeFromBuilder = F2($elm$core$Array$treeFromBuilder_fn);
    var $elm$core$Array$builderToArray_fn = function (reverseNodeList, builder) {
        if (!builder.J) {
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.dF), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.dF);
        }
        else {
            var treeLen = builder.J * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor($elm$core$Basics$logBase_fn($elm$core$Array$branchFactor, treeLen - 1));
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.N) : builder.N;
            var tree = $elm$core$Array$treeFromBuilder_fn(correctNodeList, builder.J);
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.dF) + treeLen, $elm$core$Basics$max_fn(5, depth * $elm$core$Array$shiftStep), tree, builder.dF);
        }
    }, $elm$core$Array$builderToArray = F2($elm$core$Array$builderToArray_fn);
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp_fn = function (fn, fromIndex, len, nodeList, tail) {
        initializeHelp: while (true) {
            if (fromIndex < 0) {
                return $elm$core$Array$builderToArray_fn(false, { N: nodeList, J: (len / $elm$core$Array$branchFactor) | 0, dF: tail });
            }
            else {
                var leaf = $elm$core$Array$Leaf(_JsArray_initialize_fn($elm$core$Array$branchFactor, fromIndex, fn));
                var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = _List_Cons(leaf, nodeList), $temp$tail = tail;
                fn = $temp$fn;
                fromIndex = $temp$fromIndex;
                len = $temp$len;
                nodeList = $temp$nodeList;
                tail = $temp$tail;
                continue initializeHelp;
            }
        }
    }, $elm$core$Array$initializeHelp = F5($elm$core$Array$initializeHelp_fn);
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize_fn = function (len, fn) {
        if (len <= 0) {
            return $elm$core$Array$empty;
        }
        else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = _JsArray_initialize_fn(tailLen, len - tailLen, fn);
            var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
            return $elm$core$Array$initializeHelp_fn(fn, initialFromIndex, len, _List_Nil, tail);
        }
    }, $elm$core$Array$initialize = F2($elm$core$Array$initialize_fn);
    var $elm$core$Basics$True = 0;
    var $elm$core$Result$isOk = function (result) {
        if (!result.$) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $author$project$Main$fromJs = _Platform_incomingPort("fromJs", $elm$json$Json$Decode$value);
    var $author$project$Main$WaitingForLaunchArguments = { $: 0 };
    var $author$project$Main$initialState = $author$project$Main$WaitingForLaunchArguments;
    var $author$project$Main$AssemblingModuleSourceFromStandardIn = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Main$GrenJsonReadFailed = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$Main$ProjectModeSingleRun = 0;
    var $author$project$Main$ProjectModeWatch = 1;
    var $author$project$Main$ShowingHelp = { $: 1 };
    var $author$project$Main$SingleFileStandardStreamRun = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$Main$SingleProjectRun = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$Main$WaitingForGrenJson = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$Main$Watching = function (a) {
        return { $: 5, a: a };
    };
    var $elm$core$List$drop_fn = function (n, list) {
        drop: while (true) {
            if (n <= 0) {
                return list;
            }
            else {
                if (!list.b) {
                    return list;
                }
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs;
                    n = $temp$n;
                    list = $temp$list;
                    continue drop;
                }
            }
        }
    }, $elm$core$List$drop = F2($elm$core$List$drop_fn);
    var $miniBill$elm_fast_dict$Internal$Dict_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $miniBill$elm_fast_dict$Internal$Dict = F2($miniBill$elm_fast_dict$Internal$Dict_fn);
    var $miniBill$elm_fast_dict$Internal$Leaf = { $: 1 };
    var $miniBill$elm_fast_dict$FastDict$empty = $miniBill$elm_fast_dict$Internal$Dict_fn(0, $miniBill$elm_fast_dict$Internal$Leaf);
    var $elm$core$Basics$identity = function (x) {
        return x;
    };
    var $miniBill$elm_fast_dict$FastSet$Set = $elm$core$Basics$identity;
    var $miniBill$elm_fast_dict$FastSet$empty = $miniBill$elm_fast_dict$FastDict$empty;
    var $lue_bird$elm_state_interface_experimental$Node$Exit = function (a) {
        return { $: 18, a: a };
    };
    var $elm$json$Json$Encode$object = function (pairs) {
        return _Json_wrap($elm$core$List$foldl_fn_unwrapped(function (_v0, obj) {
            var k = _v0.a;
            var v = _v0.b;
            return _Json_addField_fn(k, v, obj);
        }, _Json_emptyObject(0), pairs));
    };
    var $elm$json$Json$Encode$int = _Json_wrap;
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofInt = $elm$json$Json$Encode$int;
    var $elm$json$Json$Encode$list_fn = function (func, entries) {
        return _Json_wrap($elm$core$List$foldl_fn(_Json_addEntry(func), _Json_emptyArray(0), entries));
    }, $elm$json$Json$Encode$list = F2($elm$json$Json$Encode$list_fn);
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn = function (elementToStructuredId, structuredIds) {
        return $elm$json$Json$Encode$list_fn(elementToStructuredId, structuredIds);
    }, $lue_bird$elm_state_interface_experimental$StructuredId$ofList = F2($lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn);
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofParts = function (fieldValueStructureIds) {
        return $elm$json$Json$Encode$list_fn($elm$core$Basics$identity, fieldValueStructureIds);
    };
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofString = $elm$json$Json$Encode$string;
    var $elm$json$Json$Encode$null = _Json_encodeNull;
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit = $elm$json$Json$Encode$null;
    var $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant = function (variant) {
        return $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
            $lue_bird$elm_state_interface_experimental$StructuredId$ofString(variant.eX),
            variant.aN
        ]));
    };
    var $elm$time$Time$posixToMillis = function (_v0) {
        var millis = _v0;
        return millis;
    };
    var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId = function (timePosix) {
        return $lue_bird$elm_state_interface_experimental$StructuredId$ofInt($elm$time$Time$posixToMillis(timePosix));
    };
    var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId = function (interfaceSingle) {
        return $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant(function () {
            switch (interfaceSingle.$) {
                case 9:
                    var request = interfaceSingle.a;
                    return {
                        eX: "HttpRequestSend",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.bC)
                    };
                case 10:
                    var listen = interfaceSingle.a;
                    return {
                        eX: "HttpRequestListen",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.aw)
                    };
                case 11:
                    var send = interfaceSingle.a;
                    return {
                        eX: "HttpResponseSend",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("port", $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.aw)),
                            _Utils_Tuple2("statusCode", $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.bf)),
                            _Utils_Tuple2("headers", $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn(function (header) {
                                return $elm$json$Json$Encode$object(_List_fromArray([
                                    _Utils_Tuple2("name", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.q)),
                                    _Utils_Tuple2("value", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.aN))
                                ]));
                            }, send.af)),
                            _Utils_Tuple2("dataAsciiString", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(send.cw))
                        ]))
                    };
                case 12:
                    return { eX: "TimePosixRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 13:
                    return { eX: "TimezoneOffsetRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 16:
                    return { eX: "TimezoneNameRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 14:
                    var once = interfaceSingle.a;
                    return {
                        eX: "TimeOnce",
                        aN: $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId(once.bL)
                    };
                case 17:
                    var request = interfaceSingle.a;
                    return {
                        eX: "RandomUnsignedInt32sRequest",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(request.bG)
                    };
                case 15:
                    var listen = interfaceSingle.a;
                    return {
                        eX: "TimePeriodicallyListen",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.bI)
                    };
                case 18:
                    return { eX: "Exit", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 19:
                    var make = interfaceSingle.a;
                    return {
                        eX: "DirectoryMake",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(make.bx)
                    };
                case 20:
                    var path = interfaceSingle.a;
                    return {
                        eX: "FileRemove",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(path)
                    };
                case 21:
                    var write = interfaceSingle.a;
                    return {
                        eX: "FileWrite",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
                            $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.bx),
                            $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.bF)
                        ]))
                    };
                case 22:
                    var request = interfaceSingle.a;
                    return {
                        eX: "FileRequest",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.bx)
                    };
                case 23:
                    var listen = interfaceSingle.a;
                    return {
                        eX: "FileChangeListen",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(listen.bx)
                    };
                case 24:
                    var request = interfaceSingle.a;
                    return {
                        eX: "FileInfoRequest",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.bx)
                    };
                case 25:
                    var request = interfaceSingle.a;
                    return {
                        eX: "DirectorySubPathsRequest",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.bx)
                    };
                case 0:
                    return { eX: "WorkingDirectoryPathRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 1:
                    return { eX: "LaunchArgumentsRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 7:
                    return { eX: "TerminalSizeRequest", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 8:
                    return { eX: "TerminalSizeChangeListen", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                case 2:
                    var title = interfaceSingle.a;
                    return {
                        eX: "ProcessTitleSet",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(title)
                    };
                case 3:
                    var text = interfaceSingle.a;
                    return {
                        eX: "StandardOutWrite",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
                    };
                case 4:
                    var text = interfaceSingle.a;
                    return {
                        eX: "StandardErrWrite",
                        aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
                    };
                case 5:
                    return { eX: "StandardInListen", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
                default:
                    return { eX: "StandardInRawListen", aN: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            }
        }());
    };
    var $miniBill$elm_fast_dict$Internal$Black = 1;
    var $miniBill$elm_fast_dict$Internal$InnerNode_fn = function (a, b, c, d, e) {
        return { $: 0, a: a, b: b, c: c, d: d, e: e };
    }, $miniBill$elm_fast_dict$Internal$InnerNode = F5($miniBill$elm_fast_dict$Internal$InnerNode_fn);
    var $miniBill$elm_fast_dict$FastDict$singleton_fn = function (key, value) {
        return $miniBill$elm_fast_dict$Internal$Dict_fn(1, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf));
    }, $miniBill$elm_fast_dict$FastDict$singleton = F2($miniBill$elm_fast_dict$FastDict$singleton_fn);
    var $lue_bird$elm_state_interface_experimental$StructuredId$toJson = function (structuredId) {
        return structuredId;
    };
    var $lue_bird$elm_state_interface_experimental$StructuredId$toString = function (structuredId) {
        return _Json_encode_fn(0, $lue_bird$elm_state_interface_experimental$StructuredId$toJson(structuredId));
    };
    var $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle = function (interfaceSingle) {
        return $miniBill$elm_fast_dict$FastDict$singleton_fn($lue_bird$elm_state_interface_experimental$StructuredId$toString($lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(interfaceSingle)), interfaceSingle);
    };
    var $lue_bird$elm_state_interface_experimental$Node$exit = function (code) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$Exit(code));
    };
    var $miniBill$elm_fast_dict$FastDict$foldlInner_fn = function (func, acc, dict) {
        foldlInner: while (true) {
            if (dict.$ === 1) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, $miniBill$elm_fast_dict$FastDict$foldlInner_fn(func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldlInner;
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$foldlInner_fn_unwrapped = function (func, acc, dict) {
        foldlInner: while (true) {
            if (dict.$ === 1) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = func(key, value, $miniBill$elm_fast_dict$FastDict$foldlInner_fn_unwrapped(func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldlInner;
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$foldlInner = F3($miniBill$elm_fast_dict$FastDict$foldlInner_fn);
    var $miniBill$elm_fast_dict$FastDict$foldl_fn = function (func, acc, _v0) {
        var dict = _v0.b;
        return $miniBill$elm_fast_dict$FastDict$foldlInner_fn(func, acc, dict);
    }, $miniBill$elm_fast_dict$FastDict$foldl = F3($miniBill$elm_fast_dict$FastDict$foldl_fn);
    var $miniBill$elm_fast_dict$Internal$Red = 0;
    var $miniBill$elm_fast_dict$FastDict$balance_fn = function (color, key, value, left, right) {
        if ((!right.$) && (!right.a)) {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if ((!left.$) && (!left.a)) {
                var _v3 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, lK, lV, lLeft, lRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, rK, rV, rLeft, rRight));
            }
            else {
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, rK, rV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, left, rLeft), rRight);
            }
        }
        else {
            if ((((!left.$) && (!left.a)) && (!left.d.$)) && (!left.d.a)) {
                var _v5 = left.a;
                var lK = left.b;
                var lV = left.c;
                var _v6 = left.d;
                var _v7 = _v6.a;
                var llK = _v6.b;
                var llV = _v6.c;
                var llLeft = _v6.d;
                var llRight = _v6.e;
                var lRight = left.e;
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, llK, llV, llLeft, llRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, lRight, right));
            }
            else {
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, left, right);
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$balance = F5($miniBill$elm_fast_dict$FastDict$balance_fn);
    var $elm$core$Basics$compare = _Utils_compare;
    var $miniBill$elm_fast_dict$FastDict$insertHelp_fn = function (key, value, dict) {
        if (dict.$ === 1) {
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf), true);
        }
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = _Utils_compare_fn(key, nKey);
            switch (_v1) {
                case 0:
                    var _v2 = $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, nLeft);
                    var newLeft = _v2.a;
                    var isNew = _v2.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(nColor, nKey, nValue, newLeft, nRight), isNew);
                case 1:
                    return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(nColor, nKey, value, nLeft, nRight), false);
                default:
                    var _v3 = $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, nRight);
                    var newRight = _v3.a;
                    var isNew = _v3.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(nColor, nKey, nValue, nLeft, newRight), isNew);
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$insertHelp = F3($miniBill$elm_fast_dict$FastDict$insertHelp_fn);
    var $miniBill$elm_fast_dict$FastDict$insertInner_fn = function (key, value, dict) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, dict);
        if ((!_v0.a.$) && (!_v0.a.a)) {
            var _v1 = _v0.a;
            var _v2 = _v1.a;
            var k = _v1.b;
            var v = _v1.c;
            var l = _v1.d;
            var r = _v1.e;
            var isNew = _v0.b;
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, l, r), isNew);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $miniBill$elm_fast_dict$FastDict$insertInner = F3($miniBill$elm_fast_dict$FastDict$insertInner_fn);
    var $miniBill$elm_fast_dict$FastDict$insert_fn = function (key, value, _v0) {
        var sz = _v0.a;
        var dict = _v0.b;
        var _v1 = $miniBill$elm_fast_dict$FastDict$insertInner_fn(key, value, dict);
        var result = _v1.a;
        var isNew = _v1.b;
        return isNew ? $miniBill$elm_fast_dict$Internal$Dict_fn(sz + 1, result) : $miniBill$elm_fast_dict$Internal$Dict_fn(sz, result);
    }, $miniBill$elm_fast_dict$FastDict$insert = F3($miniBill$elm_fast_dict$FastDict$insert_fn);
    var $miniBill$elm_fast_dict$FastDict$insertHelpNoReplace_fn = function (key, value, dict) {
        if (dict.$ === 1) {
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf), true);
        }
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = _Utils_compare_fn(key, nKey);
            switch (_v1) {
                case 0:
                    var _v2 = $miniBill$elm_fast_dict$FastDict$insertHelpNoReplace_fn(key, value, nLeft);
                    var newLeft = _v2.a;
                    var isNew = _v2.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(nColor, nKey, nValue, newLeft, nRight), isNew);
                case 1:
                    return _Utils_Tuple2(dict, false);
                default:
                    var _v3 = $miniBill$elm_fast_dict$FastDict$insertHelpNoReplace_fn(key, value, nRight);
                    var newRight = _v3.a;
                    var isNew = _v3.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(nColor, nKey, nValue, nLeft, newRight), isNew);
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$insertHelpNoReplace = F3($miniBill$elm_fast_dict$FastDict$insertHelpNoReplace_fn);
    var $miniBill$elm_fast_dict$FastDict$insertInnerNoReplace_fn = function (key, value, dict) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$insertHelpNoReplace_fn(key, value, dict);
        if ((!_v0.a.$) && (!_v0.a.a)) {
            var _v1 = _v0.a;
            var _v2 = _v1.a;
            var k = _v1.b;
            var v = _v1.c;
            var l = _v1.d;
            var r = _v1.e;
            var isNew = _v0.b;
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, l, r), isNew);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $miniBill$elm_fast_dict$FastDict$insertInnerNoReplace = F3($miniBill$elm_fast_dict$FastDict$insertInnerNoReplace_fn);
    var $miniBill$elm_fast_dict$FastDict$insertNoReplace_fn = function (key, value, _v0) {
        var sz = _v0.a;
        var dict = _v0.b;
        var _v1 = $miniBill$elm_fast_dict$FastDict$insertInnerNoReplace_fn(key, value, dict);
        var result = _v1.a;
        var isNew = _v1.b;
        return isNew ? $miniBill$elm_fast_dict$Internal$Dict_fn(sz + 1, result) : $miniBill$elm_fast_dict$Internal$Dict_fn(sz, result);
    }, $miniBill$elm_fast_dict$FastDict$insertNoReplace = F3($miniBill$elm_fast_dict$FastDict$insertNoReplace_fn);
    var $miniBill$elm_fast_dict$FastDict$union_fn = function (t1, t2) {
        var s1 = t1.a;
        var s2 = t2.a;
        return (_Utils_cmp(s1, s2) > 0) ? $miniBill$elm_fast_dict$FastDict$foldl_fn($miniBill$elm_fast_dict$FastDict$insertNoReplace, t1, t2) : $miniBill$elm_fast_dict$FastDict$foldl_fn($miniBill$elm_fast_dict$FastDict$insert, t2, t1);
    }, $miniBill$elm_fast_dict$FastDict$union = F2($miniBill$elm_fast_dict$FastDict$union_fn);
    var $lue_bird$elm_state_interface_experimental$Node$interfaceBatch = function (interfaces) {
        return $elm$core$List$foldl_fn($miniBill$elm_fast_dict$FastDict$union, $miniBill$elm_fast_dict$FastDict$empty, interfaces);
    };
    var $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite = function (a) {
        return { $: 3, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$standardErrWrite = function (text) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
    };
    var $author$project$Main$errorInterface = function (message) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
            $lue_bird$elm_state_interface_experimental$Node$standardErrWrite(message + "\n"),
            $lue_bird$elm_state_interface_experimental$Node$exit(1)
        ]));
    };
    var $elm$core$List$foldrHelper_fn = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return A2(fn, a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return A2(fn, a, A2(fn, b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn(fn, acc, ctr + 1, r4);
                        return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper_fn_unwrapped = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return fn(a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return fn(a, fn(b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return fn(a, fn(b, fn(c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn_unwrapped(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn_unwrapped(fn, acc, ctr + 1, r4);
                        return fn(a, fn(b, fn(c, fn(d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper = F4($elm$core$List$foldrHelper_fn);
    var $elm$core$List$foldr_fn = function (fn, acc, ls) {
        return $elm$core$List$foldrHelper_fn(fn, acc, 0, ls);
    }, $elm$core$List$foldr = F3($elm$core$List$foldr_fn);
    var $elm$core$List$filter_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            if (f(xs.a)) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        return tmp.
            b;
    }, $elm$core$List$filter = F2($elm$core$List$filter_fn);
    var $miniBill$elm_fast_dict$FastSet$insert_fn = function (value, _v0) {
        var set = _v0;
        return $miniBill$elm_fast_dict$FastDict$insert_fn(value, false, set);
    }, $miniBill$elm_fast_dict$FastSet$insert = F2($miniBill$elm_fast_dict$FastSet$insert_fn);
    var $miniBill$elm_fast_dict$FastSet$fromList = function (list) {
        return $elm$core$List$foldl_fn($miniBill$elm_fast_dict$FastSet$insert, $miniBill$elm_fast_dict$FastSet$empty, list);
    };
    var $lue_bird$elm_state_interface_experimental$Node$DirectoryMake = function (a) {
        return { $: 19, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest = function (a) {
        return { $: 25, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileChangeListen = function (a) {
        return { $: 23, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest = function (a) {
        return { $: 24, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileRemove = function (a) {
        return { $: 20, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileRequest = function (a) {
        return { $: 22, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileWrite = function (a) {
        return { $: 21, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen = function (a) {
        return { $: 10, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend = function (a) {
        return { $: 9, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend = function (a) {
        return { $: 11, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet = function (a) {
        return { $: 2, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest = function (a) {
        return { $: 17, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite = function (a) {
        return { $: 4, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$StandardInListen = function (a) {
        return { $: 5, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen = function (a) {
        return { $: 6, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen = function (a) {
        return { $: 8, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest = function (a) {
        return { $: 7, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TimeOnce = function (a) {
        return { $: 14, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen = function (a) {
        return { $: 15, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest = function (a) {
        return { $: 12, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest = function (a) {
        return { $: 16, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest = function (a) {
        return { $: 13, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest = function (a) {
        return { $: 0, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn = function (futureChange, interfaceSingle) {
        switch (interfaceSingle.$) {
            case 9:
                var send = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend({
                    bW: send.bW,
                    af: send.af,
                    bv: send.bv,
                    p: function (responseBytes) {
                        return futureChange(send.p(responseBytes));
                    },
                    bC: send.bC
                });
            case 10:
                var listen = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen({
                    p: function (request) {
                        return futureChange(listen.p(request));
                    },
                    aw: listen.aw
                });
            case 11:
                var send = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend(send);
            case 12:
                var requestTimeNow = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest(function (event) {
                    return futureChange(requestTimeNow(event));
                });
            case 13:
                var requestTimezone = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest(function (event) {
                    return futureChange(requestTimezone(event));
                });
            case 16:
                var requestTimezoneName = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest(function (event) {
                    return futureChange(requestTimezoneName(event));
                });
            case 14:
                var once = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TimeOnce({
                    p: function (event) {
                        return futureChange(once.p(event));
                    },
                    bL: once.bL
                });
            case 17:
                var request = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest({
                    bG: request.bG,
                    p: function (ints) {
                        return futureChange(request.p(ints));
                    }
                });
            case 15:
                var periodicallyListen = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen({
                    bI: periodicallyListen.bI,
                    p: function (posix) {
                        return futureChange(periodicallyListen.p(posix));
                    }
                });
            case 18:
                var code = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$Exit(code);
            case 19:
                var make = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$DirectoryMake({
                    p: function (result) {
                        return futureChange(make.p(result));
                    },
                    bx: make.bx
                });
            case 20:
                var path = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$FileRemove(path);
            case 21:
                var write = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$FileWrite({
                    bF: write.bF,
                    p: function (result) {
                        return futureChange(write.p(result));
                    },
                    bx: write.bx
                });
            case 22:
                var request = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$FileRequest({
                    p: function (content) {
                        return futureChange(request.p(content));
                    },
                    bx: request.bx
                });
            case 23:
                var listen = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$FileChangeListen({
                    p: function (fileChange) {
                        return futureChange(listen.p(fileChange));
                    },
                    bx: listen.bx
                });
            case 24:
                var request = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest({
                    p: function (info) {
                        return futureChange(request.p(info));
                    },
                    bx: request.bx
                });
            case 25:
                var request = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest({
                    p: function (subNames) {
                        return futureChange(request.p(subNames));
                    },
                    bx: request.bx
                });
            case 0:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest(function (path) {
                    return futureChange(on(path));
                });
            case 1:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest(function (_arguments) {
                    return futureChange(on(_arguments));
                });
            case 7:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest(function (size) {
                    return futureChange(on(size));
                });
            case 8:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen(function (size) {
                    return futureChange(on(size));
                });
            case 2:
                var newTitle = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet(newTitle);
            case 3:
                var text = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text);
            case 4:
                var text = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite(text);
            case 5:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$StandardInListen(function (size) {
                    return futureChange(on(size));
                });
            default:
                var on = interfaceSingle.a;
                return $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen(function (size) {
                    return futureChange(on(size));
                });
        }
    }, $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap = F2($lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn);
    var $miniBill$elm_fast_dict$FastDict$mapInner_fn = function (func, dict) {
        if (dict.$ === 1) {
            return $miniBill$elm_fast_dict$Internal$Leaf;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, A2(func, key, value), $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, left), $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, right));
        }
    }, $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped = function (func, dict) {
        if (dict.$ === 1) {
            return $miniBill$elm_fast_dict$Internal$Leaf;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, func(key, value), $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped(func, left), $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped(func, right));
        }
    }, $miniBill$elm_fast_dict$FastDict$mapInner = F2($miniBill$elm_fast_dict$FastDict$mapInner_fn);
    var $miniBill$elm_fast_dict$FastDict$map_fn = function (func, _v0) {
        var sz = _v0.a;
        var dict = _v0.b;
        return $miniBill$elm_fast_dict$Internal$Dict_fn(sz, $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, dict));
    }, $miniBill$elm_fast_dict$FastDict$map = F2($miniBill$elm_fast_dict$FastDict$map_fn);
    var $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn = function (futureChange, _interface) {
        return $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v0, interfaceSingle) {
            return $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn(futureChange, interfaceSingle);
        }), _interface);
    }, $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap = F2($lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn);
    var $author$project$Main$ModuleSourceReceived = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$String$slice = _String_slice;
    var $elm$core$String$left_fn = function (n, string) {
        return (n < 1) ? "" : _String_slice_fn(0, n, string);
    }, $elm$core$String$left = F2($elm$core$String$left_fn);
    var $author$project$GrenSyntax$EffectModule = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GrenSyntax$Node_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$GrenSyntax$Node = F2($author$project$GrenSyntax$Node_fn);
    var $author$project$GrenSyntax$NormalModule = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$PortModule = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$List$any_fn = function (isOkay, list) {
        any: while (true) {
            if (!list.b) {
                return false;
            }
            else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) {
                    return true;
                }
                else {
                    var $temp$isOkay = isOkay, $temp$list = xs;
                    isOkay = $temp$isOkay;
                    list = $temp$list;
                    continue any;
                }
            }
        }
    }, $elm$core$List$any = F2($elm$core$List$any_fn);
    var $author$project$GrenParserLenient$ropeLikelyFilledToListInto_fn = function (initialAcc, ropeLikelyFilled) {
        ropeLikelyFilledToListInto: while (true) {
            if (!ropeLikelyFilled.$) {
                var onlyElement = ropeLikelyFilled.a;
                return _List_Cons(onlyElement, initialAcc);
            }
            else {
                var left = ropeLikelyFilled.a;
                var right = ropeLikelyFilled.b;
                var $temp$initialAcc = $author$project$GrenParserLenient$ropeLikelyFilledToListInto_fn(initialAcc, right), $temp$ropeLikelyFilled = left;
                initialAcc = $temp$initialAcc;
                ropeLikelyFilled = $temp$ropeLikelyFilled;
                continue ropeLikelyFilledToListInto;
            }
        }
    }, $author$project$GrenParserLenient$ropeLikelyFilledToListInto = F2($author$project$GrenParserLenient$ropeLikelyFilledToListInto_fn);
    var $author$project$GrenParserLenient$ropeToList = function (rope) {
        if (rope.$ === 1) {
            return _List_Nil;
        }
        else {
            var ropeLikelyFilled = rope.a;
            return $author$project$GrenParserLenient$ropeLikelyFilledToListInto_fn(_List_Nil, ropeLikelyFilled);
        }
    };
    var $author$project$GrenParserLenient$commentsToList = function (comments) {
        return $author$project$GrenParserLenient$ropeToList(comments);
    };
    var $elm$core$List$append_fn = function (xs, ys) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
        end.b = ys;
        return tmp.b;
    }, $elm$core$List$append = F2($elm$core$List$append_fn);
    var $elm$core$List$concat = function (lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.b; lists = lists.b) {
            var xs = lists.a;
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = lists.a;
        return tmp.b;
    };
    var $elm$core$List$map_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs
            = xs.b) {
            var next = _List_Cons(f(xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$map = F2($elm$core$List$map_fn);
    var $elm$core$List$concatMap_fn = function (f, lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.
            b; lists = lists.b) {
            var xs = f(lists.a);
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = f(lists.a);
        return tmp.b;
    }, $elm$core$List$concatMap = F2($elm$core$List$concatMap_fn);
    var $author$project$GrenSyntax$AliasDeclaration = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenSyntax$CustomTypeDeclaration = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GrenSyntax$FunctionDeclaration = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$PortDeclaration = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$ParserFast$Done = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$ParserFast$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$ParserFast$Good_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$ParserFast$Good = F2($author$project$ParserFast$Good_fn);
    var $author$project$ParserFast$Parser = $elm$core$Basics$identity;
    var $elm$core$String$any = _String_any;
    var $elm$core$Basics$isNaN = _Basics_isNaN;
    var $author$project$Char$Extra$isUtf16Surrogate = function (c) {
        return $elm$core$Basics$isNaN($elm$core$Char$toCode(c));
    };
    var $author$project$ParserFast$charStringIsUtf16HighSurrogate = function (charString) {
        return _String_any_fn($author$project$Char$Extra$isUtf16Surrogate, charString);
    };
    var $elm$core$Basics$negate = function (n) {
        return -n;
    };
    var $author$project$ParserFast$charOrEnd_fn = function (offset, string) {
        var _v0 = _String_slice_fn(offset, offset + 1, string);
        switch (_v0) {
            case "\n":
                return -2;
            case "":
                return -1;
            default:
                var charNotLinebreakNotEndOfSource = _v0;
                return $author$project$ParserFast$charStringIsUtf16HighSurrogate(charNotLinebreakNotEndOfSource) ? (offset + 2) : (offset + 1);
        }
    }, $author$project$ParserFast$charOrEnd = F2($author$project$ParserFast$charOrEnd_fn);
    var $author$project$ParserFast$Bad_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$ParserFast$Bad = F2($author$project$ParserFast$Bad_fn);
    var $author$project$ParserFast$pStepBadBacktracking = $author$project$ParserFast$Bad_fn(false, 0);
    var $author$project$ParserFast$skipWhileHelp_fn = function (isGood, offset, row, col, src, indent) {
        skipWhileHelp: while (true) {
            var actualChar = _String_slice_fn(offset, offset + 1, src);
            if (_String_any_fn(isGood, actualChar)) {
                if (actualChar === "\n") {
                    var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileHelp;
                }
                else {
                    var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileHelp;
                }
            }
            else {
                if ($author$project$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(isGood, _String_slice_fn(offset, offset + 2, src))) {
                    var $temp$isGood = isGood, $temp$offset = offset + 2, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileHelp;
                }
                else {
                    return { f: col, H: indent, e: offset, n: row, g: src };
                }
            }
        }
    }, $author$project$ParserFast$skipWhileHelp = F6($author$project$ParserFast$skipWhileHelp_fn);
    var $author$project$ParserFast$anyCharFollowedByWhileMap_fn = function (consumedStringToRes, afterFirstIsOkay) {
        return function (s) {
            var firstOffset = $author$project$ParserFast$charOrEnd_fn(s.e, s.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = firstOffset === -2 ? $author$project$ParserFast$skipWhileHelp_fn(afterFirstIsOkay, s.e + 1, s.n + 1, 1, s.g, s.H) : $author$project$ParserFast$skipWhileHelp_fn(afterFirstIsOkay, firstOffset, s.n, s.f + 1, s.g, s.H);
                return $author$project$ParserFast$Good_fn(consumedStringToRes(_String_slice_fn(s.e, s1.e, s.g)), s1);
            }
        };
    }, $author$project$ParserFast$anyCharFollowedByWhileMap = F2($author$project$ParserFast$anyCharFollowedByWhileMap_fn);
    var $elm$core$String$cons = _String_cons;
    var $author$project$ParserFast$loopHelp_fn = function (committedSoFar, state, element, reduce, s0) {
        loopHelp: while (true) {
            var parseElement = element;
            var _v0 = parseElement(s0);
            if (!_v0.$) {
                var step = _v0.a;
                var s1 = _v0.b;
                var _v1 = A2(reduce, step, state);
                if (!_v1.$) {
                    var newState = _v1.a;
                    var $temp$committedSoFar = true, $temp$state = newState, $temp$element = element, $temp$reduce = reduce, $temp$s0 = s1;
                    committedSoFar = $temp$committedSoFar;
                    state = $temp$state;
                    element = $temp$element;
                    reduce = $temp$reduce;
                    s0 = $temp$s0;
                    continue loopHelp;
                }
                else {
                    var result = _v1.a;
                    return $author$project$ParserFast$Good_fn(result, s1);
                }
            }
            else {
                var elementCommitted = _v0.a;
                var x = _v0.b;
                return $author$project$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
            }
        }
    }, $author$project$ParserFast$loopHelp_fn_unwrapped = function (committedSoFar, state, element, reduce, s0) {
        loopHelp: while (true) {
            var parseElement = element;
            var _v0 = parseElement(s0);
            if (!_v0.$) {
                var step = _v0.a;
                var s1 = _v0.b;
                var _v1 = reduce(step, state);
                if (!_v1.$) {
                    var newState = _v1.a;
                    var $temp$committedSoFar = true, $temp$state = newState, $temp$element = element, $temp$reduce = reduce, $temp$s0 = s1;
                    committedSoFar = $temp$committedSoFar;
                    state = $temp$state;
                    element = $temp$element;
                    reduce = $temp$reduce;
                    s0 = $temp$s0;
                    continue loopHelp;
                }
                else {
                    var result = _v1.a;
                    return $author$project$ParserFast$Good_fn(result, s1);
                }
            }
            else {
                var elementCommitted = _v0.a;
                var x = _v0.b;
                return $author$project$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
            }
        }
    }, $author$project$ParserFast$loopHelp = F5($author$project$ParserFast$loopHelp_fn);
    var $author$project$ParserFast$loop_fn = function (state, element, reduce) {
        return function (s) {
            return $author$project$ParserFast$loopHelp_fn(false, state, element, reduce, s);
        };
    }, $author$project$ParserFast$loop = F3($author$project$ParserFast$loop_fn);
    var $author$project$ParserFast$map2WithRange_fn = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(A3(func, {
                        c: { o: s2.f, n: s2.n },
                        d: { o: s0.f, n: s0.n }
                    }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithRange_fn_unwrapped = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(func({
                        c: { o: s2.f, n: s2.n },
                        d: { o: s0.f, n: s0.n }
                    }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithRange = F3($author$project$ParserFast$map2WithRange_fn);
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $elm$core$Basics$not = _Basics_not;
    var $author$project$ParserFast$oneOf2_fn = function (_v0, _v1) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        return function (s) {
            var _v2 = attemptFirst(s);
            if (!_v2.$) {
                var firstGood = _v2;
                return firstGood;
            }
            else {
                var firstBad = _v2;
                var firstCommitted = firstBad.a;
                if (firstCommitted) {
                    return firstBad;
                }
                else {
                    var _v3 = attemptSecond(s);
                    if (!_v3.$) {
                        var secondGood = _v3;
                        return secondGood;
                    }
                    else {
                        var secondBad = _v3;
                        var secondCommitted = secondBad.a;
                        return secondCommitted ? secondBad : $author$project$ParserFast$pStepBadBacktracking;
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf2 = F2($author$project$ParserFast$oneOf2_fn);
    var $author$project$ParserFast$oneOf3_fn = function (_v0, _v1, _v2) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        var attemptThird = _v2;
        return function (s) {
            var _v3 = attemptFirst(s);
            if (!_v3.$) {
                var firstGood = _v3;
                return firstGood;
            }
            else {
                var firstBad = _v3;
                var firstCommitted = firstBad.a;
                if (firstCommitted) {
                    return firstBad;
                }
                else {
                    var _v4 = attemptSecond(s);
                    if (!_v4.$) {
                        var secondGood = _v4;
                        return secondGood;
                    }
                    else {
                        var secondBad = _v4;
                        var secondCommitted = secondBad.a;
                        if (secondCommitted) {
                            return secondBad;
                        }
                        else {
                            var _v5 = attemptThird(s);
                            if (!_v5.$) {
                                var thirdGood = _v5;
                                return thirdGood;
                            }
                            else {
                                var thirdBad = _v5;
                                var thirdCommitted = thirdBad.a;
                                return thirdCommitted ? thirdBad : $author$project$ParserFast$pStepBadBacktracking;
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf3 = F3($author$project$ParserFast$oneOf3_fn);
    var $elm$core$String$length = _String_length;
    var $author$project$ParserFast$symbol_fn = function (str, res) {
        var strLength = $elm$core$String$length(str);
        return function (s) {
            var newOffset = s.e + strLength;
            return _Utils_eq(_String_slice_fn(s.e, newOffset, s.g), str) ? $author$project$ParserFast$Good_fn(res, { f: s.f + strLength, H: s.H, e: newOffset, n: s.n, g: s.g }) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$symbol = F2($author$project$ParserFast$symbol_fn);
    var $author$project$ParserFast$pStepCommit = function (pStep) {
        if (!pStep.$) {
            var good = pStep;
            return good;
        }
        else {
            var x = pStep.b;
            return $author$project$ParserFast$Bad_fn(true, x);
        }
    };
    var $author$project$ParserFast$symbolFollowedBy_fn = function (str, _v0) {
        var parseNext = _v0;
        var strLength = $elm$core$String$length(str);
        return function (s) {
            var newOffset = s.e + strLength;
            return _Utils_eq(_String_slice_fn(s.e, newOffset, s.g), str) ? $author$project$ParserFast$pStepCommit(parseNext({ f: s.f + strLength, H: s.H, e: newOffset, n: s.n, g: s.g })) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$symbolFollowedBy = F2($author$project$ParserFast$symbolFollowedBy_fn);
    var $author$project$ParserFast$while = function (isGood) {
        return function (s0) {
            var s1 = $author$project$ParserFast$skipWhileHelp_fn(isGood, s0.e, s0.n, s0.f, s0.g, s0.H);
            return $author$project$ParserFast$Good_fn(_String_slice_fn(s0.e, s1.e, s0.g), s1);
        };
    };
    var $author$project$ParserFast$nestableMultiCommentMapWithRange_fn = function (rangeContentToRes, _v0, _v1) {
        var openChar = _v0.a;
        var openTail = _v0.b;
        var closeChar = _v1.a;
        var closeTail = _v1.b;
        var open = _String_cons_fn(openChar, openTail);
        var isNotRelevant = function (_char) {
            return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$author$project$Char$Extra$isUtf16Surrogate(_char)));
        };
        var close = _String_cons_fn(closeChar, closeTail);
        return $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, afterOpen, contentAfterAfterOpen) {
            return A2(rangeContentToRes, range, open + (afterOpen + (contentAfterAfterOpen + (close + ""))));
        }, $author$project$ParserFast$symbolFollowedBy_fn(open, $author$project$ParserFast$while(isNotRelevant)), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(close, ""), $author$project$ParserFast$loop_fn(_Utils_Tuple2("", 1), $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$symbol_fn(close, _Utils_Tuple2(close, -1)), $author$project$ParserFast$symbol_fn(open, _Utils_Tuple2(open, 1)), $author$project$ParserFast$anyCharFollowedByWhileMap_fn(function (consumed) {
            return _Utils_Tuple2(consumed, 0);
        }, isNotRelevant)), F2(function (_v2, _v3) {
            var toAppend = _v2.a;
            var nestingChange = _v2.b;
            var soFarContent = _v3.a;
            var soFarNesting = _v3.b;
            var newNesting = soFarNesting + nestingChange;
            return (!newNesting) ? $author$project$ParserFast$Done(soFarContent) : $author$project$ParserFast$Loop(_Utils_Tuple2(soFarContent + (toAppend + ""), newNesting));
        }))));
    }, $author$project$ParserFast$nestableMultiCommentMapWithRange_fn_unwrapped = function (rangeContentToRes, _v0, _v1) {
        var openChar = _v0.a;
        var openTail = _v0.b;
        var closeChar = _v1.a;
        var closeTail = _v1.b;
        var open = _String_cons_fn(openChar, openTail);
        var isNotRelevant = function (_char) {
            return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$author$project$Char$Extra$isUtf16Surrogate(_char)));
        };
        var close = _String_cons_fn(closeChar, closeTail);
        return $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, afterOpen, contentAfterAfterOpen) {
            return rangeContentToRes(range, open + (afterOpen + (contentAfterAfterOpen + (close + ""))));
        }, $author$project$ParserFast$symbolFollowedBy_fn(open, $author$project$ParserFast$while(isNotRelevant)), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(close, ""), $author$project$ParserFast$loop_fn(_Utils_Tuple2("", 1), $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$symbol_fn(close, _Utils_Tuple2(close, -1)), $author$project$ParserFast$symbol_fn(open, _Utils_Tuple2(open, 1)), $author$project$ParserFast$anyCharFollowedByWhileMap_fn(function (consumed) {
            return _Utils_Tuple2(consumed, 0);
        }, isNotRelevant)), F2(function (_v2, _v3) {
            var toAppend = _v2.a;
            var nestingChange = _v2.b;
            var soFarContent = _v3.a;
            var soFarNesting = _v3.b;
            var newNesting = soFarNesting + nestingChange;
            return (!newNesting) ? $author$project$ParserFast$Done(soFarContent) : $author$project$ParserFast$Loop(_Utils_Tuple2(soFarContent + (toAppend + ""), newNesting));
        }))));
    }, $author$project$ParserFast$nestableMultiCommentMapWithRange = F3($author$project$ParserFast$nestableMultiCommentMapWithRange_fn);
    var $author$project$GrenParserLenient$documentationComment = $author$project$ParserFast$nestableMultiCommentMapWithRange_fn($author$project$GrenSyntax$Node, _Utils_Tuple2("{", "-"), _Utils_Tuple2("-", "}"));
    var $author$project$GrenParserLenient$FunctionDeclarationAfterDocumentation = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$Application = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenSyntax$CaseExpression = function (a) {
        return { $: 16, a: a };
    };
    var $author$project$GrenParserLenient$ExtendRightByOperation = $elm$core$Basics$identity;
    var $author$project$GrenParserLenient$FieldsFirstValue = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenParserLenient$FieldsFirstValuePunned = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GrenSyntax$FunctionOrValue_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $author$project$GrenSyntax$FunctionOrValue = F2($author$project$GrenSyntax$FunctionOrValue_fn);
    var $author$project$GrenSyntax$IfBlock_fn = function (a, b, c) {
        return { $: 4, a: a, b: b, c: c };
    }, $author$project$GrenSyntax$IfBlock = F3($author$project$GrenSyntax$IfBlock_fn);
    var $author$project$GrenSyntax$LambdaExpression = function (a) {
        return { $: 17, a: a };
    };
    var $author$project$GrenSyntax$Left = 0;
    var $author$project$GrenSyntax$LetDestructuring_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$GrenSyntax$LetDestructuring = F2($author$project$GrenSyntax$LetDestructuring_fn);
    var $author$project$GrenSyntax$LetExpression = function (a) {
        return { $: 15, a: a };
    };
    var $author$project$GrenSyntax$LetFunction = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$ListExpr = function (a) {
        return { $: 19, a: a };
    };
    var $author$project$GrenSyntax$Negation = function (a) {
        return { $: 10, a: a };
    };
    var $author$project$GrenSyntax$Non = 2;
    var $author$project$GrenSyntax$ParenthesizedExpression = function (a) {
        return { $: 14, a: a };
    };
    var $author$project$GrenSyntax$RecordExpr = function (a) {
        return { $: 18, a: a };
    };
    var $author$project$GrenSyntax$RecordUpdateExpression_fn = function (a, b) {
        return { $: 22, a: a, b: b };
    }, $author$project$GrenSyntax$RecordUpdateExpression = F2($author$project$GrenSyntax$RecordUpdateExpression_fn);
    var $author$project$GrenParserLenient$RecordUpdateFirstSetter = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$Right = 1;
    var $author$project$GrenSyntax$TupledExpression = function (a) {
        return { $: 13, a: a };
    };
    var $author$project$GrenParserLenient$TupledParenthesized_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$GrenParserLenient$TupledParenthesized = F2($author$project$GrenParserLenient$TupledParenthesized_fn);
    var $author$project$GrenParserLenient$TupledTwoOrThree_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$GrenParserLenient$TupledTwoOrThree = F2($author$project$GrenParserLenient$TupledTwoOrThree_fn);
    var $author$project$GrenSyntax$UnitExpr = { $: 0 };
    var $author$project$GrenSyntax$PrefixOperator = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GrenParserLenient$isAllowedOperatorToken = function (operatorCandidateToValidate) {
        switch (operatorCandidateToValidate) {
            case "==":
                return true;
            case "/=":
                return true;
            case "::":
                return true;
            case "++":
                return true;
            case "+":
                return true;
            case "*":
                return true;
            case "<|":
                return true;
            case "|>":
                return true;
            case "||":
                return true;
            case "<=":
                return true;
            case ">=":
                return true;
            case "|=":
                return true;
            case "|.":
                return true;
            case "//":
                return true;
            case "</>":
                return true;
            case "<?>":
                return true;
            case "^":
                return true;
            case "<<":
                return true;
            case ">>":
                return true;
            case "<":
                return true;
            case ">":
                return true;
            case "/":
                return true;
            case "&&":
                return true;
            case "-":
                return true;
            default:
                return false;
        }
    };
    var $author$project$GrenParserLenient$isOperatorSymbolCharAsString = function (c) {
        switch (c) {
            case "|":
                return true;
            case "+":
                return true;
            case "<":
                return true;
            case ">":
                return true;
            case "=":
                return true;
            case "*":
                return true;
            case ":":
                return true;
            case "-":
                return true;
            case "/":
                return true;
            case "&":
                return true;
            case ".":
                return true;
            case "?":
                return true;
            case "^":
                return true;
            case "!":
                return true;
            default:
                return false;
        }
    };
    var $author$project$GrenParserLenient$ropeEmpty = $elm$core$Maybe$Nothing;
    var $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn = function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
        var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
        return function (s0) {
            var src = s0.g;
            var s0Offset = s0.e;
            var _v0 = whileCharIsOkay(_String_slice_fn(s0Offset, s0Offset + 1, src)) ? (whileCharIsOkay(_String_slice_fn(s0Offset + 1, s0Offset + 2, src)) ? (whileCharIsOkay(_String_slice_fn(s0Offset + 2, s0Offset + 3, src)) ? _Utils_Tuple2(3, _String_slice_fn(s0Offset, s0Offset + 3, src)) : _Utils_Tuple2(2, _String_slice_fn(s0Offset, s0Offset + 2, src))) : _Utils_Tuple2(1, _String_slice_fn(s0Offset, s0Offset + 1, src))) : _Utils_Tuple2(0, "");
            var consumedBeforeFinalSymbolLength = _v0.a;
            var consumedBeforeFinalSymbolString = _v0.b;
            return (_Utils_eq(_String_slice_fn(s0Offset + consumedBeforeFinalSymbolLength, (s0Offset + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, src), mandatoryFinalSymbol) && whileResultIsOkay(consumedBeforeFinalSymbolString)) ? $author$project$ParserFast$Good_fn(A2(whileRangeAndContentToRes, {
                c: { o: s0.f + consumedBeforeFinalSymbolLength, n: s0.n },
                d: { o: s0.f, n: s0.n }
            }, consumedBeforeFinalSymbolString), { f: (s0.f + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, H: s0.H, e: (s0Offset + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, n: s0.n, g: src }) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped = function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
        var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
        return function (s0) {
            var src = s0.g;
            var s0Offset = s0.e;
            var _v0 = whileCharIsOkay(_String_slice_fn(s0Offset, s0Offset + 1, src)) ? (whileCharIsOkay(_String_slice_fn(s0Offset + 1, s0Offset + 2, src)) ? (whileCharIsOkay(_String_slice_fn(s0Offset + 2, s0Offset + 3, src)) ? _Utils_Tuple2(3, _String_slice_fn(s0Offset, s0Offset + 3, src)) : _Utils_Tuple2(2, _String_slice_fn(s0Offset, s0Offset + 2, src))) : _Utils_Tuple2(1, _String_slice_fn(s0Offset, s0Offset + 1, src))) : _Utils_Tuple2(0, "");
            var consumedBeforeFinalSymbolLength = _v0.a;
            var consumedBeforeFinalSymbolString = _v0.b;
            return (_Utils_eq(_String_slice_fn(s0Offset + consumedBeforeFinalSymbolLength, (s0Offset + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, src), mandatoryFinalSymbol) && whileResultIsOkay(consumedBeforeFinalSymbolString)) ? $author$project$ParserFast$Good_fn(whileRangeAndContentToRes({
                c: { o: s0.f + consumedBeforeFinalSymbolLength, n: s0.n },
                d: { o: s0.f, n: s0.n }
            }, consumedBeforeFinalSymbolString), { f: (s0.f + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, H: s0.H, e: (s0Offset + consumedBeforeFinalSymbolLength) + mandatoryFinalSymbolLength, n: s0.n, g: src }) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol = F4($author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn);
    var $author$project$GrenParserLenient$allowedPrefixOperatorFollowedByClosingParensOneOf = $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped(function (operatorRange, operator) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn({
                c: { o: operatorRange.c.o + 1, n: operatorRange.c.n },
                d: { o: operatorRange.d.o - 1, n: operatorRange.d.n }
            }, $author$project$GrenSyntax$PrefixOperator(operator))
        };
    }, $author$project$GrenParserLenient$isOperatorSymbolCharAsString, $author$project$GrenParserLenient$isAllowedOperatorToken, ")");
    var $author$project$GrenSyntax$OperatorApplication_fn = function (a, b, c) {
        return { $: 2, a: a, b: b, c: c };
    }, $author$project$GrenSyntax$OperatorApplication = F3($author$project$GrenSyntax$OperatorApplication_fn);
    var $author$project$GrenParserLenient$applyExtensionRight_fn = function (_v0, leftNode) {
        var operation = _v0;
        var _v1 = operation.I;
        var rightExpressionRange = _v1.a;
        var _v2 = leftNode;
        var leftRange = _v2.a;
        return $author$project$GrenSyntax$Node_fn({ c: rightExpressionRange.c, d: leftRange.d }, $author$project$GrenSyntax$OperatorApplication_fn(operation.aB, leftNode, operation.I));
    }, $author$project$GrenParserLenient$applyExtensionRight = F2($author$project$GrenParserLenient$applyExtensionRight_fn);
    var $author$project$GrenSyntax$CharLiteral = function (a) {
        return { $: 12, a: a };
    };
    var $elm$core$String$foldr = _String_foldr;
    var $elm$core$String$toList = function (string) {
        return _String_foldr_fn($elm$core$List$cons, _List_Nil, string);
    };
    var $author$project$ParserFast$anyChar = function (s) {
        var newOffset = $author$project$ParserFast$charOrEnd_fn(s.e, s.g);
        if (newOffset === -1) {
            return $author$project$ParserFast$pStepBadBacktracking;
        }
        else {
            if (newOffset === -2) {
                return $author$project$ParserFast$Good_fn("\n", { f: 1, H: s.H, e: s.e + 1, n: s.n + 1, g: s.g });
            }
            else {
                var _v0 = $elm$core$String$toList(_String_slice_fn(s.e, newOffset, s.g));
                if (!_v0.b) {
                    return $author$project$ParserFast$pStepBadBacktracking;
                }
                else {
                    var c = _v0.a;
                    return $author$project$ParserFast$Good_fn(c, { f: s.f + 1, H: s.H, e: newOffset, n: s.n, g: s.g });
                }
            }
        }
    };
    var $author$project$ParserFast$pStepBadCommitting = $author$project$ParserFast$Bad_fn(true, 0);
    var $author$project$ParserFast$followedBySymbol_fn = function (str, _v0) {
        var parsePrevious = _v0;
        var strLength = $elm$core$String$length(str);
        return function (s0) {
            var _v1 = parsePrevious(s0);
            if (!_v1.$) {
                var res = _v1.a;
                var s1 = _v1.b;
                var newOffset = s1.e + strLength;
                return _Utils_eq(_String_slice_fn(s1.e, newOffset, s1.g), str) ? $author$project$ParserFast$Good_fn(res, { f: s1.f + strLength, H: s1.H, e: newOffset, n: s1.n, g: s1.g }) : $author$project$ParserFast$pStepBadCommitting;
            }
            else {
                var bad = _v1;
                return bad;
            }
        };
    }, $author$project$ParserFast$followedBySymbol = F2($author$project$ParserFast$followedBySymbol_fn);
    var $elm$core$Char$fromCode = _Char_fromCode;
    var $author$project$GrenParserLenient$charToHex = function (c) {
        switch (c) {
            case "0":
                return 0;
            case "1":
                return 1;
            case "2":
                return 2;
            case "3":
                return 3;
            case "4":
                return 4;
            case "5":
                return 5;
            case "6":
                return 6;
            case "7":
                return 7;
            case "8":
                return 8;
            case "9":
                return 9;
            case "a":
                return 10;
            case "b":
                return 11;
            case "c":
                return 12;
            case "d":
                return 13;
            case "e":
                return 14;
            case "f":
                return 15;
            case "A":
                return 10;
            case "B":
                return 11;
            case "C":
                return 12;
            case "D":
                return 13;
            case "E":
                return 14;
            default:
                return 15;
        }
    };
    var $elm$core$Basics$pow = _Basics_pow;
    var $author$project$GrenParserLenient$hexStringToInt = function (string) {
        return _String_foldr_fn_unwrapped(function (c, soFar) {
            return {
                b5: soFar.b5 + 1,
                co: soFar.co + (_Basics_pow_fn(16, soFar.b5) * $author$project$GrenParserLenient$charToHex(c))
            };
        }, { b5: 0, co: 0 }, string).co;
    };
    var $author$project$ParserFast$isSubCharWithoutLinebreak_fn = function (predicate, offset, string) {
        var actualChar = _String_slice_fn(offset, offset + 1, string);
        return _String_any_fn(predicate, actualChar) ? (offset + 1) : (($author$project$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(predicate, _String_slice_fn(offset, offset + 2, string))) ? (offset + 2) : (-1));
    }, $author$project$ParserFast$isSubCharWithoutLinebreak = F3($author$project$ParserFast$isSubCharWithoutLinebreak_fn);
    var $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn = function (isGood, offset, row, col, src, indent) {
        skipWhileWithoutLinebreakHelp: while (true) {
            var actualChar = _String_slice_fn(offset, offset + 1, src);
            if (_String_any_fn(isGood, actualChar)) {
                var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileWithoutLinebreakHelp;
            }
            else {
                if ($author$project$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(isGood, _String_slice_fn(offset, offset + 2, src))) {
                    var $temp$isGood = isGood, $temp$offset = offset + 2, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileWithoutLinebreakHelp;
                }
                else {
                    return { f: col, H: indent, e: offset, n: row, g: src };
                }
            }
        }
    }, $author$project$ParserFast$skipWhileWithoutLinebreakHelp = F6($author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn);
    var $author$project$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn = function (consumedStringToRes, firstIsOkay, afterFirstIsOkay) {
        return function (s0) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.e, s0.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.n, s0.f + 1, s0.g, s0.H);
                return $author$project$ParserFast$Good_fn(consumedStringToRes(_String_slice_fn(s0.e, s1.e, s0.g)), s1);
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileMapWithoutLinebreak = F3($author$project$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn);
    var $elm$core$Char$isHexDigit = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
    };
    var $author$project$ParserFast$oneOf7_fn = function (_v0, _v1, _v2, _v3, _v4, _v5, _v6) {
        var attempt0 = _v0;
        var attempt1 = _v1;
        var attempt2 = _v2;
        var attempt3 = _v3;
        var attempt4 = _v4;
        var attempt5 = _v5;
        var attempt6 = _v6;
        return function (s) {
            var _v7 = attempt0(s);
            if (!_v7.$) {
                var good = _v7;
                return good;
            }
            else {
                var bad0 = _v7;
                var committed0 = bad0.a;
                if (committed0) {
                    return bad0;
                }
                else {
                    var _v8 = attempt1(s);
                    if (!_v8.$) {
                        var good = _v8;
                        return good;
                    }
                    else {
                        var bad1 = _v8;
                        var committed1 = bad1.a;
                        if (committed1) {
                            return bad1;
                        }
                        else {
                            var _v9 = attempt2(s);
                            if (!_v9.$) {
                                var good = _v9;
                                return good;
                            }
                            else {
                                var bad2 = _v9;
                                var committed2 = bad2.a;
                                if (committed2) {
                                    return bad2;
                                }
                                else {
                                    var _v10 = attempt3(s);
                                    if (!_v10.$) {
                                        var good = _v10;
                                        return good;
                                    }
                                    else {
                                        var bad3 = _v10;
                                        var committed3 = bad3.a;
                                        if (committed3) {
                                            return bad3;
                                        }
                                        else {
                                            var _v11 = attempt4(s);
                                            if (!_v11.$) {
                                                var good = _v11;
                                                return good;
                                            }
                                            else {
                                                var bad4 = _v11;
                                                var committed4 = bad4.a;
                                                if (committed4) {
                                                    return bad4;
                                                }
                                                else {
                                                    var _v12 = attempt5(s);
                                                    if (!_v12.$) {
                                                        var good = _v12;
                                                        return good;
                                                    }
                                                    else {
                                                        var bad5 = _v12;
                                                        var committed5 = bad5.a;
                                                        if (committed5) {
                                                            return bad5;
                                                        }
                                                        else {
                                                            var _v13 = attempt6(s);
                                                            if (!_v13.$) {
                                                                var good = _v13;
                                                                return good;
                                                            }
                                                            else {
                                                                var bad6 = _v13;
                                                                var committed6 = bad6.a;
                                                                return committed6 ? bad6 : $author$project$ParserFast$pStepBadBacktracking;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf7 = F7($author$project$ParserFast$oneOf7_fn);
    var $author$project$GrenParserLenient$escapedCharValueMap = function (charToRes) {
        return $author$project$ParserFast$oneOf7_fn($author$project$ParserFast$symbol_fn("'", charToRes("'")), $author$project$ParserFast$symbol_fn("\"", charToRes("\"")), $author$project$ParserFast$symbol_fn("n", charToRes("\n")), $author$project$ParserFast$symbol_fn("t", charToRes("\t")), $author$project$ParserFast$symbol_fn("r", charToRes("\r")), $author$project$ParserFast$symbol_fn("\\", charToRes("\\")), $author$project$ParserFast$symbolFollowedBy_fn("u{", $author$project$ParserFast$followedBySymbol_fn("}", $author$project$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn(function (hex) {
            return charToRes($elm$core$Char$fromCode($author$project$GrenParserLenient$hexStringToInt(hex)));
        }, $elm$core$Char$isHexDigit, $elm$core$Char$isHexDigit))));
    };
    var $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn = function (firstToChoice, _v0, secondToChoice, _v1) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        return function (s) {
            var _v2 = attemptFirst(s);
            if (!_v2.$) {
                var first = _v2.a;
                var s1 = _v2.b;
                return $author$project$ParserFast$Good_fn(A5(firstToChoice, s.n, s.f, first, s1.n, s1.f), s1);
            }
            else {
                var firstCommitted = _v2.a;
                var firstX = _v2.b;
                if (firstCommitted) {
                    return $author$project$ParserFast$Bad_fn(firstCommitted, firstX);
                }
                else {
                    var _v3 = attemptSecond(s);
                    if (!_v3.$) {
                        var second = _v3.a;
                        var s1 = _v3.b;
                        return $author$project$ParserFast$Good_fn(A5(secondToChoice, s.n, s.f, second, s1.n, s1.f), s1);
                    }
                    else {
                        var secondCommitted = _v3.a;
                        var secondX = _v3.b;
                        return secondCommitted ? $author$project$ParserFast$Bad_fn(secondCommitted, secondX) : $author$project$ParserFast$pStepBadBacktracking;
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn = F4($author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn);
    var $author$project$GrenParserLenient$characterLiteralMapWithRange = function (rangeAndCharToRes) {
        return $author$project$ParserFast$symbolFollowedBy_fn("'", $author$project$ParserFast$followedBySymbol_fn("'", $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, _char, endRow, endColumn) {
            return A2(rangeAndCharToRes, {
                c: { o: endColumn + 1, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, _char);
        }), $author$project$ParserFast$symbolFollowedBy_fn("\\", $author$project$GrenParserLenient$escapedCharValueMap($elm$core$Basics$identity)), F5(function (startRow, startColumn, _char, endRow, endColumn) {
            return A2(rangeAndCharToRes, {
                c: { o: endColumn + 1, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, _char);
        }), $author$project$ParserFast$anyChar)));
    }, $author$project$GrenParserLenient$characterLiteralMapWithRange_unwrapped = function (rangeAndCharToRes) {
        return $author$project$ParserFast$symbolFollowedBy_fn("'", $author$project$ParserFast$followedBySymbol_fn("'", $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, _char, endRow, endColumn) {
            return rangeAndCharToRes({
                c: { o: endColumn + 1, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, _char);
        }), $author$project$ParserFast$symbolFollowedBy_fn("\\", $author$project$GrenParserLenient$escapedCharValueMap($elm$core$Basics$identity)), F5(function (startRow, startColumn, _char, endRow, endColumn) {
            return rangeAndCharToRes({
                c: { o: endColumn + 1, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, _char);
        }), $author$project$ParserFast$anyChar)));
    };
    var $author$project$GrenParserLenient$expressionChar = $author$project$GrenParserLenient$characterLiteralMapWithRange_unwrapped(function (range, _char) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$CharLiteral(_char))
        };
    });
    var $author$project$ParserFast$map2_fn = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(A2(func, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2_fn_unwrapped = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(func(a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2 = F3($author$project$ParserFast$map2_fn);
    var $author$project$GrenParserLenient$RopeBranch2_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$GrenParserLenient$RopeBranch2 = F2($author$project$GrenParserLenient$RopeBranch2_fn);
    var $author$project$GrenParserLenient$ropePrependTo_fn = function (right, left) {
        if (left.$ === 1) {
            return right;
        }
        else {
            var leftLikelyFilled = left.a;
            if (right.$ === 1) {
                return left;
            }
            else {
                var rightLikelyFilled = right.a;
                return $elm$core$Maybe$Just($author$project$GrenParserLenient$RopeBranch2_fn(leftLikelyFilled, rightLikelyFilled));
            }
        }
    }, $author$project$GrenParserLenient$ropePrependTo = F2($author$project$GrenParserLenient$ropePrependTo_fn);
    var $author$project$ParserFast$skipWhileWhitespaceHelp_fn = function (offset, row, col, src, indent) {
        skipWhileWhitespaceHelp: while (true) {
            var _v0 = _String_slice_fn(offset, offset + 1, src);
            switch (_v0) {
                case " ":
                    var $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileWhitespaceHelp;
                case "\n":
                    var $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileWhitespaceHelp;
                case "\r":
                    var $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    continue skipWhileWhitespaceHelp;
                default:
                    return { f: col, H: indent, e: offset, n: row, g: src };
            }
        }
    }, $author$project$ParserFast$skipWhileWhitespaceHelp = F5($author$project$ParserFast$skipWhileWhitespaceHelp_fn);
    var $author$project$ParserFast$followedBySkipWhileWhitespace = function (_v0) {
        var parseBefore = _v0;
        return function (s0) {
            var _v1 = parseBefore(s0);
            if (!_v1.$) {
                var res = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(res, $author$project$ParserFast$skipWhileWhitespaceHelp_fn(s1.e, s1.n, s1.f, s1.g, s1.H));
            }
            else {
                var bad = _v1;
                return bad;
            }
        };
    };
    var $author$project$ParserFast$map2OrSucceed_fn = function (func, _v0, _v1, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var c1 = _v2.a;
                var x = _v2.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(A2(func, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2OrSucceed_fn_unwrapped = function (func, _v0, _v1, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var c1 = _v2.a;
                var x = _v2.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(func(a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2OrSucceed = F4($author$project$ParserFast$map2OrSucceed_fn);
    var $author$project$GrenParserLenient$multiLineCommentNoCheck = $author$project$ParserFast$nestableMultiCommentMapWithRange_fn($author$project$GrenSyntax$Node, _Utils_Tuple2("{", "-"), _Utils_Tuple2("-", "}"));
    var $author$project$ParserFast$offsetSourceAndThen = function (callback) {
        return function (s) {
            var _v0 = A2(callback, s.e, s.g);
            var parse = _v0;
            return parse(s);
        };
    }, $author$project$ParserFast$offsetSourceAndThen_unwrapped = function (callback) {
        return function (s) {
            var _v0 = callback(s.e, s.g);
            var parse = _v0;
            return parse(s);
        };
    };
    var $author$project$ParserFast$problem = function (_v0) {
        return $author$project$ParserFast$pStepBadBacktracking;
    };
    var $author$project$GrenParserLenient$multiLineComment = $author$project$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
        var _v0 = _String_slice_fn(offset + 2, offset + 3, source);
        if (_v0 === "|") {
            return $author$project$ParserFast$problem;
        }
        else {
            return $author$project$GrenParserLenient$multiLineCommentNoCheck;
        }
    });
    var $author$project$GrenParserLenient$ropeFilledPrependTo_fn = function (right, leftLikelyFilled) {
        return $elm$core$Maybe$Just(function () {
            if (right.$ === 1) {
                return leftLikelyFilled;
            }
            else {
                var rightLikelyFilled = right.a;
                return $author$project$GrenParserLenient$RopeBranch2_fn(leftLikelyFilled, rightLikelyFilled);
            }
        }());
    }, $author$project$GrenParserLenient$ropeFilledPrependTo = F2($author$project$GrenParserLenient$ropeFilledPrependTo_fn);
    var $author$project$GrenParserLenient$RopeLeaf_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$GrenParserLenient$RopeLeaf = F2($author$project$GrenParserLenient$RopeLeaf_fn);
    var $author$project$GrenParserLenient$ropeOne = function (onlyElement) {
        return $author$project$GrenParserLenient$RopeLeaf_fn(onlyElement, 0);
    };
    var $author$project$ParserFast$loopWhileSucceedsHelp_fn = function (element, soFar, reduce, foldedToRes, s0) {
        loopWhileSucceedsHelp: while (true) {
            var parseElement = element;
            var _v0 = parseElement(s0);
            if (!_v0.$) {
                var elementResult = _v0.a;
                var s1 = _v0.b;
                var $temp$element = element, $temp$soFar = A2(reduce, elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                element = $temp$element;
                soFar = $temp$soFar;
                reduce = $temp$reduce;
                foldedToRes = $temp$foldedToRes;
                s0 = $temp$s0;
                continue loopWhileSucceedsHelp;
            }
            else {
                var elementCommitted = _v0.a;
                var x = _v0.b;
                return elementCommitted ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(foldedToRes(soFar), s0);
            }
        }
    }, $author$project$ParserFast$loopWhileSucceedsHelp_fn_unwrapped = function (element, soFar, reduce, foldedToRes, s0) {
        loopWhileSucceedsHelp: while (true) {
            var parseElement = element;
            var _v0 = parseElement(s0);
            if (!_v0.$) {
                var elementResult = _v0.a;
                var s1 = _v0.b;
                var $temp$element = element, $temp$soFar = reduce(elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                element = $temp$element;
                soFar = $temp$soFar;
                reduce = $temp$reduce;
                foldedToRes = $temp$foldedToRes;
                s0 = $temp$s0;
                continue loopWhileSucceedsHelp;
            }
            else {
                var elementCommitted = _v0.a;
                var x = _v0.b;
                return elementCommitted ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(foldedToRes(soFar), s0);
            }
        }
    }, $author$project$ParserFast$loopWhileSucceedsHelp = F5($author$project$ParserFast$loopWhileSucceedsHelp_fn);
    var $author$project$ParserFast$loopWhileSucceeds_fn = function (element, initialFolded, reduce, foldedToRes) {
        return function (s) {
            return $author$project$ParserFast$loopWhileSucceedsHelp_fn(element, initialFolded, reduce, foldedToRes, s);
        };
    }, $author$project$ParserFast$loopWhileSucceeds = F4($author$project$ParserFast$loopWhileSucceeds_fn);
    var $author$project$GrenParserLenient$ropePrependToFilled_fn = function (rightLikelyFilled, left) {
        return $elm$core$Maybe$Just(function () {
            if (left.$ === 1) {
                return rightLikelyFilled;
            }
            else {
                var leftLikelyFilled = left.a;
                return $author$project$GrenParserLenient$RopeBranch2_fn(leftLikelyFilled, rightLikelyFilled);
            }
        }());
    }, $author$project$GrenParserLenient$ropePrependToFilled = F2($author$project$GrenParserLenient$ropePrependToFilled_fn);
    var $author$project$ParserFast$whileMapWithRange_fn = function (isGood, rangeAndConsumedStringToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$skipWhileHelp_fn(isGood, s0.e, s0.n, s0.f, s0.g, s0.H);
            return $author$project$ParserFast$Good_fn(A2(rangeAndConsumedStringToRes, {
                c: { o: s1.f, n: s1.n },
                d: { o: s0.f, n: s0.n }
            }, _String_slice_fn(s0.e, s1.e, s0.g)), s1);
        };
    }, $author$project$ParserFast$whileMapWithRange_fn_unwrapped = function (isGood, rangeAndConsumedStringToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$skipWhileHelp_fn(isGood, s0.e, s0.n, s0.f, s0.g, s0.H);
            return $author$project$ParserFast$Good_fn(rangeAndConsumedStringToRes({
                c: { o: s1.f, n: s1.n },
                d: { o: s0.f, n: s0.n }
            }, _String_slice_fn(s0.e, s1.e, s0.g)), s1);
        };
    }, $author$project$ParserFast$whileMapWithRange = F2($author$project$ParserFast$whileMapWithRange_fn);
    var $author$project$GrenParserLenient$singleLineComment = $author$project$ParserFast$symbolFollowedBy_fn("--", $author$project$ParserFast$whileMapWithRange_fn_unwrapped(function (c) {
        switch (c) {
            case "\r":
                return false;
            case "\n":
                return false;
            default:
                return !$author$project$Char$Extra$isUtf16Surrogate(c);
        }
    }, function (range, content) {
        return $author$project$GrenSyntax$Node_fn({
            c: { o: range.c.o, n: range.d.n },
            d: { o: range.d.o - 2, n: range.d.n }
        }, "--" + content);
    }));
    var $author$project$GrenParserLenient$whitespaceAndCommentsOrEmptyLoop = $author$project$ParserFast$loopWhileSucceeds_fn($author$project$ParserFast$followedBySkipWhileWhitespace($author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$singleLineComment, $author$project$GrenParserLenient$multiLineComment)), $author$project$GrenParserLenient$ropeEmpty, F2(function (right, soFar) {
        return $author$project$GrenParserLenient$ropePrependToFilled_fn($author$project$GrenParserLenient$ropeOne(right), soFar);
    }), $elm$core$Basics$identity);
    var $author$project$GrenParserLenient$fromMultilineCommentNodeOrEmptyOnProblem = $author$project$ParserFast$map2OrSucceed_fn_unwrapped(function (comment, commentsAfter) {
        return $author$project$GrenParserLenient$ropeFilledPrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropeOne(comment));
    }, $author$project$ParserFast$followedBySkipWhileWhitespace($author$project$GrenParserLenient$multiLineComment), $author$project$GrenParserLenient$whitespaceAndCommentsOrEmptyLoop, $author$project$GrenParserLenient$ropeEmpty);
    var $author$project$GrenParserLenient$fromSingleLineCommentNode = $author$project$ParserFast$map2_fn_unwrapped(function (content, commentsAfter) {
        return $author$project$GrenParserLenient$ropeFilledPrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropeOne(content));
    }, $author$project$ParserFast$followedBySkipWhileWhitespace($author$project$GrenParserLenient$singleLineComment), $author$project$GrenParserLenient$whitespaceAndCommentsOrEmptyLoop);
    var $author$project$ParserFast$offsetSourceAndThenOrSucceed_fn = function (callback, fallback) {
        return function (s) {
            var _v0 = A2(callback, s.e, s.g);
            if (_v0.$ === 1) {
                return $author$project$ParserFast$Good_fn(fallback, s);
            }
            else {
                var parse = _v0.a;
                return parse(s);
            }
        };
    }, $author$project$ParserFast$offsetSourceAndThenOrSucceed_fn_unwrapped = function (callback, fallback) {
        return function (s) {
            var _v0 = callback(s.e, s.g);
            if (_v0.$ === 1) {
                return $author$project$ParserFast$Good_fn(fallback, s);
            }
            else {
                var parse = _v0.a;
                return parse(s);
            }
        };
    }, $author$project$ParserFast$offsetSourceAndThenOrSucceed = F2($author$project$ParserFast$offsetSourceAndThenOrSucceed_fn);
    var $author$project$ParserFast$skipWhileWhitespaceBacktrackableFollowedBy = function (_v0) {
        var parseNext = _v0;
        return function (s0) {
            return parseNext($author$project$ParserFast$skipWhileWhitespaceHelp_fn(s0.e, s0.n, s0.f, s0.g, s0.H));
        };
    };
    var $author$project$GrenParserLenient$whitespaceAndComments = $author$project$ParserFast$skipWhileWhitespaceBacktrackableFollowedBy($author$project$ParserFast$offsetSourceAndThenOrSucceed_fn_unwrapped(function (offset, source) {
        var _v0 = _String_slice_fn(offset, offset + 2, source);
        switch (_v0) {
            case "--":
                return $elm$core$Maybe$Just($author$project$GrenParserLenient$fromSingleLineCommentNode);
            case "{-":
                return $elm$core$Maybe$Just($author$project$GrenParserLenient$fromMultilineCommentNodeOrEmptyOnProblem);
            default:
                return $elm$core$Maybe$Nothing;
        }
    }, $author$project$GrenParserLenient$ropeEmpty));
    var $author$project$GrenParserLenient$followedByOptimisticLayout = function (parser) {
        return $author$project$ParserFast$map2_fn_unwrapped(function (result, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, result.b),
                a: result.a
            };
        }, parser, $author$project$GrenParserLenient$whitespaceAndComments);
    };
    var $author$project$GrenParserLenient$charLiteralExpressionOptimisticLayout = $author$project$GrenParserLenient$followedByOptimisticLayout($author$project$GrenParserLenient$expressionChar);
    var $author$project$GrenSyntax$Floatable = function (a) {
        return { $: 9, a: a };
    };
    var $author$project$GrenSyntax$Hex = function (a) {
        return { $: 8, a: a };
    };
    var $author$project$GrenSyntax$Integer = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$ParserFast$Decimal = 0;
    var $author$project$ParserFast$Hexadecimal = 1;
    var $author$project$ParserFast$convert0OrMore0To9s_fn = function (soFar, offset, src) {
        convert0OrMore0To9s: while (true) {
            var _v0 = _String_slice_fn(offset, offset + 1, src);
            switch (_v0) {
                case "0":
                    var $temp$soFar = soFar * 10, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "1":
                    var $temp$soFar = (soFar * 10) + 1, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "2":
                    var $temp$soFar = (soFar * 10) + 2, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "3":
                    var $temp$soFar = (soFar * 10) + 3, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "4":
                    var $temp$soFar = (soFar * 10) + 4, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "5":
                    var $temp$soFar = (soFar * 10) + 5, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "6":
                    var $temp$soFar = (soFar * 10) + 6, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "7":
                    var $temp$soFar = (soFar * 10) + 7, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "8":
                    var $temp$soFar = (soFar * 10) + 8, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                case "9":
                    var $temp$soFar = (soFar * 10) + 9, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMore0To9s;
                default:
                    return { U: soFar, e: offset };
            }
        }
    }, $author$project$ParserFast$convert0OrMore0To9s = F3($author$project$ParserFast$convert0OrMore0To9s_fn);
    var $author$project$ParserFast$convert0OrMoreHexadecimal_fn = function (soFar, offset, src) {
        convert0OrMoreHexadecimal: while (true) {
            var _v0 = _String_slice_fn(offset, offset + 1, src);
            switch (_v0) {
                case "0":
                    var $temp$soFar = soFar * 16, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "1":
                    var $temp$soFar = (soFar * 16) + 1, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "2":
                    var $temp$soFar = (soFar * 16) + 2, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "3":
                    var $temp$soFar = (soFar * 16) + 3, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "4":
                    var $temp$soFar = (soFar * 16) + 4, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "5":
                    var $temp$soFar = (soFar * 16) + 5, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "6":
                    var $temp$soFar = (soFar * 16) + 6, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "7":
                    var $temp$soFar = (soFar * 16) + 7, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "8":
                    var $temp$soFar = (soFar * 16) + 8, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "9":
                    var $temp$soFar = (soFar * 16) + 9, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "a":
                    var $temp$soFar = (soFar * 16) + 10, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "A":
                    var $temp$soFar = (soFar * 16) + 10, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "b":
                    var $temp$soFar = (soFar * 16) + 11, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "B":
                    var $temp$soFar = (soFar * 16) + 11, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "c":
                    var $temp$soFar = (soFar * 16) + 12, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "C":
                    var $temp$soFar = (soFar * 16) + 12, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "d":
                    var $temp$soFar = (soFar * 16) + 13, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "D":
                    var $temp$soFar = (soFar * 16) + 13, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "e":
                    var $temp$soFar = (soFar * 16) + 14, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "E":
                    var $temp$soFar = (soFar * 16) + 14, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "f":
                    var $temp$soFar = (soFar * 16) + 15, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                case "F":
                    var $temp$soFar = (soFar * 16) + 15, $temp$offset = offset + 1, $temp$src = src;
                    soFar = $temp$soFar;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue convert0OrMoreHexadecimal;
                default:
                    return { U: soFar, e: offset };
            }
        }
    }, $author$project$ParserFast$convert0OrMoreHexadecimal = F3($author$project$ParserFast$convert0OrMoreHexadecimal_fn);
    var $author$project$ParserFast$convert1OrMoreHexadecimal_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(0, offset + 1, src);
            case "1":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(1, offset + 1, src);
            case "2":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(2, offset + 1, src);
            case "3":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(3, offset + 1, src);
            case "4":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(4, offset + 1, src);
            case "5":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(5, offset + 1, src);
            case "6":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(6, offset + 1, src);
            case "7":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(7, offset + 1, src);
            case "8":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(8, offset + 1, src);
            case "9":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(9, offset + 1, src);
            case "a":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(10, offset + 1, src);
            case "A":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(10, offset + 1, src);
            case "b":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(11, offset + 1, src);
            case "B":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(11, offset + 1, src);
            case "c":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(12, offset + 1, src);
            case "C":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(12, offset + 1, src);
            case "d":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(13, offset + 1, src);
            case "D":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(13, offset + 1, src);
            case "e":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(14, offset + 1, src);
            case "E":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(14, offset + 1, src);
            case "f":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(15, offset + 1, src);
            case "F":
                return $author$project$ParserFast$convert0OrMoreHexadecimal_fn(15, offset + 1, src);
            default:
                return { U: 0, e: -1 };
        }
    }, $author$project$ParserFast$convert1OrMoreHexadecimal = F2($author$project$ParserFast$convert1OrMoreHexadecimal_fn);
    var $author$project$ParserFast$errorAsBaseOffsetAndInt = {
        T: 0,
        F: { U: 0, e: -1 }
    };
    var $author$project$ParserFast$convertIntegerDecimalOrHexadecimal_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                var _v1 = _String_slice_fn(offset + 1, offset + 2, src);
                if (_v1 === "x") {
                    var hex = $author$project$ParserFast$convert1OrMoreHexadecimal_fn(offset + 2, src);
                    return {
                        T: 1,
                        F: { U: hex.U, e: hex.e }
                    };
                }
                else {
                    return {
                        T: 0,
                        F: { U: 0, e: offset + 1 }
                    };
                }
            case "1":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(1, offset + 1, src)
                };
            case "2":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(2, offset + 1, src)
                };
            case "3":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(3, offset + 1, src)
                };
            case "4":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(4, offset + 1, src)
                };
            case "5":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(5, offset + 1, src)
                };
            case "6":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(6, offset + 1, src)
                };
            case "7":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(7, offset + 1, src)
                };
            case "8":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(8, offset + 1, src)
                };
            case "9":
                return {
                    T: 0,
                    F: $author$project$ParserFast$convert0OrMore0To9s_fn(9, offset + 1, src)
                };
            default:
                return $author$project$ParserFast$errorAsBaseOffsetAndInt;
        }
    }, $author$project$ParserFast$convertIntegerDecimalOrHexadecimal = F2($author$project$ParserFast$convertIntegerDecimalOrHexadecimal_fn);
    var $author$project$ParserFast$skip0OrMoreDigits0To9_fn = function (offset, src) {
        skip0OrMoreDigits0To9: while (true) {
            var _v0 = _String_slice_fn(offset, offset + 1, src);
            switch (_v0) {
                case "0":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "1":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "2":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "3":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "4":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "5":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "6":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "7":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "8":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                case "9":
                    var $temp$offset = offset + 1, $temp$src = src;
                    offset = $temp$offset;
                    src = $temp$src;
                    continue skip0OrMoreDigits0To9;
                default:
                    return offset;
            }
        }
    }, $author$project$ParserFast$skip0OrMoreDigits0To9 = F2($author$project$ParserFast$skip0OrMoreDigits0To9_fn);
    var $author$project$ParserFast$skip1OrMoreDigits0To9_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "1":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "2":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "3":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "4":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "5":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "6":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "7":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "8":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            case "9":
                return $author$project$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
            default:
                return -1;
        }
    }, $author$project$ParserFast$skip1OrMoreDigits0To9 = F2($author$project$ParserFast$skip1OrMoreDigits0To9_fn);
    var $author$project$ParserFast$skipAfterFloatExponentMark_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "+":
                return $author$project$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
            case "-":
                return $author$project$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
            default:
                return $author$project$ParserFast$skip1OrMoreDigits0To9_fn(offset, src);
        }
    }, $author$project$ParserFast$skipAfterFloatExponentMark = F2($author$project$ParserFast$skipAfterFloatExponentMark_fn);
    var $author$project$ParserFast$skipFloatAfterIntegerDecimal_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case ".":
                var offsetAfterDigits = $author$project$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
                if (offsetAfterDigits === -1) {
                    return -1;
                }
                else {
                    var _v1 = _String_slice_fn(offsetAfterDigits, offsetAfterDigits + 1, src);
                    switch (_v1) {
                        case "e":
                            return $author$project$ParserFast$skipAfterFloatExponentMark_fn(offsetAfterDigits + 1, src);
                        case "E":
                            return $author$project$ParserFast$skipAfterFloatExponentMark_fn(offsetAfterDigits + 1, src);
                        default:
                            return offsetAfterDigits;
                    }
                }
            case "e":
                return $author$project$ParserFast$skipAfterFloatExponentMark_fn(offset + 1, src);
            case "E":
                return $author$project$ParserFast$skipAfterFloatExponentMark_fn(offset + 1, src);
            default:
                return -1;
        }
    }, $author$project$ParserFast$skipFloatAfterIntegerDecimal = F2($author$project$ParserFast$skipFloatAfterIntegerDecimal_fn);
    var $elm$core$String$toFloat = _String_toFloat;
    var $author$project$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn = function (rangeAndFloatToRes, rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$convertIntegerDecimalOrHexadecimal_fn(s0.e, s0.g);
            if (s1.F.e === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var offsetAfterFloat = $author$project$ParserFast$skipFloatAfterIntegerDecimal_fn(s1.F.e, s0.g);
                if (offsetAfterFloat === -1) {
                    var newColumn = s0.f + (s1.F.e - s0.e);
                    var range = {
                        c: { o: newColumn, n: s0.n },
                        d: { o: s0.f, n: s0.n }
                    };
                    return $author$project$ParserFast$Good_fn(function () {
                        var _v0 = s1.T;
                        if (!_v0) {
                            return A2(rangeAndIntDecimalToRes, range, s1.F.U);
                        }
                        else {
                            return A2(rangeAndIntHexadecimalToRes, range, s1.F.U);
                        }
                    }(), { f: newColumn, H: s0.H, e: s1.F.e, n: s0.n, g: s0.g });
                }
                else {
                    var _v1 = $elm$core$String$toFloat(_String_slice_fn(s0.e, offsetAfterFloat, s0.g));
                    if (!_v1.$) {
                        var _float = _v1.a;
                        var newColumn = s0.f + (offsetAfterFloat - s0.e);
                        return $author$project$ParserFast$Good_fn(A2(rangeAndFloatToRes, {
                            c: { o: newColumn, n: s0.n },
                            d: { o: s0.f, n: s0.n }
                        }, _float), { f: newColumn, H: s0.H, e: offsetAfterFloat, n: s0.n, g: s0.g });
                    }
                    else {
                        return $author$project$ParserFast$pStepBadBacktracking;
                    }
                }
            }
        };
    }, $author$project$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange = F3($author$project$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn);
    var $author$project$GrenParserLenient$expressionNumber = $author$project$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn(F2(function (range, n) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$Floatable(n))
        };
    }), F2(function (range, n) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$Integer(n))
        };
    }), F2(function (range, n) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$Hex(n))
        };
    }));
    var $author$project$GrenSyntax$RecordAccess_fn = function (a, b) {
        return { $: 20, a: a, b: b };
    }, $author$project$GrenSyntax$RecordAccess = F2($author$project$GrenSyntax$RecordAccess_fn);
    var $author$project$ParserFast$loopWhileSucceedsOntoResultFromParser_fn = function (element, _v0, reduce, foldedToRes) {
        var parseInitialFolded = _v0;
        return function (s0) {
            var _v1 = parseInitialFolded(s0);
            if (!_v1.$) {
                var initialFolded = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$loopWhileSucceedsHelp_fn(element, initialFolded, reduce, foldedToRes, s1);
            }
            else {
                var committed = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
        };
    }, $author$project$ParserFast$loopWhileSucceedsOntoResultFromParser = F4($author$project$ParserFast$loopWhileSucceedsOntoResultFromParser_fn);
    var $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn = function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
        return function (s0) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.e, s0.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.n, s0.f + 1, s0.g, s0.H);
                return $author$project$ParserFast$Good_fn(A2(rangeAndConsumedStringToRes, {
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, _String_slice_fn(s0.e, s1.e, s0.g)), s1);
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn_unwrapped = function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
        return function (s0) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.e, s0.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.n, s0.f + 1, s0.g, s0.H);
                return $author$project$ParserFast$Good_fn(rangeAndConsumedStringToRes({
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, _String_slice_fn(s0.e, s1.e, s0.g)), s1);
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak = F3($author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn);
    var $author$project$GrenParserLenient$ifKeywordUnderscoreSuffix = function (name) {
        switch (name) {
            case "module":
                return "module_";
            case "exposing":
                return "exposing_";
            case "import":
                return "import_";
            case "as":
                return "as_";
            case "if":
                return "if_";
            case "then":
                return "then_";
            case "else":
                return "else_";
            case "let":
                return "let_";
            case "in":
                return "in_";
            case "case":
                return "case_";
            case "of":
                return "of_";
            case "port":
                return "port_";
            case "type":
                return "type_";
            case "where":
                return "where_";
            default:
                return name;
        }
    };
    var $author$project$Char$Extra$charCodeIsDigit = function (code) {
        return (code <= 57) && (48 <= code);
    };
    var $author$project$Char$Extra$charCodeIsLower = function (code) {
        return (97 <= code) && (code <= 122);
    };
    var $author$project$Char$Extra$charCodeIsUpper = function (code) {
        return (code <= 90) && (65 <= code);
    };
    var $elm$core$Basics$modBy = _Basics_modBy;
    var $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast = function (c) {
        var code = $elm$core$Char$toCode(c);
        return $author$project$Char$Extra$charCodeIsLower(code) || ($author$project$Char$Extra$charCodeIsUpper(code) || ($author$project$Char$Extra$charCodeIsDigit(code) || ((code === 95) || (((code !== 32) && (code !== 10)) && ((code < 256) ? (((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 90)) || (((97 <= code) && (code <= 122)) || ((code === 170) || (((178 <= code) && (code <= 179)) || ((code === 181) || (((185 <= code) && (code <= 186)) || (((188 <= code) && (code <= 190)) || (((192 <= code) && (code <= 214)) || (((216 <= code) && (code <= 246)) || ((248 <= code) && (code <= 255)))))))))))) : ((code < 43700) ? ((code < 4347) ? ((code < 2868) ? ((code < 2364) ? ((code < 1648) ? ((code < 930) ? (((256 <= code) && (code <= 705)) || (((710 <= code) && (code <= 721)) || (((736 <= code) && (code <= 740)) || (((880 <= code) && (code <= 884)) || (((886 <= code) && (code <= 887)) || (((890 <= code) && (code <= 893)) || ((code === 895) || ((code === 902) || (((904 <= code) && (code <= 906)) || ((code === 908) || (((910 <= code) && (code <= 929)) || ((!_Basics_modBy_fn(2, code)) && ((748 <= code) && (code <= 750)))))))))))))) : (((931 <= code) && (code <= 1013)) || (((1015 <= code) && (code <= 1153)) || (((1162 <= code) && (code <= 1327)) || (((1329 <= code) && (code <= 1366)) || ((code === 1369) || (((1376 <= code) && (code <= 1416)) || (((1488 <= code) && (code <= 1514)) || (((1519 <= code) && (code <= 1522)) || (((1568 <= code) && (code <= 1610)) || (((1632 <= code) && (code <= 1641)) || ((1646 <= code) && (code <= 1647))))))))))))) : ((code < 2041) ? (((1649 <= code) && (code <= 1747)) || ((code === 1749) || (((1765 <= code) && (code <= 1766)) || (((1774 <= code) && (code <= 1788)) || ((code === 1791) || ((code === 1808) || (((1810 <= code) && (code <= 1839)) || (((1869 <= code) && (code <= 1957)) || ((code === 1969) || (((1984 <= code) && (code <= 2026)) || ((2036 <= code) && (code <= 2037)))))))))))) : ((code === 2042) || (((2048 <= code) && (code <= 2069)) || ((code === 2074) || ((code === 2084) || ((code === 2088) || (((2112 <= code) && (code <= 2136)) || (((2144 <= code) && (code <= 2154)) || (((2160 <= code) && (code <= 2183)) || (((2185 <= code) && (code <= 2190)) || (((2208 <= code) && (code <= 2249)) || ((2308 <= code) && (code <= 2361)))))))))))))) : ((code < 2609) ? ((code < 2492) ? ((code === 2365) || ((code === 2384) || (((2392 <= code) && (code <= 2401)) || (((2406 <= code) && (code <= 2415)) || (((2417 <= code) && (code <= 2432)) || (((2437 <= code) && (code <= 2444)) || (((2447 <= code) && (code <= 2448)) || (((2451 <= code) && (code <= 2472)) || (((2474 <= code) && (code <= 2480)) || ((code === 2482) || ((2486 <= code) && (code <= 2489)))))))))))) : ((code === 2493) || ((code === 2510) || (((2524 <= code) && (code <= 2525)) || (((2527 <= code) && (code <= 2529)) || (((2534 <= code) && (code <= 2545)) || (((2548 <= code) && (code <= 2553)) || ((code === 2556) || (((2565 <= code) && (code <= 2570)) || (((2575 <= code) && (code <= 2576)) || (((2579 <= code) && (code <= 2600)) || ((2602 <= code) && (code <= 2608))))))))))))) : ((code < 2737) ? (((2610 <= code) && (code <= 2611)) || (((2613 <= code) && (code <= 2614)) || (((2616 <= code) && (code <= 2617)) || (((2649 <= code) && (code <= 2652)) || ((code === 2654) || (((2662 <= code) && (code <= 2671)) || (((2674 <= code) && (code <= 2676)) || (((2693 <= code) && (code <= 2701)) || (((2703 <= code) && (code <= 2705)) || (((2707 <= code) && (code <= 2728)) || ((2730 <= code) && (code <= 2736)))))))))))) : (((2738 <= code) && (code <= 2739)) || (((2741 <= code) && (code <= 2745)) || ((code === 2749) || ((code === 2768) || (((2784 <= code) && (code <= 2785)) || (((2790 <= code) && (code <= 2799)) || ((code === 2809) || (((2821 <= code) && (code <= 2828)) || (((2831 <= code) && (code <= 2832)) || (((2835 <= code) && (code <= 2856)) || (((2858 <= code) && (code <= 2864)) || ((2866 <= code) && (code <= 2867)))))))))))))))) : ((code < 3411) ? ((code < 3132) ? ((code < 2971) ? (((2869 <= code) && (code <= 2873)) || ((code === 2877) || (((2908 <= code) && (code <= 2909)) || (((2911 <= code) && (code <= 2913)) || (((2918 <= code) && (code <= 2927)) || (((2929 <= code) && (code <= 2935)) || ((code === 2947) || (((2949 <= code) && (code <= 2954)) || (((2958 <= code) && (code <= 2960)) || (((2962 <= code) && (code <= 2965)) || ((2969 <= code) && (code <= 2970)))))))))))) : ((code === 2972) || (((2974 <= code) && (code <= 2975)) || (((2979 <= code) && (code <= 2980)) || (((2984 <= code) && (code <= 2986)) || (((2990 <= code) && (code <= 3001)) || ((code === 3024) || (((3046 <= code) && (code <= 3058)) || (((3077 <= code) && (code <= 3084)) || (((3086 <= code) && (code <= 3088)) || (((3090 <= code) && (code <= 3112)) || ((3114 <= code) && (code <= 3129))))))))))))) : ((code < 3252) ? ((code === 3133) || (((3160 <= code) && (code <= 3162)) || ((code === 3165) || (((3168 <= code) && (code <= 3169)) || (((3174 <= code) && (code <= 3183)) || (((3192 <= code) && (code <= 3198)) || ((code === 3200) || (((3205 <= code) && (code <= 3212)) || (((3214 <= code) && (code <= 3216)) || (((3218 <= code) && (code <= 3240)) || ((3242 <= code) && (code <= 3251)))))))))))) : (((3253 <= code) && (code <= 3257)) || ((code === 3261) || (((3293 <= code) && (code <= 3294)) || (((3296 <= code) && (code <= 3297)) || (((3302 <= code) && (code <= 3311)) || (((3313 <= code) && (code <= 3314)) || (((3332 <= code) && (code <= 3340)) || (((3342 <= code) && (code <= 3344)) || (((3346 <= code) && (code <= 3386)) || ((code === 3389) || (code === 3406))))))))))))) : ((code < 3775) ? ((code < 3633) ? (((3412 <= code) && (code <= 3414)) || (((3416 <= code) && (code <= 3425)) || (((3430 <= code) && (code <= 3448)) || (((3450 <= code) && (code <= 3455)) || (((3461 <= code) && (code <= 3478)) || (((3482 <= code) && (code <= 3505)) || (((3507 <= code) && (code <= 3515)) || ((code === 3517) || (((3520 <= code) && (code <= 3526)) || (((3558 <= code) && (code <= 3567)) || ((3585 <= code) && (code <= 3632)))))))))))) : (((3634 <= code) && (code <= 3635)) || (((3648 <= code) && (code <= 3654)) || (((3664 <= code) && (code <= 3673)) || (((3713 <= code) && (code <= 3714)) || ((code === 3716) || (((3718 <= code) && (code <= 3722)) || (((3724 <= code) && (code <= 3747)) || ((code === 3749) || (((3751 <= code) && (code <= 3760)) || (((3762 <= code) && (code <= 3763)) || (code === 3773)))))))))))) : ((code < 4175) ? (((3776 <= code) && (code <= 3780)) || ((code === 3782) || (((3792 <= code) && (code <= 3801)) || (((3804 <= code) && (code <= 3807)) || ((code === 3840) || (((3872 <= code) && (code <= 3891)) || (((3904 <= code) && (code <= 3911)) || (((3913 <= code) && (code <= 3948)) || (((3976 <= code) && (code <= 3980)) || (((4096 <= code) && (code <= 4138)) || ((4159 <= code) && (code <= 4169)))))))))))) : (((4176 <= code) && (code <= 4181)) || (((4186 <= code) && (code <= 4189)) || ((code === 4193) || (((4197 <= code) && (code <= 4198)) || (((4206 <= code) && (code <= 4208)) || (((4213 <= code) && (code <= 4225)) || ((code === 4238) || (((4240 <= code) && (code <= 4249)) || (((4256 <= code) && (code <= 4293)) || ((code === 4295) || ((code === 4301) || ((4304 <= code) && (code <= 4346))))))))))))))))) : ((code < 8454) ? ((code < 6527) ? ((code < 5760) ? ((code < 4801) ? (((4348 <= code) && (code <= 4680)) || (((4682 <= code) && (code <= 4685)) || (((4688 <= code) && (code <= 4694)) || ((code === 4696) || (((4698 <= code) && (code <= 4701)) || (((4704 <= code) && (code <= 4744)) || (((4746 <= code) && (code <= 4749)) || (((4752 <= code) && (code <= 4784)) || (((4786 <= code) && (code <= 4789)) || (((4792 <= code) && (code <= 4798)) || (code === 4800))))))))))) : (((4802 <= code) && (code <= 4805)) || (((4808 <= code) && (code <= 4822)) || (((4824 <= code) && (code <= 4880)) || (((4882 <= code) && (code <= 4885)) || (((4888 <= code) && (code <= 4954)) || (((4969 <= code) && (code <= 4988)) || (((4992 <= code) && (code <= 5007)) || (((5024 <= code) && (code <= 5109)) || (((5112 <= code) && (code <= 5117)) || (((5121 <= code) && (code <= 5740)) || ((5743 <= code) && (code <= 5759))))))))))))) : ((code < 6111) ? (((5761 <= code) && (code <= 5786)) || (((5792 <= code) && (code <= 5866)) || (((5870 <= code) && (code <= 5880)) || (((5888 <= code) && (code <= 5905)) || (((5919 <= code) && (code <= 5937)) || (((5952 <= code) && (code <= 5969)) || (((5984 <= code) && (code <= 5996)) || (((5998 <= code) && (code <= 6000)) || (((6016 <= code) && (code <= 6067)) || ((code === 6103) || (code === 6108))))))))))) : (((6112 <= code) && (code <= 6121)) || (((6128 <= code) && (code <= 6137)) || (((6160 <= code) && (code <= 6169)) || (((6176 <= code) && (code <= 6264)) || (((6272 <= code) && (code <= 6276)) || (((6279 <= code) && (code <= 6312)) || ((code === 6314) || (((6320 <= code) && (code <= 6389)) || (((6400 <= code) && (code <= 6430)) || (((6470 <= code) && (code <= 6509)) || ((6512 <= code) && (code <= 6516)))))))))))))) : ((code < 7417) ? ((code < 7042) ? (((6528 <= code) && (code <= 6571)) || (((6576 <= code) && (code <= 6601)) || (((6608 <= code) && (code <= 6618)) || (((6656 <= code) && (code <= 6678)) || (((6688 <= code) && (code <= 6740)) || (((6784 <= code) && (code <= 6793)) || (((6800 <= code) && (code <= 6809)) || ((code === 6823) || (((6917 <= code) && (code <= 6963)) || (((6981 <= code) && (code <= 6988)) || ((6992 <= code) && (code <= 7001)))))))))))) : (((7043 <= code) && (code <= 7072)) || (((7086 <= code) && (code <= 7141)) || (((7168 <= code) && (code <= 7203)) || (((7232 <= code) && (code <= 7241)) || (((7245 <= code) && (code <= 7293)) || (((7296 <= code) && (code <= 7304)) || (((7312 <= code) && (code <= 7354)) || (((7357 <= code) && (code <= 7359)) || (((7401 <= code) && (code <= 7404)) || (((7406 <= code) && (code <= 7411)) || ((7413 <= code) && (code <= 7414))))))))))))) : ((code < 8129) ? ((code === 7418) || (((7424 <= code) && (code <= 7615)) || (((7680 <= code) && (code <= 7957)) || (((7960 <= code) && (code <= 7965)) || (((7968 <= code) && (code <= 8005)) || (((8008 <= code) && (code <= 8013)) || (((8016 <= code) && (code <= 8023)) || (((8032 <= code) && (code <= 8061)) || (((8064 <= code) && (code <= 8116)) || (((8118 <= code) && (code <= 8124)) || ((code === 8126) || ((_Basics_modBy_fn(2, code) === 1) && ((8025 <= code) && (code <= 8031)))))))))))))) : (((8130 <= code) && (code <= 8132)) || (((8134 <= code) && (code <= 8140)) || (((8144 <= code) && (code <= 8147)) || (((8150 <= code) && (code <= 8155)) || (((8160 <= code) && (code <= 8172)) || (((8178 <= code) && (code <= 8180)) || (((8182 <= code) && (code <= 8188)) || (((8304 <= code) && (code <= 8305)) || (((8308 <= code) && (code <= 8313)) || (((8319 <= code) && (code <= 8329)) || (((8336 <= code) && (code <= 8348)) || (code === 8450))))))))))))))) : ((code < 12783) ? ((code < 11647) ? ((code < 9449) ? ((code === 8455) || (((8458 <= code) && (code <= 8467)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || (((8490 <= code) && (code <= 8493)) || (((8495 <= code) && (code <= 8505)) || (((8508 <= code) && (code <= 8511)) || (((8517 <= code) && (code <= 8521)) || ((code === 8526) || (((8528 <= code) && (code <= 8585)) || (((9312 <= code) && (code <= 9371)) || ((!_Basics_modBy_fn(2, code)) && ((8484 <= code) && (code <= 8488)))))))))))))) : (((9450 <= code) && (code <= 9471)) || (((10102 <= code) && (code <= 10131)) || (((11264 <= code) && (code <= 11492)) || (((11499 <= code) && (code <= 11502)) || (((11506 <= code) && (code <= 11507)) || ((code === 11517) || (((11520 <= code) && (code <= 11557)) || ((code === 11559) || ((code === 11565) || (((11568 <= code) && (code <= 11623)) || (code === 11631)))))))))))) : ((code < 12320) ? (((11648 <= code) && (code <= 11670)) || (((11680 <= code) && (code <= 11686)) || (((11688 <= code) && (code <= 11694)) || (((11696 <= code) && (code <= 11702)) || (((11704 <= code) && (code <= 11710)) || (((11712 <= code) && (code <= 11718)) || (((11720 <= code) && (code <= 11726)) || (((11728 <= code) && (code <= 11734)) || (((11736 <= code) && (code <= 11742)) || ((code === 11823) || ((12293 <= code) && (code <= 12295)))))))))))) : (((12321 <= code) && (code <= 12329)) || (((12337 <= code) && (code <= 12341)) || (((12344 <= code) && (code <= 12348)) || (((12353 <= code) && (code <= 12438)) || (((12445 <= code) && (code <= 12447)) || (((12449 <= code) && (code <= 12538)) || (((12540 <= code) && (code <= 12543)) || (((12549 <= code) && (code <= 12591)) || (((12593 <= code) && (code <= 12686)) || (((12690 <= code) && (code <= 12693)) || ((12704 <= code) && (code <= 12735)))))))))))))) : ((code < 43019) ? ((code < 42559) ? (((12784 <= code) && (code <= 12799)) || (((12832 <= code) && (code <= 12841)) || (((12872 <= code) && (code <= 12879)) || (((12881 <= code) && (code <= 12895)) || (((12928 <= code) && (code <= 12937)) || (((12977 <= code) && (code <= 12991)) || (((13312 <= code) && (code <= 19903)) || (((19968 <= code) && (code <= 42124)) || (((42192 <= code) && (code <= 42237)) || (((42240 <= code) && (code <= 42508)) || ((42512 <= code) && (code <= 42539)))))))))))) : (((42560 <= code) && (code <= 42606)) || (((42623 <= code) && (code <= 42653)) || (((42656 <= code) && (code <= 42735)) || (((42775 <= code) && (code <= 42783)) || (((42786 <= code) && (code <= 42888)) || (((42891 <= code) && (code <= 42954)) || (((42960 <= code) && (code <= 42961)) || (((42966 <= code) && (code <= 42969)) || (((42994 <= code) && (code <= 43009)) || (((43011 <= code) && (code <= 43013)) || (((43015 <= code) && (code <= 43018)) || ((_Basics_modBy_fn(2, code) === 1) && ((42963 <= code) && (code <= 42965))))))))))))))) : ((code < 43395) ? (((43020 <= code) && (code <= 43042)) || (((43056 <= code) && (code <= 43061)) || (((43072 <= code) && (code <= 43123)) || (((43138 <= code) && (code <= 43187)) || (((43216 <= code) && (code <= 43225)) || (((43250 <= code) && (code <= 43255)) || ((code === 43259) || (((43261 <= code) && (code <= 43262)) || (((43264 <= code) && (code <= 43301)) || (((43312 <= code) && (code <= 43334)) || ((43360 <= code) && (code <= 43388)))))))))))) : (((43396 <= code) && (code <= 43442)) || (((43471 <= code) && (code <= 43481)) || (((43488 <= code) && (code <= 43492)) || (((43494 <= code) && (code <= 43518)) || (((43520 <= code) && (code <= 43560)) || (((43584 <= code) && (code <= 43586)) || (((43588 <= code) && (code <= 43595)) || (((43600 <= code) && (code <= 43609)) || (((43616 <= code) && (code <= 43638)) || ((code === 43642) || (((43646 <= code) && (code <= 43695)) || (code === 43697))))))))))))))))) : ((code < 71351) ? ((code < 67671) ? ((code < 65548) ? ((code < 64286) ? ((code < 43867) ? (((43701 <= code) && (code <= 43702)) || (((43705 <= code) && (code <= 43709)) || (((43739 <= code) && (code <= 43741)) || (((43744 <= code) && (code <= 43754)) || (((43762 <= code) && (code <= 43764)) || (((43777 <= code) && (code <= 43782)) || (((43785 <= code) && (code <= 43790)) || (((43793 <= code) && (code <= 43798)) || (((43808 <= code) && (code <= 43814)) || (((43816 <= code) && (code <= 43822)) || (((43824 <= code) && (code <= 43866)) || ((!_Basics_modBy_fn(2, code)) && ((43712 <= code) && (code <= 43714)))))))))))))) : (((43868 <= code) && (code <= 43881)) || (((43888 <= code) && (code <= 44002)) || (((44016 <= code) && (code <= 44025)) || (((44032 <= code) && (code <= 55203)) || (((55216 <= code) && (code <= 55238)) || (((55243 <= code) && (code <= 55291)) || (((63744 <= code) && (code <= 64109)) || (((64112 <= code) && (code <= 64217)) || (((64256 <= code) && (code <= 64262)) || (((64275 <= code) && (code <= 64279)) || (code === 64285)))))))))))) : ((code < 65135) ? (((64287 <= code) && (code <= 64296)) || (((64298 <= code) && (code <= 64310)) || (((64312 <= code) && (code <= 64316)) || ((code === 64318) || (((64320 <= code) && (code <= 64321)) || (((64323 <= code) && (code <= 64324)) || (((64326 <= code) && (code <= 64433)) || (((64467 <= code) && (code <= 64829)) || (((64848 <= code) && (code <= 64911)) || (((64914 <= code) && (code <= 64967)) || ((65008 <= code) && (code <= 65019)))))))))))) : (((65136 <= code) && (code <= 65140)) || (((65142 <= code) && (code <= 65276)) || (((65296 <= code) && (code <= 65305)) || (((65313 <= code) && (code <= 65338)) || (((65345 <= code) && (code <= 65370)) || (((65382 <= code) && (code <= 65470)) || (((65474 <= code) && (code <= 65479)) || (((65482 <= code) && (code <= 65487)) || (((65490 <= code) && (code <= 65495)) || (((65498 <= code) && (code <= 65500)) || ((65536 <= code) && (code <= 65547)))))))))))))) : ((code < 66775) ? ((code < 66272) ? (((65549 <= code) && (code <= 65574)) || (((65576 <= code) && (code <= 65594)) || (((65596 <= code) && (code <= 65597)) || (((65599 <= code) && (code <= 65613)) || (((65616 <= code) && (code <= 65629)) || (((65664 <= code) && (code <= 65786)) || (((65799 <= code) && (code <= 65843)) || (((65856 <= code) && (code <= 65912)) || (((65930 <= code) && (code <= 65931)) || (((66176 <= code) && (code <= 66204)) || ((66208 <= code) && (code <= 66256)))))))))))) : (((66273 <= code) && (code <= 66299)) || (((66304 <= code) && (code <= 66339)) || (((66349 <= code) && (code <= 66378)) || (((66384 <= code) && (code <= 66421)) || (((66432 <= code) && (code <= 66461)) || (((66464 <= code) && (code <= 66499)) || (((66504 <= code) && (code <= 66511)) || (((66513 <= code) && (code <= 66517)) || (((66560 <= code) && (code <= 66717)) || (((66720 <= code) && (code <= 66729)) || ((66736 <= code) && (code <= 66771))))))))))))) : ((code < 67071) ? (((66776 <= code) && (code <= 66811)) || (((66816 <= code) && (code <= 66855)) || (((66864 <= code) && (code <= 66915)) || (((66928 <= code) && (code <= 66938)) || (((66940 <= code) && (code <= 66954)) || (((66956 <= code) && (code <= 66962)) || (((66964 <= code) && (code <= 66965)) || (((66967 <= code) && (code <= 66977)) || (((66979 <= code) && (code <= 66993)) || (((66995 <= code) && (code <= 67001)) || ((67003 <= code) && (code <= 67004)))))))))))) : (((67072 <= code) && (code <= 67382)) || (((67392 <= code) && (code <= 67413)) || (((67424 <= code) && (code <= 67431)) || (((67456 <= code) && (code <= 67461)) || (((67463 <= code) && (code <= 67504)) || (((67506 <= code) && (code <= 67514)) || (((67584 <= code) && (code <= 67589)) || ((code === 67592) || (((67594 <= code) && (code <= 67637)) || (((67639 <= code) && (code <= 67640)) || ((code === 67644) || ((67647 <= code) && (code <= 67669)))))))))))))))) : ((code < 69871) ? ((code < 68471) ? ((code < 68116) ? (((67672 <= code) && (code <= 67702)) || (((67705 <= code) && (code <= 67742)) || (((67751 <= code) && (code <= 67759)) || (((67808 <= code) && (code <= 67826)) || (((67828 <= code) && (code <= 67829)) || (((67835 <= code) && (code <= 67867)) || (((67872 <= code) && (code <= 67897)) || (((67968 <= code) && (code <= 68023)) || (((68028 <= code) && (code <= 68047)) || (((68050 <= code) && (code <= 68096)) || ((68112 <= code) && (code <= 68115)))))))))))) : (((68117 <= code) && (code <= 68119)) || (((68121 <= code) && (code <= 68149)) || (((68160 <= code) && (code <= 68168)) || (((68192 <= code) && (code <= 68222)) || (((68224 <= code) && (code <= 68255)) || (((68288 <= code) && (code <= 68295)) || (((68297 <= code) && (code <= 68324)) || (((68331 <= code) && (code <= 68335)) || (((68352 <= code) && (code <= 68405)) || (((68416 <= code) && (code <= 68437)) || ((68440 <= code) && (code <= 68466))))))))))))) : ((code < 69423) ? (((68472 <= code) && (code <= 68497)) || (((68521 <= code) && (code <= 68527)) || (((68608 <= code) && (code <= 68680)) || (((68736 <= code) && (code <= 68786)) || (((68800 <= code) && (code <= 68850)) || (((68858 <= code) && (code <= 68899)) || (((68912 <= code) && (code <= 68921)) || (((69216 <= code) && (code <= 69246)) || (((69248 <= code) && (code <= 69289)) || (((69296 <= code) && (code <= 69297)) || ((69376 <= code) && (code <= 69415)))))))))))) : (((69424 <= code) && (code <= 69445)) || (((69457 <= code) && (code <= 69460)) || (((69488 <= code) && (code <= 69505)) || (((69552 <= code) && (code <= 69579)) || (((69600 <= code) && (code <= 69622)) || (((69635 <= code) && (code <= 69687)) || (((69714 <= code) && (code <= 69743)) || (((69745 <= code) && (code <= 69746)) || ((code === 69749) || (((69763 <= code) && (code <= 69807)) || ((69840 <= code) && (code <= 69864)))))))))))))) : ((code < 70404) ? ((code < 70112) ? (((69872 <= code) && (code <= 69881)) || (((69891 <= code) && (code <= 69926)) || (((69942 <= code) && (code <= 69951)) || ((code === 69956) || ((code === 69959) || (((69968 <= code) && (code <= 70002)) || ((code === 70006) || (((70019 <= code) && (code <= 70066)) || (((70081 <= code) && (code <= 70084)) || (((70096 <= code) && (code <= 70106)) || (code === 70108))))))))))) : (((70113 <= code) && (code <= 70132)) || (((70144 <= code) && (code <= 70161)) || (((70163 <= code) && (code <= 70187)) || (((70207 <= code) && (code <= 70208)) || (((70272 <= code) && (code <= 70278)) || ((code === 70280) || (((70282 <= code) && (code <= 70285)) || (((70287 <= code) && (code <= 70301)) || (((70303 <= code) && (code <= 70312)) || (((70320 <= code) && (code <= 70366)) || ((70384 <= code) && (code <= 70393))))))))))))) : ((code < 70735) ? (((70405 <= code) && (code <= 70412)) || (((70415 <= code) && (code <= 70416)) || (((70419 <= code) && (code <= 70440)) || (((70442 <= code) && (code <= 70448)) || (((70450 <= code) && (code <= 70451)) || (((70453 <= code) && (code <= 70457)) || ((code === 70461) || ((code === 70480) || (((70493 <= code) && (code <= 70497)) || (((70656 <= code) && (code <= 70708)) || ((70727 <= code) && (code <= 70730)))))))))))) : (((70736 <= code) && (code <= 70745)) || (((70751 <= code) && (code <= 70753)) || (((70784 <= code) && (code <= 70831)) || (((70852 <= code) && (code <= 70853)) || ((code === 70855) || (((70864 <= code) && (code <= 70873)) || (((71040 <= code) && (code <= 71086)) || (((71128 <= code) && (code <= 71131)) || (((71168 <= code) && (code <= 71215)) || ((code === 71236) || (((71248 <= code) && (code <= 71257)) || ((71296 <= code) && (code <= 71338))))))))))))))))) : ((code < 119893) ? ((code < 73727) ? ((code < 72703) ? ((code < 71959) ? ((code === 71352) || (((71360 <= code) && (code <= 71369)) || (((71424 <= code) && (code <= 71450)) || (((71472 <= code) && (code <= 71483)) || (((71488 <= code) && (code <= 71494)) || (((71680 <= code) && (code <= 71723)) || (((71840 <= code) && (code <= 71922)) || (((71935 <= code) && (code <= 71942)) || ((code === 71945) || (((71948 <= code) && (code <= 71955)) || ((71957 <= code) && (code <= 71958)))))))))))) : (((71960 <= code) && (code <= 71983)) || (((72016 <= code) && (code <= 72025)) || (((72096 <= code) && (code <= 72103)) || (((72106 <= code) && (code <= 72144)) || ((code === 72192) || (((72203 <= code) && (code <= 72242)) || ((code === 72250) || ((code === 72272) || (((72284 <= code) && (code <= 72329)) || ((code === 72349) || (((72368 <= code) && (code <= 72440)) || ((_Basics_modBy_fn(2, code) === 1) && (((71999 <= code) && (code <= 72001)) || ((72161 <= code) && (code <= 72163)))))))))))))))) : ((code < 73062) ? (((72704 <= code) && (code <= 72712)) || (((72714 <= code) && (code <= 72750)) || ((code === 72768) || (((72784 <= code) && (code <= 72812)) || (((72818 <= code) && (code <= 72847)) || (((72960 <= code) && (code <= 72966)) || (((72968 <= code) && (code <= 72969)) || (((72971 <= code) && (code <= 73008)) || ((code === 73030) || (((73040 <= code) && (code <= 73049)) || ((73056 <= code) && (code <= 73061)))))))))))) : (((73063 <= code) && (code <= 73064)) || (((73066 <= code) && (code <= 73097)) || ((code === 73112) || (((73120 <= code) && (code <= 73129)) || (((73440 <= code) && (code <= 73458)) || ((code === 73474) || (((73476 <= code) && (code <= 73488)) || (((73490 <= code) && (code <= 73523)) || (((73552 <= code) && (code <= 73561)) || ((code === 73648) || ((73664 <= code) && (code <= 73684)))))))))))))) : ((code < 94098) ? ((code < 92863) ? (((73728 <= code) && (code <= 74649)) || (((74752 <= code) && (code <= 74862)) || (((74880 <= code) && (code <= 75075)) || (((77712 <= code) && (code <= 77808)) || (((77824 <= code) && (code <= 78895)) || (((78913 <= code) && (code <= 78918)) || (((82944 <= code) && (code <= 83526)) || (((92160 <= code) && (code <= 92728)) || (((92736 <= code) && (code <= 92766)) || (((92768 <= code) && (code <= 92777)) || ((92784 <= code) && (code <= 92862)))))))))))) : (((92864 <= code) && (code <= 92873)) || (((92880 <= code) && (code <= 92909)) || (((92928 <= code) && (code <= 92975)) || (((92992 <= code) && (code <= 92995)) || (((93008 <= code) && (code <= 93017)) || (((93019 <= code) && (code <= 93025)) || (((93027 <= code) && (code <= 93047)) || (((93053 <= code) && (code <= 93071)) || (((93760 <= code) && (code <= 93846)) || (((93952 <= code) && (code <= 94026)) || (code === 94032)))))))))))) : ((code < 110927) ? (((94099 <= code) && (code <= 94111)) || (((94176 <= code) && (code <= 94177)) || ((code === 94179) || (((94208 <= code) && (code <= 100343)) || (((100352 <= code) && (code <= 101589)) || (((101632 <= code) && (code <= 101640)) || (((110576 <= code) && (code <= 110579)) || (((110581 <= code) && (code <= 110587)) || (((110589 <= code) && (code <= 110590)) || (((110592 <= code) && (code <= 110882)) || (code === 110898))))))))))) : (((110928 <= code) && (code <= 110930)) || ((code === 110933) || (((110948 <= code) && (code <= 110951)) || (((110960 <= code) && (code <= 111355)) || (((113664 <= code) && (code <= 113770)) || (((113776 <= code) && (code <= 113788)) || (((113792 <= code) && (code <= 113800)) || (((113808 <= code) && (code <= 113817)) || (((119488 <= code) && (code <= 119507)) || (((119520 <= code) && (code <= 119539)) || (((119648 <= code) && (code <= 119672)) || ((119808 <= code) && (code <= 119892)))))))))))))))) : ((code < 124911) ? ((code < 120597) ? ((code < 120085) ? (((119894 <= code) && (code <= 119964)) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || (((119982 <= code) && (code <= 119993)) || ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || ((120077 <= code) && (code <= 120084)))))))))))) : (((120086 <= code) && (code <= 120092)) || (((120094 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || (((120146 <= code) && (code <= 120485)) || (((120488 <= code) && (code <= 120512)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120570)) || ((120572 <= code) && (code <= 120596))))))))))))) : ((code < 123135) ? (((120598 <= code) && (code <= 120628)) || (((120630 <= code) && (code <= 120654)) || (((120656 <= code) && (code <= 120686)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120744)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120779)) || (((120782 <= code) && (code <= 120831)) || (((122624 <= code) && (code <= 122654)) || (((122661 <= code) && (code <= 122666)) || ((122928 <= code) && (code <= 122989)))))))))))) : (((123136 <= code) && (code <= 123180)) || (((123191 <= code) && (code <= 123197)) || (((123200 <= code) && (code <= 123209)) || ((code === 123214) || (((123536 <= code) && (code <= 123565)) || (((123584 <= code) && (code <= 123627)) || (((123632 <= code) && (code <= 123641)) || (((124112 <= code) && (code <= 124139)) || (((124144 <= code) && (code <= 124153)) || (((124896 <= code) && (code <= 124902)) || (((124904 <= code) && (code <= 124907)) || ((124909 <= code) && (code <= 124910))))))))))))))) : ((code < 126560) ? ((code < 126463) ? (((124912 <= code) && (code <= 124926)) || (((124928 <= code) && (code <= 125124)) || (((125127 <= code) && (code <= 125135)) || (((125184 <= code) && (code <= 125251)) || ((code === 125259) || (((125264 <= code) && (code <= 125273)) || (((126065 <= code) && (code <= 126123)) || (((126125 <= code) && (code <= 126127)) || (((126129 <= code) && (code <= 126132)) || (((126209 <= code) && (code <= 126253)) || ((126255 <= code) && (code <= 126269)))))))))))) : (((126464 <= code) && (code <= 126467)) || (((126469 <= code) && (code <= 126495)) || (((126497 <= code) && (code <= 126498)) || ((code === 126500) || ((code === 126503) || (((126505 <= code) && (code <= 126514)) || (((126516 <= code) && (code <= 126519)) || ((code === 126530) || (((126541 <= code) && (code <= 126543)) || (((126545 <= code) && (code <= 126546)) || ((code === 126548) || ((_Basics_modBy_fn(2, code) === 1) && (((126521 <= code) && (code <= 126523)) || (((126535 <= code) && (code <= 126539)) || ((126551 <= code) && (code <= 126559))))))))))))))))) : ((code < 126634) ? (((126561 <= code) && (code <= 126562)) || ((code === 126564) || (((126567 <= code) && (code <= 126570)) || (((126572 <= code) && (code <= 126578)) || (((126580 <= code) && (code <= 126583)) || (((126585 <= code) && (code <= 126588)) || ((code === 126590) || (((126592 <= code) && (code <= 126601)) || (((126603 <= code) && (code <= 126619)) || (((126625 <= code) && (code <= 126627)) || ((126629 <= code) && (code <= 126633)))))))))))) : (((126635 <= code) && (code <= 126651)) || (((127232 <= code) && (code <= 127244)) || (((130032 <= code) && (code <= 130041)) || (((131072 <= code) && (code <= 173791)) || (((173824 <= code) && (code <= 177977)) || (((177984 <= code) && (code <= 178205)) || (((178208 <= code) && (code <= 183969)) || (((183984 <= code) && (code <= 191456)) || (((191472 <= code) && (code <= 192093)) || (((194560 <= code) && (code <= 195101)) || (((196608 <= code) && (code <= 201546)) || ((201552 <= code) && (code <= 205743))))))))))))))))))))))));
    };
    var $elm$core$String$fromChar = function (_char) {
        return _String_cons_fn(_char, "");
    };
    var $elm$core$String$toLower = _String_toLower;
    var $elm$core$String$toUpper = _String_toUpper;
    var $author$project$Char$Extra$unicodeIsLowerFast = function (c) {
        var code = $elm$core$Char$toCode(c);
        var cString = $elm$core$String$fromChar(c);
        return $author$project$Char$Extra$charCodeIsLower(code) || ((_Utils_eq($elm$core$String$toLower(cString), cString) && (!_Utils_eq($elm$core$String$toUpper(cString), cString))) ? ((code <= 836) || (((838 <= code) && (code <= 8559)) || (((8576 <= code) && (code <= 9423)) || ((9450 <= code) && (code <= 983040))))) : ((code < 43001) ? ((code < 8457) ? ((code < 590) ? (((311 <= code) && (code <= 312)) || (((396 <= code) && (code <= 397)) || (((409 <= code) && (code <= 411)) || (((426 <= code) && (code <= 427)) || (((441 <= code) && (code <= 442)) || (((445 <= code) && (code <= 447)) || ((code === 545) || ((563 <= code) && (code <= 569))))))))) : (((591 <= code) && (code <= 659)) || (((661 <= code) && (code <= 687)) || (((1019 <= code) && (code <= 1020)) || (((1376 <= code) && (code <= 1416)) || (((7424 <= code) && (code <= 7467)) || (((7531 <= code) && (code <= 7543)) || (((7545 <= code) && (code <= 7578)) || (((7829 <= code) && (code <= 7837)) || (code === 7839)))))))))) : ((code < 11376) ? ((code === 8458) || (((8462 <= code) && (code <= 8463)) || ((code === 8467) || ((code === 8495) || ((code === 8500) || ((code === 8505) || (((8508 <= code) && (code <= 8509)) || ((8518 <= code) && (code <= 8521))))))))) : ((code === 11377) || (((11379 <= code) && (code <= 11380)) || (((11382 <= code) && (code <= 11387)) || (((11491 <= code) && (code <= 11492)) || (((42799 <= code) && (code <= 42801)) || (((42865 <= code) && (code <= 42872)) || ((code === 42894) || (((42899 <= code) && (code <= 42901)) || ((code === 42927) || ((_Basics_modBy_fn(2, code) === 1) && ((42963 <= code) && (code <= 42965)))))))))))))) : ((code < 120353) ? ((code < 119994) ? ((code === 43002) || (((43824 <= code) && (code <= 43866)) || (((43872 <= code) && (code <= 43880)) || (((119834 <= code) && (code <= 119859)) || (((119886 <= code) && (code <= 119892)) || (((119894 <= code) && (code <= 119911)) || (((119938 <= code) && (code <= 119963)) || ((119990 <= code) && (code <= 119993))))))))) : ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120015)) || (((120042 <= code) && (code <= 120067)) || (((120094 <= code) && (code <= 120119)) || (((120146 <= code) && (code <= 120171)) || (((120198 <= code) && (code <= 120223)) || (((120250 <= code) && (code <= 120275)) || ((120302 <= code) && (code <= 120327))))))))))) : ((code < 120655) ? (((120354 <= code) && (code <= 120379)) || (((120406 <= code) && (code <= 120431)) || (((120458 <= code) && (code <= 120485)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120545)) || (((120572 <= code) && (code <= 120596)) || (((120598 <= code) && (code <= 120603)) || ((120630 <= code) && (code <= 120654))))))))) : (((120656 <= code) && (code <= 120661)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120719)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120777)) || ((code === 120779) || (((122624 <= code) && (code <= 122633)) || (((122635 <= code) && (code <= 122654)) || ((122661 <= code) && (code <= 122666))))))))))))));
    };
    var $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords = $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn_unwrapped(function (range, name) {
        return $author$project$GrenSyntax$Node_fn(range, $author$project$GrenParserLenient$ifKeywordUnderscoreSuffix(name));
    }, $author$project$Char$Extra$unicodeIsLowerFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
    var $author$project$GrenParserLenient$followedByMultiRecordAccess = function (beforeRecordAccesses) {
        return $author$project$ParserFast$loopWhileSucceedsOntoResultFromParser_fn($author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords), beforeRecordAccesses, F2(function (fieldNode, leftResult) {
            var _v0 = leftResult.a;
            var leftRange = _v0.a;
            var _v1 = fieldNode;
            var fieldRange = _v1.a;
            return {
                b: leftResult.b,
                a: $author$project$GrenSyntax$Node_fn({ c: fieldRange.c, d: leftRange.d }, $author$project$GrenSyntax$RecordAccess_fn(leftResult.a, fieldNode))
            };
        }), $elm$core$Basics$identity);
    };
    var $author$project$ParserFast$lazy = function (thunk) {
        return function (s) {
            var _v0 = thunk(0);
            var parse = _v0;
            return parse(s);
        };
    };
    var $author$project$GrenParserLenient$nameLowercaseUnderscoreSuffixingKeywords = $author$project$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn($author$project$GrenParserLenient$ifKeywordUnderscoreSuffix, $author$project$Char$Extra$unicodeIsLowerFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
    var $author$project$ParserFast$ifFollowedByWhileWithoutLinebreak_fn = function (firstIsOkay, afterFirstIsOkay) {
        return function (s) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s.e, s.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s.n, s.f + 1, s.g, s.H);
                return $author$project$ParserFast$Good_fn(_String_slice_fn(s.e, s1.e, s.g), s1);
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileWithoutLinebreak = F2($author$project$ParserFast$ifFollowedByWhileWithoutLinebreak_fn);
    var $author$project$Char$Extra$unicodeIsUpperFast = function (c) {
        var code = $elm$core$Char$toCode(c);
        return $author$project$Char$Extra$charCodeIsUpper(code) || function () {
            var cString = $elm$core$String$fromChar(c);
            return (_Utils_eq($elm$core$String$toUpper(cString), cString) && (!_Utils_eq($elm$core$String$toLower(cString), cString))) ? ((code <= 8543) || (((8560 <= code) && (code <= 9397)) || ((9424 <= code) && (code <= 983040)))) : ((code < 120015) ? ((code < 8509) ? (((978 <= code) && (code <= 980)) || ((code === 8450) || ((code === 8455) || (((8459 <= code) && (code <= 8461)) || (((8464 <= code) && (code <= 8466)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || ((code === 8484) || ((code === 8488) || (((8490 <= code) && (code <= 8493)) || ((8496 <= code) && (code <= 8499)))))))))))) : (((8510 <= code) && (code <= 8511)) || ((code === 8517) || (((119808 <= code) && (code <= 119833)) || (((119860 <= code) && (code <= 119885)) || (((119912 <= code) && (code <= 119937)) || ((code === 119964) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || ((119982 <= code) && (code <= 119989))))))))))))) : ((code < 120223) ? (((120016 <= code) && (code <= 120041)) || (((120068 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || (((120077 <= code) && (code <= 120084)) || (((120086 <= code) && (code <= 120092)) || (((120120 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || ((120172 <= code) && (code <= 120197)))))))))))) : (((120224 <= code) && (code <= 120249)) || (((120276 <= code) && (code <= 120301)) || (((120328 <= code) && (code <= 120353)) || (((120380 <= code) && (code <= 120405)) || (((120432 <= code) && (code <= 120457)) || (((120488 <= code) && (code <= 120512)) || (((120546 <= code) && (code <= 120570)) || (((120604 <= code) && (code <= 120628)) || (((120662 <= code) && (code <= 120686)) || (((120720 <= code) && (code <= 120744)) || (code === 120778)))))))))))));
        }();
    };
    var $author$project$GrenParserLenient$nameUppercase = $author$project$ParserFast$ifFollowedByWhileWithoutLinebreak_fn($author$project$Char$Extra$unicodeIsUpperFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
    var $author$project$ParserFast$oneOf2Map_fn = function (firstToChoice, _v0, secondToChoice, _v1) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        return function (s) {
            var _v2 = attemptFirst(s);
            if (!_v2.$) {
                var first = _v2.a;
                var s1 = _v2.b;
                return $author$project$ParserFast$Good_fn(firstToChoice(first), s1);
            }
            else {
                var firstCommitted = _v2.a;
                var firstX = _v2.b;
                if (firstCommitted) {
                    return $author$project$ParserFast$Bad_fn(firstCommitted, firstX);
                }
                else {
                    var _v3 = attemptSecond(s);
                    if (!_v3.$) {
                        var second = _v3.a;
                        var s1 = _v3.b;
                        return $author$project$ParserFast$Good_fn(secondToChoice(second), s1);
                    }
                    else {
                        var secondCommitted = _v3.a;
                        var secondX = _v3.b;
                        return secondCommitted ? $author$project$ParserFast$Bad_fn(secondCommitted, secondX) : $author$project$ParserFast$pStepBadBacktracking;
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf2Map = F4($author$project$ParserFast$oneOf2Map_fn);
    var $author$project$ParserFast$orSucceed_fn = function (_v0, fallbackResult) {
        var attempt = _v0;
        return function (s) {
            var _v1 = attempt(s);
            if (!_v1.$) {
                var firstGood = _v1;
                return firstGood;
            }
            else {
                var firstBad = _v1;
                var firstCommitted = firstBad.a;
                return firstCommitted ? firstBad : $author$project$ParserFast$Good_fn(fallbackResult, s);
            }
        };
    }, $author$project$ParserFast$orSucceed = F2($author$project$ParserFast$orSucceed_fn);
    function $author$project$GrenParserLenient$cyclic$maybeDotReferenceExpressionTuple() {
        return $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$ParserFast$oneOf2Map_fn($elm$core$Maybe$Just, $author$project$ParserFast$map2_fn_unwrapped(function (firstName, after) {
            if (after.$ === 1) {
                return _Utils_Tuple2(_List_Nil, firstName);
            }
            else {
                var _v1 = after.a;
                var qualificationAfter = _v1.a;
                var unqualified = _v1.b;
                return _Utils_Tuple2(_List_Cons(firstName, qualificationAfter), unqualified);
            }
        }, $author$project$GrenParserLenient$nameUppercase, $author$project$ParserFast$lazy(function (_v2) {
            return $author$project$GrenParserLenient$cyclic$maybeDotReferenceExpressionTuple();
        })), function (name) {
            return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Nil, name));
        }, $author$project$GrenParserLenient$nameLowercaseUnderscoreSuffixingKeywords)), $elm$core$Maybe$Nothing);
    }
    var $author$project$GrenParserLenient$maybeDotReferenceExpressionTuple = $author$project$GrenParserLenient$cyclic$maybeDotReferenceExpressionTuple();
    $author$project$GrenParserLenient$cyclic$maybeDotReferenceExpressionTuple = function () {
        return $author$project$GrenParserLenient$maybeDotReferenceExpressionTuple;
    };
    var $author$project$GrenParserLenient$expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess = $author$project$GrenParserLenient$followedByMultiRecordAccess($author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, function () {
                if (after.$ === 1) {
                    return $author$project$GrenSyntax$FunctionOrValue_fn(_List_Nil, firstName);
                }
                else {
                    var _v1 = after.a;
                    var qualificationAfter = _v1.a;
                    var unqualified = _v1.b;
                    return $author$project$GrenSyntax$FunctionOrValue_fn(_List_Cons(firstName, qualificationAfter), unqualified);
                }
            }())
        };
    }, $author$project$GrenParserLenient$nameUppercase, $author$project$GrenParserLenient$maybeDotReferenceExpressionTuple));
    var $author$project$GrenSyntax$RecordAccessFunction = function (a) {
        return { $: 21, a: a };
    };
    var $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn = function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
        return function (s0) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.e, s0.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.n, s0.f + 1, s0.g, s0.H);
                var name = _String_slice_fn(s0.e, s1.e, s0.g);
                return resultIsOkay(name) ? $author$project$ParserFast$Good_fn(A2(toResult, {
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, name), s1) : $author$project$ParserFast$pStepBadBacktracking;
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn_unwrapped = function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
        return function (s0) {
            var firstOffset = $author$project$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.e, s0.g);
            if (firstOffset === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.n, s0.f + 1, s0.g, s0.H);
                var name = _String_slice_fn(s0.e, s1.e, s0.g);
                return resultIsOkay(name) ? $author$project$ParserFast$Good_fn(toResult({
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, name), s1) : $author$project$ParserFast$pStepBadBacktracking;
            }
        };
    }, $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak = F4($author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn);
    var $author$project$GrenParserLenient$isNotReserved = function (name) {
        switch (name) {
            case "module":
                return false;
            case "exposing":
                return false;
            case "import":
                return false;
            case "as":
                return false;
            case "if":
                return false;
            case "then":
                return false;
            case "else":
                return false;
            case "let":
                return false;
            case "in":
                return false;
            case "case":
                return false;
            case "of":
                return false;
            case "port":
                return false;
            case "type":
                return false;
            case "where":
                return false;
            default:
                return true;
        }
    };
    var $author$project$GrenParserLenient$nameLowercaseMapWithRange = function (rangeAndNameToResult) {
        return $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn(rangeAndNameToResult, $author$project$Char$Extra$unicodeIsLowerFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $author$project$GrenParserLenient$isNotReserved);
    };
    var $author$project$GrenParserLenient$rangeMoveStartLeftByOneColumn = function (range) {
        return {
            c: range.c,
            d: { o: range.d.o - 1, n: range.d.n }
        };
    };
    var $author$project$GrenParserLenient$expressionRecordAccessFunction = $author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$GrenParserLenient$nameLowercaseMapWithRange(F2(function (range, field) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn($author$project$GrenParserLenient$rangeMoveStartLeftByOneColumn(range), $author$project$GrenSyntax$RecordAccessFunction("." + field))
        };
    })));
    var $author$project$GrenSyntax$Literal = function (a) {
        return { $: 11, a: a };
    };
    var $author$project$ParserFast$loopUntilHelp_fn = function (endParser, element, soFar, reduce, foldedToRes, s0) {
        loopUntilHelp: while (true) {
            var parseEnd = endParser;
            var parseElement = element;
            var _v0 = parseEnd(s0);
            if (!_v0.$) {
                var s1 = _v0.b;
                return $author$project$ParserFast$Good_fn(foldedToRes(soFar), s1);
            }
            else {
                var endCommitted = _v0.a;
                var endX = _v0.b;
                if (endCommitted) {
                    return $author$project$ParserFast$Bad_fn(true, endX);
                }
                else {
                    var _v1 = parseElement(s0);
                    if (!_v1.$) {
                        var elementResult = _v1.a;
                        var s1 = _v1.b;
                        var $temp$endParser = endParser, $temp$element = element, $temp$soFar = A2(reduce, elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                        endParser = $temp$endParser;
                        element = $temp$element;
                        soFar = $temp$soFar;
                        reduce = $temp$reduce;
                        foldedToRes = $temp$foldedToRes;
                        s0 = $temp$s0;
                        continue loopUntilHelp;
                    }
                    else {
                        return $author$project$ParserFast$pStepBadCommitting;
                    }
                }
            }
        }
    }, $author$project$ParserFast$loopUntilHelp_fn_unwrapped = function (endParser, element, soFar, reduce, foldedToRes, s0) {
        loopUntilHelp: while (true) {
            var parseEnd = endParser;
            var parseElement = element;
            var _v0 = parseEnd(s0);
            if (!_v0.$) {
                var s1 = _v0.b;
                return $author$project$ParserFast$Good_fn(foldedToRes(soFar), s1);
            }
            else {
                var endCommitted = _v0.a;
                var endX = _v0.b;
                if (endCommitted) {
                    return $author$project$ParserFast$Bad_fn(true, endX);
                }
                else {
                    var _v1 = parseElement(s0);
                    if (!_v1.$) {
                        var elementResult = _v1.a;
                        var s1 = _v1.b;
                        var $temp$endParser = endParser, $temp$element = element, $temp$soFar = reduce(elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                        endParser = $temp$endParser;
                        element = $temp$element;
                        soFar = $temp$soFar;
                        reduce = $temp$reduce;
                        foldedToRes = $temp$foldedToRes;
                        s0 = $temp$s0;
                        continue loopUntilHelp;
                    }
                    else {
                        return $author$project$ParserFast$pStepBadCommitting;
                    }
                }
            }
        }
    }, $author$project$ParserFast$loopUntilHelp = F6($author$project$ParserFast$loopUntilHelp_fn);
    var $author$project$ParserFast$loopUntil_fn = function (endParser, element, initialFolded, reduce, foldedToRes) {
        return function (s) {
            return $author$project$ParserFast$loopUntilHelp_fn(endParser, element, initialFolded, reduce, foldedToRes, s);
        };
    }, $author$project$ParserFast$loopUntil = F5($author$project$ParserFast$loopUntil_fn);
    var $author$project$ParserFast$whileAtLeast1WithoutLinebreak = function (isGood) {
        return function (s0) {
            var s1 = $author$project$ParserFast$skipWhileWithoutLinebreakHelp_fn(isGood, s0.e, s0.n, s0.f, s0.g, s0.H);
            return (!(s1.e - s0.e)) ? $author$project$ParserFast$pStepBadBacktracking : $author$project$ParserFast$Good_fn(_String_slice_fn(s0.e, s1.e, s0.g), s1);
        };
    };
    var $author$project$GrenParserLenient$singleQuotedStringLiteralAfterDoubleQuote = $author$project$ParserFast$loopUntil_fn($author$project$ParserFast$symbol_fn("\"", 0), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$whileAtLeast1WithoutLinebreak(function (c) {
        switch (c) {
            case "\"":
                return false;
            case "\\":
                return false;
            default:
                return !$author$project$Char$Extra$isUtf16Surrogate(c);
        }
    }), $author$project$ParserFast$symbolFollowedBy_fn("\\", $author$project$GrenParserLenient$escapedCharValueMap($elm$core$String$fromChar))), "", F2(function (extension, soFar) {
        return soFar + (extension + "");
    }), $elm$core$Basics$identity);
    var $author$project$GrenParserLenient$tripleQuotedStringLiteralOfterTripleDoubleQuote = $author$project$ParserFast$loopUntil_fn($author$project$ParserFast$symbol_fn("\"\"\"", 0), $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$symbol_fn("\"", "\""), $author$project$ParserFast$symbolFollowedBy_fn("\\", $author$project$GrenParserLenient$escapedCharValueMap($elm$core$String$fromChar)), $author$project$ParserFast$while(function (c) {
        switch (c) {
            case "\"":
                return false;
            case "\\":
                return false;
            default:
                return !$author$project$Char$Extra$isUtf16Surrogate(c);
        }
    })), "", F2(function (extension, soFar) {
        return soFar + (extension + "");
    }), $elm$core$Basics$identity);
    var $author$project$GrenParserLenient$singleOrTripleQuotedStringLiteralMapWithRange = function (rangeAndStringToRes) {
        return $author$project$ParserFast$symbolFollowedBy_fn("\"", $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, string, endRow, endColumn) {
            return A2(rangeAndStringToRes, {
                c: { o: endColumn, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, string);
        }), $author$project$ParserFast$symbolFollowedBy_fn("\"\"", $author$project$GrenParserLenient$tripleQuotedStringLiteralOfterTripleDoubleQuote), F5(function (startRow, startColumn, string, endRow, endColumn) {
            return A2(rangeAndStringToRes, {
                c: { o: endColumn, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, string);
        }), $author$project$GrenParserLenient$singleQuotedStringLiteralAfterDoubleQuote));
    }, $author$project$GrenParserLenient$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped = function (rangeAndStringToRes) {
        return $author$project$ParserFast$symbolFollowedBy_fn("\"", $author$project$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, string, endRow, endColumn) {
            return rangeAndStringToRes({
                c: { o: endColumn, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, string);
        }), $author$project$ParserFast$symbolFollowedBy_fn("\"\"", $author$project$GrenParserLenient$tripleQuotedStringLiteralOfterTripleDoubleQuote), F5(function (startRow, startColumn, string, endRow, endColumn) {
            return rangeAndStringToRes({
                c: { o: endColumn, n: endRow },
                d: { o: startColumn - 1, n: startRow }
            }, string);
        }), $author$project$GrenParserLenient$singleQuotedStringLiteralAfterDoubleQuote));
    };
    var $author$project$GrenParserLenient$expressionString = $author$project$GrenParserLenient$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped(function (range, string) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$Literal(string))
        };
    });
    var $author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess = $author$project$GrenParserLenient$followedByMultiRecordAccess($author$project$GrenParserLenient$nameLowercaseMapWithRange(F2(function (range, unqualified) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$FunctionOrValue_fn(_List_Nil, unqualified))
        };
    })));
    var $elm$core$Basics$ge = _Utils_ge;
    var $author$project$GrenSyntax$GLSLExpression = function (a) {
        return { $: 23, a: a };
    };
    var $author$project$ParserFast$mapWithRange_fn = function (combineStartAndResult, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var a = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(A2(combineStartAndResult, {
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, a), s1);
            }
            else {
                var committed = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
        };
    }, $author$project$ParserFast$mapWithRange_fn_unwrapped = function (combineStartAndResult, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var a = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(combineStartAndResult({
                    c: { o: s1.f, n: s1.n },
                    d: { o: s0.f, n: s0.n }
                }, a), s1);
            }
            else {
                var committed = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
        };
    }, $author$project$ParserFast$mapWithRange = F2($author$project$ParserFast$mapWithRange_fn);
    var $author$project$GrenParserLenient$glslExpressionAfterOpeningSquareBracket = $author$project$ParserFast$symbolFollowedBy_fn("glsl|", $author$project$ParserFast$mapWithRange_fn_unwrapped(function (range, s) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn({
                c: { o: range.c.o + 2, n: range.c.n },
                d: { o: range.d.o - 6, n: range.d.n }
            }, $author$project$GrenSyntax$GLSLExpression(s))
        };
    }, $author$project$ParserFast$loopUntil_fn($author$project$ParserFast$symbol_fn("|]", 0), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("|", "|"), $author$project$ParserFast$while(function (c) {
        if ("|" === c) {
            return false;
        }
        else {
            return true;
        }
    })), "", F2(function (extension, soFar) {
        return soFar + (extension + "");
    }), $elm$core$Basics$identity)));
    var $author$project$Char$Extra$isLatinAlphaNumOrUnderscoreFast = function (c) {
        var code = $elm$core$Char$toCode(c);
        return $author$project$Char$Extra$charCodeIsLower(code) || ($author$project$Char$Extra$charCodeIsUpper(code) || ($author$project$Char$Extra$charCodeIsDigit(code) || (code === 95)));
    };
    var $author$project$ParserFast$isSubCharAlphaNumOrUnderscore_fn = function (offset, string) {
        return _String_any_fn($author$project$Char$Extra$isLatinAlphaNumOrUnderscoreFast, _String_slice_fn(offset, offset + 1, string));
    }, $author$project$ParserFast$isSubCharAlphaNumOrUnderscore = F2($author$project$ParserFast$isSubCharAlphaNumOrUnderscore_fn);
    var $author$project$ParserFast$keyword_fn = function (kwd, res) {
        var kwdLength = $elm$core$String$length(kwd);
        return function (s) {
            var newOffset = s.e + kwdLength;
            return (_Utils_eq(_String_slice_fn(s.e, newOffset, s.g), kwd) && (!$author$project$ParserFast$isSubCharAlphaNumOrUnderscore_fn(newOffset, s.g))) ? $author$project$ParserFast$Good_fn(res, { f: s.f + kwdLength, H: s.H, e: newOffset, n: s.n, g: s.g }) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$keyword = F2($author$project$ParserFast$keyword_fn);
    var $author$project$ParserFast$keywordFollowedBy_fn = function (kwd, _v0) {
        var parseNext = _v0;
        var kwdLength = $elm$core$String$length(kwd);
        return function (s) {
            var newOffset = s.e + kwdLength;
            return (_Utils_eq(_String_slice_fn(s.e, newOffset, s.g), kwd) && (!$author$project$ParserFast$isSubCharAlphaNumOrUnderscore_fn(newOffset, s.g))) ? $author$project$ParserFast$pStepCommit(parseNext({ f: s.f + kwdLength, H: s.H, e: newOffset, n: s.n, g: s.g })) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$keywordFollowedBy = F2($author$project$ParserFast$keywordFollowedBy_fn);
    var $author$project$GrenParserLenient$literalExpressionOptimisticLayout = $author$project$GrenParserLenient$followedByOptimisticLayout($author$project$GrenParserLenient$expressionString);
    var $author$project$GrenParserLenient$manyWithComments = function (p) {
        return $author$project$ParserFast$loopWhileSucceeds_fn(p, _Utils_Tuple2($author$project$GrenParserLenient$ropeEmpty, _List_Nil), F2(function (pResult, _v0) {
            var commentsSoFar = _v0.a;
            var itemsSoFar = _v0.b;
            return _Utils_Tuple2($author$project$GrenParserLenient$ropePrependTo_fn(pResult.b, commentsSoFar), _List_Cons(pResult.a, itemsSoFar));
        }), function (_v1) {
            var commentsSoFar = _v1.a;
            var itemsSoFar = _v1.b;
            return {
                b: commentsSoFar,
                a: $elm$core$List$reverse(itemsSoFar)
            };
        });
    };
    var $author$project$GrenParserLenient$manyWithCommentsReverse = function (p) {
        return $author$project$ParserFast$loopWhileSucceeds_fn(p, { b: $author$project$GrenParserLenient$ropeEmpty, a: _List_Nil }, F2(function (pResult, soFar) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(pResult.b, soFar.b),
                a: _List_Cons(pResult.a, soFar.a)
            };
        }), function (result) {
            return result;
        });
    };
    var $author$project$ParserFast$map_fn = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var a = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(func(a), s1);
            }
            else {
                var committed = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
        };
    }, $author$project$ParserFast$map = F2($author$project$ParserFast$map_fn);
    var $author$project$ParserFast$map3_fn = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(A3(func, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3_fn_unwrapped = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(func(a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3 = F4($author$project$ParserFast$map3_fn);
    var $author$project$ParserFast$map3WithRange_fn = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(A4(func, {
                            c: { o: s3.f, n: s3.n },
                            d: { o: s0.f, n: s0.n }
                        }, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3WithRange_fn_unwrapped = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(func({
                            c: { o: s3.f, n: s3.n },
                            d: { o: s0.f, n: s0.n }
                        }, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3WithRange = F4($author$project$ParserFast$map3WithRange_fn);
    var $author$project$ParserFast$map3WithStartLocation_fn = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(A4(func, { o: s0.f, n: s0.n }, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var committed = _v3.a;
                var x = _v3.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3WithStartLocation = F4($author$project$ParserFast$map3WithStartLocation_fn);
    var $author$project$ParserFast$map4_fn = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(A4(func, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4_fn_unwrapped = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(func(a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4 = F5($author$project$ParserFast$map4_fn);
    var $author$project$ParserFast$map4OrSucceed_fn = function (func, _v0, _v1, _v2, _v3, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var c1 = _v4.a;
                var x = _v4.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(A4(func, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4OrSucceed_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var c1 = _v4.a;
                var x = _v4.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(func(a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4OrSucceed = F6($author$project$ParserFast$map4OrSucceed_fn);
    var $author$project$ParserFast$map4WithRange_fn = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(A5(func, {
                                c: { o: s4.f, n: s4.n },
                                d: { o: s0.f, n: s0.n }
                            }, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(func({
                                c: { o: s4.f, n: s4.n },
                                d: { o: s0.f, n: s0.n }
                            }, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4WithRange = F5($author$project$ParserFast$map4WithRange_fn);
    var $author$project$ParserFast$map4WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(A5(func, { o: s0.f, n: s0.n }, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        return function (s0) {
            var _v4 = parseA(s0);
            if (_v4.$ === 1) {
                var committed = _v4.a;
                var x = _v4.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v4.a;
                var s1 = _v4.b;
                var _v5 = parseB(s1);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v5.a;
                    var s2 = _v5.b;
                    var _v6 = parseC(s2);
                    if (_v6.$ === 1) {
                        var x = _v6.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v6.a;
                        var s3 = _v6.b;
                        var _v7 = parseD(s3);
                        if (_v7.$ === 1) {
                            var x = _v7.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v7.a;
                            var s4 = _v7.b;
                            return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b, c, d), s4);
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map4WithStartLocation = F5($author$project$ParserFast$map4WithStartLocation_fn);
    var $author$project$ParserFast$map5_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(A5(func, a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(func(a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5 = F6($author$project$ParserFast$map5_fn);
    var $author$project$ParserFast$map6WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        return function (s0) {
            var _v6 = parseA(s0);
            if (_v6.$ === 1) {
                var committed = _v6.a;
                var x = _v6.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v6.a;
                var s1 = _v6.b;
                var _v7 = parseB(s1);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v7.a;
                    var s2 = _v7.b;
                    var _v8 = parseC(s2);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v8.a;
                        var s3 = _v8.b;
                        var _v9 = parseD(s3);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v9.a;
                            var s4 = _v9.b;
                            var _v10 = parseE(s4);
                            if (_v10.$ === 1) {
                                var x = _v10.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v10.a;
                                var s5 = _v10.b;
                                var _v11 = parseF(s5);
                                if (_v11.$ === 1) {
                                    var x = _v11.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v11.a;
                                    var s6 = _v11.b;
                                    return $author$project$ParserFast$Good_fn(A7(func, { o: s0.f, n: s0.n }, a, b, c, d, e, f), s6);
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map6WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        return function (s0) {
            var _v6 = parseA(s0);
            if (_v6.$ === 1) {
                var committed = _v6.a;
                var x = _v6.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v6.a;
                var s1 = _v6.b;
                var _v7 = parseB(s1);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v7.a;
                    var s2 = _v7.b;
                    var _v8 = parseC(s2);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v8.a;
                        var s3 = _v8.b;
                        var _v9 = parseD(s3);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v9.a;
                            var s4 = _v9.b;
                            var _v10 = parseE(s4);
                            if (_v10.$ === 1) {
                                var x = _v10.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v10.a;
                                var s5 = _v10.b;
                                var _v11 = parseF(s5);
                                if (_v11.$ === 1) {
                                    var x = _v11.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v11.a;
                                    var s6 = _v11.b;
                                    return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b, c, d, e, f), s6);
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map6WithStartLocation = F7($author$project$ParserFast$map6WithStartLocation_fn);
    var $author$project$ParserFast$map8WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        var parseH = _v7;
        return function (s0) {
            var _v8 = parseA(s0);
            if (_v8.$ === 1) {
                var committed = _v8.a;
                var x = _v8.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v8.a;
                var s1 = _v8.b;
                var _v9 = parseB(s1);
                if (_v9.$ === 1) {
                    var x = _v9.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v9.a;
                    var s2 = _v9.b;
                    var _v10 = parseC(s2);
                    if (_v10.$ === 1) {
                        var x = _v10.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v10.a;
                        var s3 = _v10.b;
                        var _v11 = parseD(s3);
                        if (_v11.$ === 1) {
                            var x = _v11.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v11.a;
                            var s4 = _v11.b;
                            var _v12 = parseE(s4);
                            if (_v12.$ === 1) {
                                var x = _v12.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v12.a;
                                var s5 = _v12.b;
                                var _v13 = parseF(s5);
                                if (_v13.$ === 1) {
                                    var x = _v13.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v13.a;
                                    var s6 = _v13.b;
                                    var _v14 = parseG(s6);
                                    if (_v14.$ === 1) {
                                        var x = _v14.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v14.a;
                                        var s7 = _v14.b;
                                        var _v15 = parseH(s7);
                                        if (_v15.$ === 1) {
                                            var x = _v15.b;
                                            return $author$project$ParserFast$Bad_fn(true, x);
                                        }
                                        else {
                                            var h = _v15.a;
                                            var s8 = _v15.b;
                                            return $author$project$ParserFast$Good_fn(A9(func, { o: s0.f, n: s0.n }, a, b, c, d, e, f, g, h), s8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map8WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        var parseH = _v7;
        return function (s0) {
            var _v8 = parseA(s0);
            if (_v8.$ === 1) {
                var committed = _v8.a;
                var x = _v8.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v8.a;
                var s1 = _v8.b;
                var _v9 = parseB(s1);
                if (_v9.$ === 1) {
                    var x = _v9.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v9.a;
                    var s2 = _v9.b;
                    var _v10 = parseC(s2);
                    if (_v10.$ === 1) {
                        var x = _v10.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v10.a;
                        var s3 = _v10.b;
                        var _v11 = parseD(s3);
                        if (_v11.$ === 1) {
                            var x = _v11.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v11.a;
                            var s4 = _v11.b;
                            var _v12 = parseE(s4);
                            if (_v12.$ === 1) {
                                var x = _v12.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v12.a;
                                var s5 = _v12.b;
                                var _v13 = parseF(s5);
                                if (_v13.$ === 1) {
                                    var x = _v13.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v13.a;
                                    var s6 = _v13.b;
                                    var _v14 = parseG(s6);
                                    if (_v14.$ === 1) {
                                        var x = _v14.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v14.a;
                                        var s7 = _v14.b;
                                        var _v15 = parseH(s7);
                                        if (_v15.$ === 1) {
                                            var x = _v15.b;
                                            return $author$project$ParserFast$Bad_fn(true, x);
                                        }
                                        else {
                                            var h = _v15.a;
                                            var s8 = _v15.b;
                                            return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b, c, d, e, f, g, h), s8);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map8WithStartLocation = F9($author$project$ParserFast$map8WithStartLocation_fn);
    var $author$project$ParserFast$mapOrSucceed_fn = function (attemptToResult, _v0, fallbackResult) {
        var attempt = _v0;
        return function (s) {
            var _v1 = attempt(s);
            if (!_v1.$) {
                var attemptResult = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(attemptToResult(attemptResult), s1);
            }
            else {
                var firstCommitted = _v1.a;
                return firstCommitted ? $author$project$ParserFast$pStepBadCommitting : $author$project$ParserFast$Good_fn(fallbackResult, s);
            }
        };
    }, $author$project$ParserFast$mapOrSucceed = F3($author$project$ParserFast$mapOrSucceed_fn);
    var $author$project$GrenSyntax$nodeCombine_fn = function (f, a, b) {
        var start = a.a.d;
        var end = b.a.c;
        return $author$project$GrenSyntax$Node_fn({ c: end, d: start }, A2(f, a, b));
    }, $author$project$GrenSyntax$nodeCombine_fn_unwrapped = function (f, a, b) {
        var start = a.a.d;
        var end = b.a.c;
        return $author$project$GrenSyntax$Node_fn({ c: end, d: start }, f(a, b));
    }, $author$project$GrenSyntax$nodeCombine = F3($author$project$GrenSyntax$nodeCombine_fn);
    var $author$project$GrenSyntax$nodeRange = function (_v0) {
        var r = _v0.a;
        return r;
    };
    var $author$project$GrenSyntax$nodeValue = function (_v0) {
        var v = _v0.b;
        return v;
    };
    var $author$project$ParserFast$oneOf2OrSucceed_fn = function (_v0, _v1, fallbackResult) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        return function (s) {
            var _v2 = attemptFirst(s);
            if (!_v2.$) {
                var firstGood = _v2;
                return firstGood;
            }
            else {
                var firstBad = _v2;
                var firstCommitted = firstBad.a;
                if (firstCommitted) {
                    return firstBad;
                }
                else {
                    var _v3 = attemptSecond(s);
                    if (!_v3.$) {
                        var secondGood = _v3;
                        return secondGood;
                    }
                    else {
                        var secondBad = _v3;
                        var secondCommitted = secondBad.a;
                        return secondCommitted ? secondBad : $author$project$ParserFast$Good_fn(fallbackResult, s);
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf2OrSucceed = F3($author$project$ParserFast$oneOf2OrSucceed_fn);
    var $elm$core$Tuple$pair_fn = function (a, b) {
        return _Utils_Tuple2(a, b);
    }, $elm$core$Tuple$pair = F2($elm$core$Tuple$pair_fn);
    var $author$project$GrenSyntax$PatternAs_fn = function (a, b) {
        return { $: 12, a: a, b: b };
    }, $author$project$GrenSyntax$PatternAs = F2($author$project$GrenSyntax$PatternAs_fn);
    var $author$project$GrenSyntax$PatternListCons_fn = function (a, b) {
        return { $: 8, a: a, b: b };
    }, $author$project$GrenSyntax$PatternListCons = F2($author$project$GrenSyntax$PatternListCons_fn);
    var $author$project$GrenSyntax$PatternListExact = function (a) {
        return { $: 9, a: a };
    };
    var $author$project$GrenSyntax$PatternParenthesized = function (a) {
        return { $: 13, a: a };
    };
    var $author$project$GrenSyntax$PatternTuple = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GrenSyntax$PatternUnit = { $: 1 };
    var $author$project$GrenSyntax$PatternVariant_fn = function (a, b) {
        return { $: 11, a: a, b: b };
    }, $author$project$GrenSyntax$PatternVariant = F2($author$project$GrenSyntax$PatternVariant_fn);
    var $author$project$GrenSyntax$PatternIgnored = { $: 0 };
    var $author$project$ParserFast$symbolWithRange_fn = function (str, startAndEndLocationToRes) {
        var strLength = $elm$core$String$length(str);
        return function (s) {
            var newOffset = s.e + strLength;
            if (_Utils_eq(_String_slice_fn(s.e, newOffset, s.g), str)) {
                var newCol = s.f + strLength;
                return $author$project$ParserFast$Good_fn(startAndEndLocationToRes({
                    c: { o: newCol, n: s.n },
                    d: { o: s.f, n: s.n }
                }), { f: newCol, H: s.H, e: newOffset, n: s.n, g: s.g });
            }
            else {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
        };
    }, $author$project$ParserFast$symbolWithRange = F2($author$project$ParserFast$symbolWithRange_fn);
    var $author$project$GrenParserLenient$allPattern = $author$project$ParserFast$symbolWithRange_fn("_", function (range) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternIgnored)
        };
    });
    var $author$project$GrenSyntax$PatternChar = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GrenParserLenient$charPattern = $author$project$GrenParserLenient$characterLiteralMapWithRange_unwrapped(function (range, _char) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternChar(_char))
        };
    });
    var $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn = function (element, reduce, s0) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var _v1 = $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn(element, reduce, s1);
            if (!_v1.$) {
                var tailFolded = _v1.a;
                var s2 = _v1.b;
                return $author$project$ParserFast$Good_fn(A2(reduce, elementResult, tailFolded), s2);
            }
            else {
                var tailBad = _v1;
                var tailCommitted = tailBad.a;
                return tailCommitted ? tailBad : $author$project$ParserFast$Good_fn(elementResult, s1);
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return $author$project$ParserFast$Bad_fn(elementCommitted, x);
        }
    }, $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn_unwrapped = function (element, reduce, s0) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var _v1 = $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn_unwrapped(element, reduce, s1);
            if (!_v1.$) {
                var tailFolded = _v1.a;
                var s2 = _v1.b;
                return $author$project$ParserFast$Good_fn(reduce(elementResult, tailFolded), s2);
            }
            else {
                var tailBad = _v1;
                var tailCommitted = tailBad.a;
                return tailCommitted ? tailBad : $author$project$ParserFast$Good_fn(elementResult, s1);
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return $author$project$ParserFast$Bad_fn(elementCommitted, x);
        }
    }, $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp = F3($author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn);
    var $author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe_fn = function (_v0, taiElement, reduce) {
        var parseLeftestElement = _v0;
        return function (s0) {
            var _v1 = parseLeftestElement(s0);
            if (!_v1.$) {
                var elementResult = _v1.a;
                var s1 = _v1.b;
                var _v2 = $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn(taiElement, reduce, s1);
                if (!_v2.$) {
                    var tailFolded = _v2.a;
                    var s2 = _v2.b;
                    return $author$project$ParserFast$Good_fn(A2(reduce, elementResult, tailFolded), s2);
                }
                else {
                    var tailBad = _v2;
                    var tailCommitted = tailBad.a;
                    return tailCommitted ? tailBad : $author$project$ParserFast$Good_fn(elementResult, s1);
                }
            }
            else {
                var elementCommitted = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(elementCommitted, x);
            }
        };
    }, $author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe_fn_unwrapped = function (_v0, taiElement, reduce) {
        var parseLeftestElement = _v0;
        return function (s0) {
            var _v1 = parseLeftestElement(s0);
            if (!_v1.$) {
                var elementResult = _v1.a;
                var s1 = _v1.b;
                var _v2 = $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafeHelp_fn_unwrapped(taiElement, reduce, s1);
                if (!_v2.$) {
                    var tailFolded = _v2.a;
                    var s2 = _v2.b;
                    return $author$project$ParserFast$Good_fn(reduce(elementResult, tailFolded), s2);
                }
                else {
                    var tailBad = _v2;
                    var tailCommitted = tailBad.a;
                    return tailCommitted ? tailBad : $author$project$ParserFast$Good_fn(elementResult, s1);
                }
            }
            else {
                var elementCommitted = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(elementCommitted, x);
            }
        };
    }, $author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe = F3($author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe_fn);
    var $author$project$GrenSyntax$PatternHex = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GrenSyntax$PatternInt = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn = function (rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$convertIntegerDecimalOrHexadecimal_fn(s0.e, s0.g);
            if (s1.F.e === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var newColumn = s0.f + (s1.F.e - s0.e);
                var range = {
                    c: { o: newColumn, n: s0.n },
                    d: { o: s0.f, n: s0.n }
                };
                return $author$project$ParserFast$Good_fn(function () {
                    var _v0 = s1.T;
                    if (!_v0) {
                        return A2(rangeAndIntDecimalToRes, range, s1.F.U);
                    }
                    else {
                        return A2(rangeAndIntHexadecimalToRes, range, s1.F.U);
                    }
                }(), { f: newColumn, H: s0.H, e: s1.F.e, n: s0.n, g: s0.g });
            }
        };
    }, $author$project$ParserFast$integerDecimalOrHexadecimalMapWithRange = F2($author$project$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn);
    var $author$project$GrenParserLenient$numberPart = $author$project$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn(F2(function (range, n) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternInt(n))
        };
    }), F2(function (range, n) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternHex(n))
        };
    }));
    var $author$project$ParserFast$oneOf9_fn = function (_v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8) {
        var attempt0 = _v0;
        var attempt1 = _v1;
        var attempt2 = _v2;
        var attempt3 = _v3;
        var attempt4 = _v4;
        var attempt5 = _v5;
        var attempt6 = _v6;
        var attempt7 = _v7;
        var attempt8 = _v8;
        return function (s) {
            var _v9 = attempt0(s);
            if (!_v9.$) {
                var good = _v9;
                return good;
            }
            else {
                var bad0 = _v9;
                var committed0 = bad0.a;
                if (committed0) {
                    return bad0;
                }
                else {
                    var _v10 = attempt1(s);
                    if (!_v10.$) {
                        var good = _v10;
                        return good;
                    }
                    else {
                        var bad1 = _v10;
                        var committed1 = bad1.a;
                        if (committed1) {
                            return bad1;
                        }
                        else {
                            var _v11 = attempt2(s);
                            if (!_v11.$) {
                                var good = _v11;
                                return good;
                            }
                            else {
                                var bad2 = _v11;
                                var committed2 = bad2.a;
                                if (committed2) {
                                    return bad2;
                                }
                                else {
                                    var _v12 = attempt3(s);
                                    if (!_v12.$) {
                                        var good = _v12;
                                        return good;
                                    }
                                    else {
                                        var bad3 = _v12;
                                        var committed3 = bad3.a;
                                        if (committed3) {
                                            return bad3;
                                        }
                                        else {
                                            var _v13 = attempt4(s);
                                            if (!_v13.$) {
                                                var good = _v13;
                                                return good;
                                            }
                                            else {
                                                var bad4 = _v13;
                                                var committed4 = bad4.a;
                                                if (committed4) {
                                                    return bad4;
                                                }
                                                else {
                                                    var _v14 = attempt5(s);
                                                    if (!_v14.$) {
                                                        var good = _v14;
                                                        return good;
                                                    }
                                                    else {
                                                        var bad5 = _v14;
                                                        var committed5 = bad5.a;
                                                        if (committed5) {
                                                            return bad5;
                                                        }
                                                        else {
                                                            var _v15 = attempt6(s);
                                                            if (!_v15.$) {
                                                                var good = _v15;
                                                                return good;
                                                            }
                                                            else {
                                                                var bad6 = _v15;
                                                                var committed6 = bad6.a;
                                                                if (committed6) {
                                                                    return bad6;
                                                                }
                                                                else {
                                                                    var _v16 = attempt7(s);
                                                                    if (!_v16.$) {
                                                                        var good = _v16;
                                                                        return good;
                                                                    }
                                                                    else {
                                                                        var bad7 = _v16;
                                                                        var committed7 = bad7.a;
                                                                        if (committed7) {
                                                                            return bad7;
                                                                        }
                                                                        else {
                                                                            var _v17 = attempt8(s);
                                                                            if (!_v17.$) {
                                                                                var good = _v17;
                                                                                return good;
                                                                            }
                                                                            else {
                                                                                var bad8 = _v17;
                                                                                var committed8 = bad8.a;
                                                                                return committed8 ? bad8 : $author$project$ParserFast$pStepBadBacktracking;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf9 = F9($author$project$ParserFast$oneOf9_fn);
    var $author$project$GrenParserLenient$patternListEmpty = $author$project$GrenSyntax$PatternListExact(_List_Nil);
    function $author$project$GrenParserLenient$cyclic$maybeDotNamesUppercaseTuple() {
        return $author$project$ParserFast$map2OrSucceed_fn_unwrapped(function (firstName, afterFirstName) {
            if (afterFirstName.$ === 1) {
                return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Nil, firstName));
            }
            else {
                var _v1 = afterFirstName.a;
                var qualificationAfter = _v1.a;
                var unqualified = _v1.b;
                return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Cons(firstName, qualificationAfter), unqualified));
            }
        }, $author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$GrenParserLenient$nameUppercase), $author$project$ParserFast$lazy(function (_v2) {
            return $author$project$GrenParserLenient$cyclic$maybeDotNamesUppercaseTuple();
        }), $elm$core$Maybe$Nothing);
    }
    var $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple = $author$project$GrenParserLenient$cyclic$maybeDotNamesUppercaseTuple();
    $author$project$GrenParserLenient$cyclic$maybeDotNamesUppercaseTuple = function () {
        return $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple;
    };
    var $author$project$GrenParserLenient$qualifiedNameRefNode = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
        return $author$project$GrenSyntax$Node_fn(range, function () {
            if (after.$ === 1) {
                return { ag: _List_Nil, q: firstName };
            }
            else {
                var _v1 = after.a;
                var qualificationAfter = _v1.a;
                var unqualified = _v1.b;
                return {
                    ag: _List_Cons(firstName, qualificationAfter),
                    q: unqualified
                };
            }
        }());
    }, $author$project$GrenParserLenient$nameUppercase, $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple);
    var $author$project$GrenParserLenient$qualifiedPatternWithoutConsumeArgs = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternVariant_fn(function () {
                if (after.$ === 1) {
                    return { ag: _List_Nil, q: firstName };
                }
                else {
                    var _v1 = after.a;
                    var qualificationAfter = _v1.a;
                    var unqualified = _v1.b;
                    return {
                        ag: _List_Cons(firstName, qualificationAfter),
                        q: unqualified
                    };
                }
            }(), _List_Nil))
        };
    }, $author$project$GrenParserLenient$nameUppercase, $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple);
    var $author$project$GrenSyntax$PatternRecord = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GrenParserLenient$recordPattern = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeElements, elements) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(elements.b, commentsBeforeElements),
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternRecord(elements.a))
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("{", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("}", { b: $author$project$GrenParserLenient$ropeEmpty, a: _List_Nil }), $author$project$ParserFast$followedBySymbol_fn("}", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeHead, head, commentsAfterHead, tail) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterHead, commentsBeforeHead)),
            a: _List_Cons(head, tail.a)
        };
    }, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeName, commentsWithExtraComma, name, afterName) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(afterName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBeforeName)),
            a: name
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments)))))));
    var $author$project$GrenSyntax$PatternString = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GrenParserLenient$stringPattern = $author$project$GrenParserLenient$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped(function (range, string) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternString(string))
        };
    });
    var $author$project$GrenSyntax$PatternVariable = function (a) {
        return { $: 10, a: a };
    };
    var $author$project$GrenParserLenient$varPattern = $author$project$GrenParserLenient$nameLowercaseMapWithRange(F2(function (range, _var) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternVariable(_var))
        };
    }));
    function $author$project$GrenParserLenient$cyclic$composablePattern() {
        return $author$project$ParserFast$oneOf9_fn($author$project$GrenParserLenient$varPattern, $author$project$GrenParserLenient$cyclic$qualifiedPatternWithConsumeArgs(), $author$project$GrenParserLenient$allPattern, $author$project$GrenParserLenient$cyclic$parensPattern(), $author$project$GrenParserLenient$recordPattern, $author$project$GrenParserLenient$stringPattern, $author$project$GrenParserLenient$cyclic$listPattern(), $author$project$GrenParserLenient$numberPart, $author$project$GrenParserLenient$charPattern);
    }
    function $author$project$GrenParserLenient$cyclic$qualifiedPatternWithConsumeArgs() {
        return $author$project$ParserFast$map3_fn_unwrapped(function (_v6, afterStartName, argsReverse) {
            var nameRange = _v6.a;
            var name = _v6.b;
            var range = function () {
                var _v7 = argsReverse.a;
                if (!_v7.b) {
                    return nameRange;
                }
                else {
                    var _v8 = _v7.a;
                    var lastArgRange = _v8.a;
                    return { c: lastArgRange.c, d: nameRange.d };
                }
            }();
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(argsReverse.b, afterStartName),
                a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternVariant_fn(name, $elm$core$List$reverse(argsReverse.a)))
            };
        }, $author$project$GrenParserLenient$qualifiedNameRefNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$ParserFast$map2_fn_unwrapped(function (arg, commentsAfterArg) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterArg, arg.b),
                a: arg.a
            };
        }, $author$project$GrenParserLenient$cyclic$patternNotSpaceSeparated(), $author$project$GrenParserLenient$whitespaceAndComments)));
    }
    function $author$project$GrenParserLenient$cyclic$patternNotSpaceSeparated() {
        return $author$project$ParserFast$oneOf9_fn($author$project$GrenParserLenient$varPattern, $author$project$GrenParserLenient$qualifiedPatternWithoutConsumeArgs, $author$project$GrenParserLenient$allPattern, $author$project$GrenParserLenient$cyclic$parensPattern(), $author$project$GrenParserLenient$recordPattern, $author$project$GrenParserLenient$stringPattern, $author$project$GrenParserLenient$cyclic$listPattern(), $author$project$GrenParserLenient$numberPart, $author$project$GrenParserLenient$charPattern);
    }
    function $author$project$GrenParserLenient$cyclic$listPattern() {
        return $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeElements, maybeElements) {
            if (maybeElements.$ === 1) {
                return {
                    b: commentsBeforeElements,
                    a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenParserLenient$patternListEmpty)
                };
            }
            else {
                var elements = maybeElements.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(elements.b, commentsBeforeElements),
                    a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PatternListExact(elements.a))
                };
            }
        }, $author$project$ParserFast$symbolFollowedBy_fn("[", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("]", $elm$core$Maybe$Nothing), $author$project$ParserFast$followedBySymbol_fn("]", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeHead, head, commentsAfterHead, tail) {
            return $elm$core$Maybe$Just({
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterHead, $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(head.b, commentsBeforeHead))),
                a: _List_Cons(head.a, tail.a)
            });
        }, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$pattern(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, v, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(v.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore))),
                a: v.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$pattern(), $author$project$GrenParserLenient$whitespaceAndComments)))))));
    }
    function $author$project$GrenParserLenient$cyclic$parensPattern() {
        return $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeHead, contentResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(contentResult.b, commentsBeforeHead),
                a: $author$project$GrenSyntax$Node_fn({
                    c: range.c,
                    d: { o: range.d.o - 1, n: range.d.n }
                }, contentResult.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $author$project$GrenSyntax$PatternUnit }), $author$project$ParserFast$map3_fn_unwrapped(function (headResult, commentsAfterHead, tailResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tailResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterHead, headResult.b)),
                a: function () {
                    var _v3 = tailResult.a;
                    if (_v3.$ === 1) {
                        return $author$project$GrenSyntax$PatternParenthesized(headResult.a);
                    }
                    else {
                        var secondAndMaybeThirdPart = _v3.a;
                        var _v4 = secondAndMaybeThirdPart.cd;
                        if (_v4.$ === 1) {
                            return $author$project$GrenSyntax$PatternTuple(_List_fromArray([headResult.a, secondAndMaybeThirdPart.bz]));
                        }
                        else {
                            var thirdPart = _v4.a;
                            return $author$project$GrenSyntax$PatternTuple(_List_fromArray([headResult.a, secondAndMaybeThirdPart.bz, thirdPart]));
                        }
                    }
                }()
            };
        }, $author$project$GrenParserLenient$cyclic$pattern(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBefore, secondPart, commentsAfter, maybeThirdPart) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeThirdPart.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(secondPart.b, commentsBefore))),
                a: $elm$core$Maybe$Just({ cd: maybeThirdPart.a, bz: secondPart.a })
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$pattern(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, thirdPart, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(thirdPart.b, commentsBefore)),
                a: $elm$core$Maybe$Just(thirdPart.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$pattern(), $author$project$GrenParserLenient$whitespaceAndComments)))))))))));
    }
    function $author$project$GrenParserLenient$cyclic$pattern() {
        return $author$project$ParserFast$map2_fn_unwrapped(function (leftMaybeConsed, maybeAsExtension) {
            if (maybeAsExtension.$ === 1) {
                return leftMaybeConsed;
            }
            else {
                var asExtension = maybeAsExtension.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(asExtension.b, leftMaybeConsed.b),
                    a: $author$project$GrenSyntax$nodeCombine_fn($author$project$GrenSyntax$PatternAs, leftMaybeConsed.a, asExtension.a)
                };
            }
        }, $author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe_fn_unwrapped($author$project$ParserFast$map2_fn_unwrapped(function (startPatternResult, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, startPatternResult.b),
                a: startPatternResult.a
            };
        }, $author$project$ParserFast$lazy(function (_v1) {
            return $author$project$GrenParserLenient$cyclic$composablePattern();
        }), $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("::", $author$project$ParserFast$map3_fn_unwrapped(function (commentsAfterCons, patternResult, commentsAfterTailSubPattern) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterTailSubPattern, $author$project$GrenParserLenient$ropePrependTo_fn(patternResult.b, commentsAfterCons)),
                a: patternResult.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$lazy(function (_v2) {
            return $author$project$GrenParserLenient$cyclic$composablePattern();
        }), $author$project$GrenParserLenient$whitespaceAndComments)), function (consed, afterCons) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(afterCons.b, consed.b),
                a: $author$project$GrenSyntax$nodeCombine_fn($author$project$GrenSyntax$PatternListCons, consed.a, afterCons.a)
            };
        }), $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$keywordFollowedBy_fn("as", $author$project$ParserFast$map2_fn_unwrapped(function (commentsAfterAs, name) {
            return $elm$core$Maybe$Just({ b: commentsAfterAs, a: name });
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords)), $elm$core$Maybe$Nothing));
    }
    var $author$project$GrenParserLenient$composablePattern = $author$project$GrenParserLenient$cyclic$composablePattern();
    $author$project$GrenParserLenient$cyclic$composablePattern = function () {
        return $author$project$GrenParserLenient$composablePattern;
    };
    var $author$project$GrenParserLenient$qualifiedPatternWithConsumeArgs = $author$project$GrenParserLenient$cyclic$qualifiedPatternWithConsumeArgs();
    $author$project$GrenParserLenient$cyclic$qualifiedPatternWithConsumeArgs = function () {
        return $author$project$GrenParserLenient$qualifiedPatternWithConsumeArgs;
    };
    var $author$project$GrenParserLenient$patternNotSpaceSeparated = $author$project$GrenParserLenient$cyclic$patternNotSpaceSeparated();
    $author$project$GrenParserLenient$cyclic$patternNotSpaceSeparated = function () {
        return $author$project$GrenParserLenient$patternNotSpaceSeparated;
    };
    var $author$project$GrenParserLenient$listPattern = $author$project$GrenParserLenient$cyclic$listPattern();
    $author$project$GrenParserLenient$cyclic$listPattern = function () {
        return $author$project$GrenParserLenient$listPattern;
    };
    var $author$project$GrenParserLenient$parensPattern = $author$project$GrenParserLenient$cyclic$parensPattern();
    $author$project$GrenParserLenient$cyclic$parensPattern = function () {
        return $author$project$GrenParserLenient$parensPattern;
    };
    var $author$project$GrenParserLenient$pattern = $author$project$GrenParserLenient$cyclic$pattern();
    $author$project$GrenParserLenient$cyclic$pattern = function () {
        return $author$project$GrenParserLenient$pattern;
    };
    var $author$project$GrenParserLenient$untilWithComments_fn = function (end, element) {
        return $author$project$ParserFast$loopUntil_fn(end, element, _Utils_Tuple2($author$project$GrenParserLenient$ropeEmpty, _List_Nil), F2(function (pResult, _v0) {
            var commentsSoFar = _v0.a;
            var itemsSoFar = _v0.b;
            return _Utils_Tuple2($author$project$GrenParserLenient$ropePrependTo_fn(pResult.b, commentsSoFar), _List_Cons(pResult.a, itemsSoFar));
        }), function (_v1) {
            var commentsSoFar = _v1.a;
            var itemsSoFar = _v1.b;
            return {
                b: commentsSoFar,
                a: $elm$core$List$reverse(itemsSoFar)
            };
        });
    }, $author$project$GrenParserLenient$untilWithComments = F2($author$project$GrenParserLenient$untilWithComments_fn);
    var $author$project$GrenParserLenient$parameterPatternsEquals = $author$project$GrenParserLenient$untilWithComments_fn($author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("=", 0), $author$project$ParserFast$symbol_fn("->", 0)), $author$project$ParserFast$map2_fn_unwrapped(function (patternResult, commentsAfterPattern) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterPattern, patternResult.b),
            a: patternResult.a
        };
    }, $author$project$GrenParserLenient$patternNotSpaceSeparated, $author$project$GrenParserLenient$whitespaceAndComments));
    var $elm$core$Basics$composeL_fn = function (g, f, x) {
        return g(f(x));
    }, $elm$core$Basics$composeL = F3($elm$core$Basics$composeL_fn);
    var $elm$core$List$all_fn = function (isOkay, list) {
        all: while (true) {
            if (!list.b) {
                return true;
            }
            else {
                var x = list.a;
                if (!isOkay(x)) {
                    return false;
                }
                list = list.b;
                continue all;
            }
        }
    }, $elm$core$List$all = F2($elm$core$List$all_fn);
    var $author$project$ParserFast$columnIndentAndThen = function (callback) {
        return function (s) {
            var _v0 = A2(callback, s.f, s.H);
            var parse = _v0;
            return parse(s);
        };
    }, $author$project$ParserFast$columnIndentAndThen_unwrapped = function (callback) {
        return function (s) {
            var _v0 = callback(s.f, s.H);
            var parse = _v0;
            return parse(s);
        };
    };
    var $author$project$GrenParserLenient$positivelyIndentedFollowedBy = function (nextParser) {
        return $author$project$ParserFast$columnIndentAndThen_unwrapped(function (column, indent) {
            return ((column > 1) && $elm$core$List$all_fn(function (nestedIndent) {
                return !_Utils_eq(column, nestedIndent);
            }, indent)) ? nextParser : $author$project$ParserFast$problem;
        });
    };
    var $author$project$GrenParserLenient$referenceOrNumberExpression = $author$project$ParserFast$oneOf3_fn($author$project$GrenParserLenient$expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess, $author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess, $author$project$GrenParserLenient$expressionNumber);
    var $author$project$ParserFast$symbolBacktrackableFollowedBy_fn = function (str, _v0) {
        var parseNext = _v0;
        var strLength = $elm$core$String$length(str);
        return function (s) {
            var newOffset = s.e + strLength;
            return _Utils_eq(_String_slice_fn(s.e, newOffset, s.g), str) ? parseNext({ f: s.f + strLength, H: s.H, e: newOffset, n: s.n, g: s.g }) : $author$project$ParserFast$pStepBadBacktracking;
        };
    }, $author$project$ParserFast$symbolBacktrackableFollowedBy = F2($author$project$ParserFast$symbolBacktrackableFollowedBy_fn);
    var $author$project$ParserFast$symbolWithEndLocation_fn = function (str, endLocationToRes) {
        var strLength = $elm$core$String$length(str);
        return function (s) {
            var newOffset = s.e + strLength;
            if (_Utils_eq(_String_slice_fn(s.e, newOffset, s.g), str)) {
                var newCol = s.f + strLength;
                return $author$project$ParserFast$Good_fn(endLocationToRes({ o: newCol, n: s.n }), { f: newCol, H: s.H, e: newOffset, n: s.n, g: s.g });
            }
            else {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
        };
    }, $author$project$ParserFast$symbolWithEndLocation = F2($author$project$ParserFast$symbolWithEndLocation_fn);
    var $author$project$GrenParserLenient$topIndentedFollowedBy = function (nextParser) {
        return $author$project$ParserFast$columnIndentAndThen_unwrapped(function (column, indent) {
            if (!indent.b) {
                return (column === 1) ? nextParser : $author$project$ParserFast$problem;
            }
            else {
                var highestIndent = indent.a;
                return (!(column - highestIndent)) ? nextParser : $author$project$ParserFast$problem;
            }
        });
    };
    var $author$project$GrenParserLenient$FieldsAfterName = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenParserLenient$RecordExtensionExpressionAfterName = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$TypeAnnotationConstruct_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$GrenSyntax$TypeAnnotationConstruct = F2($author$project$GrenSyntax$TypeAnnotationConstruct_fn);
    var $author$project$GrenSyntax$TypeAnnotationFunction_fn = function (a, b) {
        return { $: 6, a: a, b: b };
    }, $author$project$GrenSyntax$TypeAnnotationFunction = F2($author$project$GrenSyntax$TypeAnnotationFunction_fn);
    var $author$project$GrenSyntax$TypeAnnotationRecord = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GrenSyntax$TypeAnnotationRecordExtension_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $author$project$GrenSyntax$TypeAnnotationRecordExtension = F2($author$project$GrenSyntax$TypeAnnotationRecordExtension_fn);
    var $author$project$GrenSyntax$TypeAnnotationTupled = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GrenSyntax$TypeAnnotationUnit = { $: 2 };
    var $author$project$ParserFast$map5WithRange_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(A6(func, {
                                    c: { o: s5.f, n: s5.n },
                                    d: { o: s0.f, n: s0.n }
                                }, a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(func({
                                    c: { o: s5.f, n: s5.n },
                                    d: { o: s0.f, n: s0.n }
                                }, a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5WithRange = F6($author$project$ParserFast$map5WithRange_fn);
    var $author$project$ParserFast$oneOf4_fn = function (_v0, _v1, _v2, _v3) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        var attemptThird = _v2;
        var attemptFourth = _v3;
        return function (s) {
            var _v4 = attemptFirst(s);
            if (!_v4.$) {
                var firstGood = _v4;
                return firstGood;
            }
            else {
                var firstBad = _v4;
                var firstCommitted = firstBad.a;
                if (firstCommitted) {
                    return firstBad;
                }
                else {
                    var _v5 = attemptSecond(s);
                    if (!_v5.$) {
                        var secondGood = _v5;
                        return secondGood;
                    }
                    else {
                        var secondBad = _v5;
                        var secondCommitted = secondBad.a;
                        if (secondCommitted) {
                            return secondBad;
                        }
                        else {
                            var _v6 = attemptThird(s);
                            if (!_v6.$) {
                                var thirdGood = _v6;
                                return thirdGood;
                            }
                            else {
                                var thirdBad = _v6;
                                var thirdCommitted = thirdBad.a;
                                if (thirdCommitted) {
                                    return thirdBad;
                                }
                                else {
                                    var _v7 = attemptFourth(s);
                                    if (!_v7.$) {
                                        var fourthGood = _v7;
                                        return fourthGood;
                                    }
                                    else {
                                        var fourthBad = _v7;
                                        var fourthCommitted = fourthBad.a;
                                        return fourthCommitted ? fourthBad : $author$project$ParserFast$pStepBadBacktracking;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf4 = F4($author$project$ParserFast$oneOf4_fn);
    var $author$project$GrenParserLenient$typeConstructWithoutArguments = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, startName, afterStartName) {
        var name = function () {
            if (afterStartName.$ === 1) {
                return _Utils_Tuple2(_List_Nil, startName);
            }
            else {
                var _v1 = afterStartName.a;
                var qualificationAfterStartName = _v1.a;
                var unqualified = _v1.b;
                return _Utils_Tuple2(_List_Cons(startName, qualificationAfterStartName), unqualified);
            }
        }();
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$TypeAnnotationConstruct_fn($author$project$GrenSyntax$Node_fn(range, name), _List_Nil))
        };
    }, $author$project$GrenParserLenient$nameUppercase, $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple);
    var $author$project$GrenParserLenient$typeRecordEmpty = $author$project$GrenSyntax$TypeAnnotationRecord(_List_Nil);
    var $author$project$GrenSyntax$TypeAnnotationVariable = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenParserLenient$typeVariable = $author$project$GrenParserLenient$nameLowercaseMapWithRange(F2(function (range, _var) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$TypeAnnotationVariable(_var))
        };
    }));
    function $author$project$GrenParserLenient$cyclic$typeNotFunction() {
        return $author$project$ParserFast$oneOf4_fn($author$project$GrenParserLenient$cyclic$typeParenthesizedOrTupleOrTriple(), $author$project$GrenParserLenient$cyclic$typeConstructWithArgumentsFollowedByWhitespaceAndComments(), $author$project$GrenParserLenient$typeVariable, $author$project$GrenParserLenient$cyclic$typeRecordOrRecordExtension());
    }
    function $author$project$GrenParserLenient$cyclic$typeConstructWithArgumentsFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map3_fn_unwrapped(function (nameNode, commentsAfterName, argsReverse) {
            var _v7 = nameNode;
            var nameRange = _v7.a;
            var range = function () {
                var _v8 = argsReverse.a;
                if (!_v8.b) {
                    return nameRange;
                }
                else {
                    var _v9 = _v8.a;
                    var lastArgRange = _v9.a;
                    return { c: lastArgRange.c, d: nameRange.d };
                }
            }();
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(argsReverse.b, commentsAfterName),
                a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$TypeAnnotationConstruct_fn(nameNode, $elm$core$List$reverse(argsReverse.a)))
            };
        }, $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, startName, afterStartName) {
            var name = function () {
                if (afterStartName.$ === 1) {
                    return _Utils_Tuple2(_List_Nil, startName);
                }
                else {
                    var _v11 = afterStartName.a;
                    var qualificationAfterStartName = _v11.a;
                    var unqualified = _v11.b;
                    return _Utils_Tuple2(_List_Cons(startName, qualificationAfterStartName), unqualified);
                }
            }();
            return $author$project$GrenSyntax$Node_fn(range, name);
        }, $author$project$GrenParserLenient$nameUppercase, $author$project$GrenParserLenient$maybeDotNamesUppercaseTuple), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$GrenParserLenient$positivelyIndentedFollowedBy($author$project$ParserFast$map2_fn_unwrapped(function (typeAnnotationResult, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, typeAnnotationResult.b),
                a: typeAnnotationResult.a
            };
        }, $author$project$GrenParserLenient$cyclic$typeNotSpaceSeparated(), $author$project$GrenParserLenient$whitespaceAndComments))));
    }
    function $author$project$GrenParserLenient$cyclic$typeNotSpaceSeparated() {
        return $author$project$ParserFast$oneOf4_fn($author$project$GrenParserLenient$cyclic$typeParenthesizedOrTupleOrTriple(), $author$project$GrenParserLenient$typeConstructWithoutArguments, $author$project$GrenParserLenient$typeVariable, $author$project$GrenParserLenient$cyclic$typeRecordOrRecordExtension());
    }
    function $author$project$GrenParserLenient$cyclic$typeRecordOrRecordExtension() {
        return $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, afterCurly) {
            if (afterCurly.$ === 1) {
                return {
                    b: commentsBefore,
                    a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenParserLenient$typeRecordEmpty)
                };
            }
            else {
                var afterCurlyResult = afterCurly.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(afterCurlyResult.b, commentsBefore),
                    a: $author$project$GrenSyntax$Node_fn(range, afterCurlyResult.a)
                };
            }
        }, $author$project$ParserFast$symbolFollowedBy_fn("{", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("}", $elm$core$Maybe$Nothing), $author$project$ParserFast$followedBySymbol_fn("}", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeFirstName, firstNameNode, commentsAfterFirstName, afterFirstName) {
            return $elm$core$Maybe$Just({
                b: $author$project$GrenParserLenient$ropePrependTo_fn(afterFirstName.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFirstName, commentsBeforeFirstName)),
                a: function () {
                    var _v6 = afterFirstName.a;
                    if (!_v6.$) {
                        var fields = _v6.a;
                        return $author$project$GrenSyntax$TypeAnnotationRecordExtension_fn(firstNameNode, fields);
                    }
                    else {
                        var fieldsAfterName = _v6.a;
                        return $author$project$GrenSyntax$TypeAnnotationRecord(_List_Cons($author$project$GrenSyntax$nodeCombine_fn($elm$core$Tuple$pair, firstNameNode, fieldsAfterName.c2), fieldsAfterName.dG));
                    }
                }()
            });
        }, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$ParserFast$map3WithRange_fn_unwrapped(function (range, commentsBefore, head, tail) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(head.b, commentsBefore)),
                a: $author$project$GrenParserLenient$RecordExtensionExpressionAfterName($author$project$GrenSyntax$Node_fn(range, _List_Cons(head.a, tail.a)))
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments(), $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, field) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(field.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore)),
                a: field.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments()))))), $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeFirstFieldValue, firstFieldValue, commentsAfterFirstFieldValue, tailFields) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tailFields.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFirstFieldValue, $author$project$GrenParserLenient$ropePrependTo_fn(firstFieldValue.b, commentsBeforeFirstFieldValue))),
                a: $author$project$GrenParserLenient$FieldsAfterName({ c2: firstFieldValue.a, dG: tailFields.a })
            };
        }, $author$project$ParserFast$oneOf2OrSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$type_(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$cyclic$recordFieldsTypeAnnotation()), { b: $author$project$GrenParserLenient$ropeEmpty, a: _List_Nil })))))));
    }
    function $author$project$GrenParserLenient$cyclic$recordFieldsTypeAnnotation() {
        return $author$project$ParserFast$map4_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, head, tail) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(head.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBefore, commentsWithExtraComma))),
                a: _List_Cons(head.a, tail.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments(), $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, field) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(field.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore)),
                a: field.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments()))));
    }
    function $author$project$GrenParserLenient$cyclic$typeParenthesizedOrTupleOrTriple() {
        return $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbolWithEndLocation_fn(")", function (end) {
            return {
                b: $author$project$GrenParserLenient$ropeEmpty,
                a: $author$project$GrenSyntax$Node_fn({
                    c: end,
                    d: { o: end.o - 2, n: end.n }
                }, $author$project$GrenSyntax$TypeAnnotationUnit)
            };
        }), $author$project$ParserFast$map4WithRange_fn_unwrapped(function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, lastToSecondPart) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(lastToSecondPart.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFirstPart, $author$project$GrenParserLenient$ropePrependTo_fn(firstPart.b, commentsBeforeFirstPart))),
                a: $author$project$GrenSyntax$Node_fn({
                    c: rangeAfterOpeningParens.c,
                    d: { o: rangeAfterOpeningParens.d.o - 1, n: rangeAfterOpeningParens.d.n }
                }, function () {
                    var _v2 = lastToSecondPart.a;
                    if (_v2.$ === 1) {
                        var _v3 = firstPart.a;
                        var firstPartType = _v3.b;
                        return firstPartType;
                    }
                    else {
                        var firstAndMaybeThirdPart = _v2.a;
                        var _v4 = firstAndMaybeThirdPart.cd;
                        if (_v4.$ === 1) {
                            return $author$project$GrenSyntax$TypeAnnotationTupled(_List_fromArray([firstPart.a, firstAndMaybeThirdPart.bz]));
                        }
                        else {
                            var thirdPart = _v4.a;
                            return $author$project$GrenSyntax$TypeAnnotationTupled(_List_fromArray([firstPart.a, firstAndMaybeThirdPart.bz, thirdPart]));
                        }
                    }
                }())
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$type_(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBefore, secondPartResult, commentsAfter, maybeThirdPartResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(secondPartResult.b, commentsBefore)),
                a: $elm$core$Maybe$Just({ cd: maybeThirdPartResult.a, bz: secondPartResult.a })
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$type_(), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, thirdPartResult, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(thirdPartResult.b, commentsBefore)),
                a: $elm$core$Maybe$Just(thirdPartResult.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$type_(), $author$project$GrenParserLenient$whitespaceAndComments))))))))));
    }
    function $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map5WithRange_fn_unwrapped(function (range, name, commentsAfterName, commentsAfterColon, value, commentsAfterValue) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterValue, $author$project$GrenParserLenient$ropePrependTo_fn(value.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterColon, commentsAfterName))),
                a: $author$project$GrenSyntax$Node_fn(range, _Utils_Tuple2(name, value.a))
            };
        }, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2OrSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$type_(), $author$project$GrenParserLenient$whitespaceAndComments);
    }
    function $author$project$GrenParserLenient$cyclic$type_() {
        return $author$project$ParserFast$loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe_fn_unwrapped($author$project$ParserFast$map2_fn_unwrapped(function (startType, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, startType.b),
                a: startType.a
            };
        }, $author$project$ParserFast$lazy(function (_v0) {
            return $author$project$GrenParserLenient$cyclic$typeNotFunction();
        }), $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("->", $author$project$ParserFast$map4_fn_unwrapped(function (commentsAfterArrow, commentsWithExtraArrow, typeAnnotationResult, commentsAfterType) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterType, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraArrow, commentsAfterArrow))),
                a: typeAnnotationResult.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("->", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$ParserFast$lazy(function (_v1) {
            return $author$project$GrenParserLenient$cyclic$typeNotFunction();
        }), $author$project$GrenParserLenient$whitespaceAndComments)), function (inType, outType) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(outType.b, inType.b),
                a: $author$project$GrenSyntax$nodeCombine_fn($author$project$GrenSyntax$TypeAnnotationFunction, inType.a, outType.a)
            };
        });
    }
    var $author$project$GrenParserLenient$typeNotFunction = $author$project$GrenParserLenient$cyclic$typeNotFunction();
    $author$project$GrenParserLenient$cyclic$typeNotFunction = function () {
        return $author$project$GrenParserLenient$typeNotFunction;
    };
    var $author$project$GrenParserLenient$typeConstructWithArgumentsFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$typeConstructWithArgumentsFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$typeConstructWithArgumentsFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$typeConstructWithArgumentsFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$typeNotSpaceSeparated = $author$project$GrenParserLenient$cyclic$typeNotSpaceSeparated();
    $author$project$GrenParserLenient$cyclic$typeNotSpaceSeparated = function () {
        return $author$project$GrenParserLenient$typeNotSpaceSeparated;
    };
    var $author$project$GrenParserLenient$typeRecordOrRecordExtension = $author$project$GrenParserLenient$cyclic$typeRecordOrRecordExtension();
    $author$project$GrenParserLenient$cyclic$typeRecordOrRecordExtension = function () {
        return $author$project$GrenParserLenient$typeRecordOrRecordExtension;
    };
    var $author$project$GrenParserLenient$recordFieldsTypeAnnotation = $author$project$GrenParserLenient$cyclic$recordFieldsTypeAnnotation();
    $author$project$GrenParserLenient$cyclic$recordFieldsTypeAnnotation = function () {
        return $author$project$GrenParserLenient$recordFieldsTypeAnnotation;
    };
    var $author$project$GrenParserLenient$typeParenthesizedOrTupleOrTriple = $author$project$GrenParserLenient$cyclic$typeParenthesizedOrTupleOrTriple();
    $author$project$GrenParserLenient$cyclic$typeParenthesizedOrTupleOrTriple = function () {
        return $author$project$GrenParserLenient$typeParenthesizedOrTupleOrTriple;
    };
    var $author$project$GrenParserLenient$typeRecordFieldDefinitionFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$typeRecordFieldDefinitionFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$typeRecordFieldDefinitionFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$type_ = $author$project$GrenParserLenient$cyclic$type_();
    $author$project$GrenParserLenient$cyclic$type_ = function () {
        return $author$project$GrenParserLenient$type_;
    };
    var $author$project$ParserFast$validate_fn = function (isOkay, _v0) {
        var parseA = _v0;
        return function (s0) {
            var _v1 = parseA(s0);
            if (_v1.$ === 1) {
                var committed = _v1.a;
                var x = _v1.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var good = _v1;
                var a = good.a;
                return isOkay(a) ? good : $author$project$ParserFast$pStepBadCommitting;
            }
        };
    }, $author$project$ParserFast$validate = F2($author$project$ParserFast$validate_fn);
    var $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen_fn = function (charAsStringIsOkay, consumedStringToIntermediateOrErr, intermediateToFollowupParser) {
        return function (s0) {
            var src = s0.g;
            var s0Offset = s0.e;
            var consumed = charAsStringIsOkay(_String_slice_fn(s0Offset, s0Offset + 1, src)) ? (charAsStringIsOkay(_String_slice_fn(s0Offset + 1, s0Offset + 2, src)) ? (charAsStringIsOkay(_String_slice_fn(s0Offset + 2, s0Offset + 3, src)) ? {
                br: 3,
                bQ: _String_slice_fn(s0Offset, s0Offset + 3, src)
            } : {
                br: 2,
                bQ: _String_slice_fn(s0Offset, s0Offset + 2, src)
            }) : {
                br: 1,
                bQ: _String_slice_fn(s0Offset, s0Offset + 1, src)
            }) : { br: 0, bQ: "" };
            var _v0 = consumedStringToIntermediateOrErr(consumed.bQ);
            if (!_v0.$) {
                var intermediate = _v0.a;
                var _v1 = intermediateToFollowupParser(intermediate);
                var parseFollowup = _v1;
                return $author$project$ParserFast$pStepCommit(parseFollowup({ f: s0.f + consumed.br, H: s0.H, e: s0Offset + consumed.br, n: s0.n, g: src }));
            }
            else {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
        };
    }, $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen = F3($author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen_fn);
    var $author$project$ParserFast$validateEndColumnIndentation_fn = function (isOkay, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var good = _v1;
                var s1 = good.b;
                return A2(isOkay, s1.f, s1.H) ? good : $author$project$ParserFast$pStepBadCommitting;
            }
            else {
                var bad = _v1;
                return bad;
            }
        };
    }, $author$project$ParserFast$validateEndColumnIndentation_fn_unwrapped = function (isOkay, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var good = _v1;
                var s1 = good.b;
                return isOkay(s1.f, s1.H) ? good : $author$project$ParserFast$pStepBadCommitting;
            }
            else {
                var bad = _v1;
                return bad;
            }
        };
    }, $author$project$ParserFast$validateEndColumnIndentation = F2($author$project$ParserFast$validateEndColumnIndentation_fn);
    var $author$project$GrenParserLenient$endsTopIndented = function (parser) {
        return $author$project$ParserFast$validateEndColumnIndentation_fn_unwrapped(function (column, indent) {
            if (!indent.b) {
                return column === 1;
            }
            else {
                var highestIndent = indent.a;
                return !(column - highestIndent);
            }
        }, parser);
    };
    var $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndented = $author$project$GrenParserLenient$endsTopIndented($author$project$GrenParserLenient$whitespaceAndComments);
    var $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedBy = function (nextParser) {
        return $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, after) {
            return { b: commentsBefore, a: after };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$topIndentedFollowedBy(nextParser));
    };
    var $author$project$ParserFast$changeIndent_fn = function (newIndent, s) {
        return {
            f: s.f,
            H: newIndent(s.H),
            e: s.e,
            n: s.n,
            g: s.g
        };
    }, $author$project$ParserFast$changeIndent = F2($author$project$ParserFast$changeIndent_fn);
    var $author$project$ParserFast$withIndentSetToColumn = function (_v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse($author$project$ParserFast$changeIndent_fn(function (indent) {
                return _List_Cons(s0.f, indent);
            }, s0));
            if (!_v1.$) {
                var a = _v1.a;
                var s1 = _v1.b;
                return $author$project$ParserFast$Good_fn(a, $author$project$ParserFast$changeIndent_fn(function (indent) {
                    return $elm$core$List$drop_fn(1, indent);
                }, s1));
            }
            else {
                var bad = _v1;
                return bad;
            }
        };
    };
    var $author$project$GrenParserLenient$extendedSubExpressionFollowedByWhitespaceAndComments = function (info) {
        return $author$project$ParserFast$loopWhileSucceedsOntoResultFromParser_fn($author$project$GrenParserLenient$infixOperatorAndThen(info), $author$project$GrenParserLenient$cyclic$subExpressionMaybeAppliedFollowedByWhitespaceAndComments(), F2(function (extensionRightResult, leftNodeWithComments) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(extensionRightResult.b, leftNodeWithComments.b),
                a: $author$project$GrenParserLenient$applyExtensionRight_fn(extensionRightResult.a, leftNodeWithComments.a)
            };
        }), $elm$core$Basics$identity);
    };
    var $author$project$GrenParserLenient$extensionRightParser = function (extensionRightInfo) {
        return $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, right) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(right.b, commentsBefore),
                a: { bo: extensionRightInfo.bo, I: right.a, aB: extensionRightInfo.aB }
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$lazy(function (_v7) {
            return $author$project$GrenParserLenient$extendedSubExpressionFollowedByWhitespaceAndComments({ a4: extensionRightInfo.a4, bi: extensionRightInfo.bi });
        }));
    };
    var $author$project$GrenParserLenient$followedByMultiArgumentApplication = function (appliedExpressionParser) {
        return $author$project$ParserFast$map3_fn_unwrapped(function (leftExpressionResult, commentsBeforeExtension, maybeArgsReverse) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeArgsReverse.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBeforeExtension, leftExpressionResult.b)),
                a: function () {
                    var _v4 = maybeArgsReverse.a;
                    if (!_v4.b) {
                        return leftExpressionResult.a;
                    }
                    else {
                        var _v5 = _v4.a;
                        var lastArgRange = _v5.a;
                        var _v6 = leftExpressionResult.a;
                        var leftRange = _v6.a;
                        return $author$project$GrenSyntax$Node_fn({ c: lastArgRange.c, d: leftRange.d }, $author$project$GrenSyntax$Application(_List_Cons(leftExpressionResult.a, $elm$core$List$reverse(maybeArgsReverse.a))));
                    }
                }()
            };
        }, appliedExpressionParser, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$GrenParserLenient$positivelyIndentedFollowedBy($author$project$ParserFast$map2_fn_unwrapped(function (arg, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, arg.b),
                a: arg.a
            };
        }, $author$project$GrenParserLenient$cyclic$subExpression(), $author$project$GrenParserLenient$whitespaceAndComments))));
    };
    var $author$project$GrenParserLenient$infixLeft_fn = function (leftPrecedence, symbol) {
        return {
            aV: $author$project$GrenParserLenient$extensionRightParser({
                a4: function ($) {
                    return $.aV;
                },
                bo: 0,
                aB: symbol,
                bi: function (rightInfo) {
                    return (_Utils_cmp(rightInfo.aX, leftPrecedence) > 0) ? $elm$core$Maybe$Just(rightInfo) : $elm$core$Maybe$Nothing;
                }
            }),
            aX: leftPrecedence,
            aB: symbol
        };
    }, $author$project$GrenParserLenient$infixLeft = F2($author$project$GrenParserLenient$infixLeft_fn);
    var $author$project$GrenParserLenient$infixNonAssociative_fn = function (leftPrecedence, symbol) {
        return {
            aV: $author$project$GrenParserLenient$extensionRightParser({
                a4: function (rightInfo) {
                    return _Utils_eq(rightInfo.aX, leftPrecedence) ? $author$project$ParserFast$problem : rightInfo.aV;
                },
                bo: 2,
                aB: symbol,
                bi: function (rightInfo) {
                    return (_Utils_cmp(rightInfo.aX, leftPrecedence) > -1) ? $elm$core$Maybe$Just(rightInfo) : $elm$core$Maybe$Nothing;
                }
            }),
            aX: leftPrecedence,
            aB: symbol
        };
    }, $author$project$GrenParserLenient$infixNonAssociative = F2($author$project$GrenParserLenient$infixNonAssociative_fn);
    var $author$project$GrenParserLenient$infixOperatorAndThen = function (extensionRightConstraints) {
        var toResult = extensionRightConstraints.bi;
        var subResult = toResult($author$project$GrenParserLenient$cyclic$precedence6Sub());
        var slashResult = toResult($author$project$GrenParserLenient$cyclic$precedence7Slash());
        var questionMarkResult = toResult($author$project$GrenParserLenient$cyclic$precedence8QuestionMark());
        var powResult = toResult($author$project$GrenParserLenient$cyclic$precedence8Pow());
        var orResult = toResult($author$project$GrenParserLenient$cyclic$precedence2Or());
        var neqResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Neq());
        var mulResult = toResult($author$project$GrenParserLenient$cyclic$precedence7Mul());
        var ltResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Lt());
        var leResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Le());
        var keepResult = toResult($author$project$GrenParserLenient$cyclic$precedence5Keep());
        var ignoreResult = toResult($author$project$GrenParserLenient$cyclic$precedence6Ignore());
        var idivResult = toResult($author$project$GrenParserLenient$cyclic$precedence7Idiv());
        var gtResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Gt());
        var geResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Ge());
        var fdivResult = toResult($author$project$GrenParserLenient$cyclic$precedence7Fdiv());
        var eqResult = toResult($author$project$GrenParserLenient$cyclic$precedence4Eq());
        var consResult = toResult($author$project$GrenParserLenient$cyclic$precedence5Cons());
        var composeRResult = toResult($author$project$GrenParserLenient$cyclic$precedence9ComposeR());
        var composeLResult = toResult($author$project$GrenParserLenient$cyclic$precedence9ComposeL());
        var appendResult = toResult($author$project$GrenParserLenient$cyclic$precedence5append());
        var apRResult = toResult($author$project$GrenParserLenient$cyclic$precedence1ApR());
        var apLResult = toResult($author$project$GrenParserLenient$cyclic$precedence1ApL());
        var andResult = toResult($author$project$GrenParserLenient$cyclic$precedence3And());
        var addResult = toResult($author$project$GrenParserLenient$cyclic$precedence6Add());
        return $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen_fn($author$project$GrenParserLenient$isOperatorSymbolCharAsString, function (operator) {
            switch (operator) {
                case "|>":
                    return apRResult;
                case "|":
                    return apRResult;
                case "++":
                    return appendResult;
                case "<|":
                    return apLResult;
                case ">>":
                    return composeRResult;
                case "==":
                    return eqResult;
                case "===":
                    return eqResult;
                case "*":
                    return mulResult;
                case "::":
                    return consResult;
                case "+":
                    return addResult;
                case "-":
                    return subResult;
                case "|.":
                    return ignoreResult;
                case "&&":
                    return andResult;
                case "|=":
                    return keepResult;
                case "<<":
                    return composeLResult;
                case "/=":
                    return neqResult;
                case "!=":
                    return neqResult;
                case "!==":
                    return neqResult;
                case "//":
                    return idivResult;
                case "/":
                    return fdivResult;
                case "</>":
                    return slashResult;
                case "||":
                    return orResult;
                case "<=":
                    return leResult;
                case ">=":
                    return geResult;
                case ">":
                    return gtResult;
                case "<?>":
                    return questionMarkResult;
                case "<":
                    return ltResult;
                case "^":
                    return powResult;
                case "**":
                    return powResult;
                default:
                    return $elm$core$Maybe$Nothing;
            }
        }, extensionRightConstraints.a4);
    };
    var $author$project$GrenParserLenient$infixRight_fn = function (leftPrecedence, symbol) {
        return {
            aV: $author$project$GrenParserLenient$extensionRightParser({
                a4: function ($) {
                    return $.aV;
                },
                bo: 1,
                aB: symbol,
                bi: function (rightInfo) {
                    return (_Utils_cmp(rightInfo.aX, leftPrecedence) > -1) ? $elm$core$Maybe$Just(rightInfo) : $elm$core$Maybe$Nothing;
                }
            }),
            aX: leftPrecedence,
            aB: symbol
        };
    }, $author$project$GrenParserLenient$infixRight = F2($author$project$GrenParserLenient$infixRight_fn);
    function $author$project$GrenParserLenient$cyclic$caseOrUnqualifiedReferenceExpressionMaybeApplied() {
        return $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$cyclic$expressionCaseOfFollowedByOptimisticLayout(), $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));
    }
    function $author$project$GrenParserLenient$cyclic$expressionCaseOfFollowedByOptimisticLayout() {
        return $author$project$ParserFast$map4WithStartLocation_fn_unwrapped(function (start, commentsAfterCase, casedExpressionResult, commentsAfterOf, casesResult) {
            var _v38 = casesResult.a;
            var firstCase = _v38.a;
            var lastToSecondCase = _v38.b;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(casesResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterOf, $author$project$GrenParserLenient$ropePrependTo_fn(casedExpressionResult.b, commentsAfterCase))),
                a: $author$project$GrenSyntax$Node_fn({
                    c: function () {
                        if (lastToSecondCase.b) {
                            var _v40 = lastToSecondCase.a;
                            var _v41 = _v40.b;
                            var lastCaseExpressionRange = _v41.a;
                            return lastCaseExpressionRange.c;
                        }
                        else {
                            var _v42 = firstCase;
                            var _v43 = _v42.b;
                            var firstCaseExpressionRange = _v43.a;
                            return firstCaseExpressionRange.c;
                        }
                    }(),
                    d: start
                }, $author$project$GrenSyntax$CaseExpression({
                    bX: _List_Cons(firstCase, $elm$core$List$reverse(lastToSecondCase)),
                    I: casedExpressionResult.a
                }))
            };
        }, $author$project$ParserFast$keywordFollowedBy_fn("case", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$ParserFast$keywordFollowedBy_fn("of", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$withIndentSetToColumn($author$project$GrenParserLenient$cyclic$caseStatementsFollowedByWhitespaceAndComments()));
    }
    function $author$project$GrenParserLenient$cyclic$caseStatementsFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map5_fn_unwrapped(function (firstCasePatternResult, commentsAfterFirstCasePattern, commentsAfterFirstCaseArrowRight, firstCaseExpressionResult, lastToSecondCase) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(lastToSecondCase.b, $author$project$GrenParserLenient$ropePrependTo_fn(firstCaseExpressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFirstCaseArrowRight, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFirstCasePattern, firstCasePatternResult.b)))),
                a: _Utils_Tuple2(_Utils_Tuple2(firstCasePatternResult.a, firstCaseExpressionResult.a), lastToSecondCase.a)
            };
        }, $author$project$GrenParserLenient$pattern, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2OrSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("->", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$GrenParserLenient$cyclic$caseStatementFollowedByWhitespaceAndComments()));
    }
    function $author$project$GrenParserLenient$cyclic$caseStatementFollowedByWhitespaceAndComments() {
        return $author$project$GrenParserLenient$topIndentedFollowedBy($author$project$ParserFast$map4_fn_unwrapped(function (patternResult, commentsBeforeArrowRight, commentsAfterArrowRight, expr) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(expr.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterArrowRight, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBeforeArrowRight, patternResult.b))),
                a: _Utils_Tuple2(patternResult.a, expr.a)
            };
        }, $author$project$GrenParserLenient$pattern, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$symbolFollowedBy_fn("->", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments()));
    }
    function $author$project$GrenParserLenient$cyclic$listOrGlslExpressionOptimisticLayout() {
        return $author$project$GrenParserLenient$followedByOptimisticLayout($author$project$GrenParserLenient$cyclic$expressionListOrGlsl());
    }
    function $author$project$GrenParserLenient$cyclic$expressionListOrGlsl() {
        return $author$project$ParserFast$symbolFollowedBy_fn("[", $author$project$GrenParserLenient$cyclic$expressionAfterOpeningSquareBracket());
    }
    function $author$project$GrenParserLenient$cyclic$expressionAfterOpeningSquareBracket() {
        return $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$glslExpressionAfterOpeningSquareBracket, $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, elements) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(elements.b, commentsBefore),
                a: $author$project$GrenSyntax$Node_fn({
                    c: range.c,
                    d: { o: range.d.o - 1, n: range.d.n }
                }, elements.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn("]", {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$ListExpr(_List_Nil)
        }), $author$project$ParserFast$followedBySymbol_fn("]", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBeforeHead, head, tail) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(head.b, commentsBeforeHead)),
                a: $author$project$GrenSyntax$ListExpr(_List_Cons(head.a, tail.a))
            };
        }, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, expressionResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore)),
                a: expressionResult.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments()))))))));
    }
    function $author$project$GrenParserLenient$cyclic$recordExpressionFollowedByRecordAccessMaybeApplied() {
        return $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$cyclic$expressionRecordFollowedByRecordAccess());
    }
    function $author$project$GrenParserLenient$cyclic$expressionRecordFollowedByRecordAccess() {
        return $author$project$ParserFast$symbolFollowedBy_fn("{", $author$project$GrenParserLenient$followedByMultiRecordAccess($author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, afterCurly) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(afterCurly.b, commentsBefore),
                a: $author$project$GrenSyntax$Node_fn($author$project$GrenParserLenient$rangeMoveStartLeftByOneColumn(range), afterCurly.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$recordContentsFollowedByCurlyEnd())));
    }
    function $author$project$GrenParserLenient$cyclic$recordContentsFollowedByCurlyEnd() {
        return $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$map5_fn_unwrapped(function (nameNode, commentsAfterName, afterNameBeforeFields, tailFields, commentsBeforeClosingCurly) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsBeforeClosingCurly, $author$project$GrenParserLenient$ropePrependTo_fn(tailFields.b, $author$project$GrenParserLenient$ropePrependTo_fn(afterNameBeforeFields.b, commentsAfterName))),
                a: function () {
                    var _v36 = afterNameBeforeFields.a;
                    switch (_v36.$) {
                        case 0:
                            var firstField = _v36.a;
                            return $author$project$GrenSyntax$RecordUpdateExpression_fn(nameNode, _List_Cons(firstField, tailFields.a));
                        case 1:
                            var firstFieldValue = _v36.a;
                            return $author$project$GrenSyntax$RecordExpr(_List_Cons($author$project$GrenSyntax$nodeCombine_fn($elm$core$Tuple$pair, nameNode, firstFieldValue), tailFields.a));
                        default:
                            return $author$project$GrenSyntax$RecordExpr(_List_Cons($author$project$GrenSyntax$Node_fn($author$project$GrenSyntax$nodeRange(nameNode), _Utils_Tuple2(nameNode, $author$project$GrenSyntax$Node_fn({
                                c: $author$project$GrenSyntax$nodeRange(nameNode).c,
                                d: $author$project$GrenSyntax$nodeRange(nameNode).c
                            }, $author$project$GrenSyntax$FunctionOrValue_fn(_List_Nil, $author$project$GrenSyntax$nodeValue(nameNode))))), tailFields.a));
                    }
                }()
            };
        }, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, setterResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(setterResult.b, commentsBefore),
                a: $author$project$GrenParserLenient$RecordUpdateFirstSetter(setterResult.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$recordSetterNodeFollowedByWhitespaceAndComments())), $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, maybeValueResult) {
            if (maybeValueResult.$ === 1) {
                return {
                    b: commentsBefore,
                    a: $author$project$GrenParserLenient$FieldsFirstValuePunned(0)
                };
            }
            else {
                var expressionResult = maybeValueResult.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, commentsBefore),
                    a: $author$project$GrenParserLenient$FieldsFirstValue(expressionResult.a)
                };
            }
        }, $author$project$ParserFast$oneOf2OrSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$ParserFast$mapOrSucceed_fn($elm$core$Maybe$Just, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $elm$core$Maybe$Nothing))), $author$project$GrenParserLenient$cyclic$recordFields(), $author$project$ParserFast$followedBySymbol_fn("}", $author$project$GrenParserLenient$whitespaceAndComments)), $author$project$ParserFast$symbol_fn("}", {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$RecordExpr(_List_Nil)
        }), $author$project$ParserFast$map2_fn_unwrapped(function (recordFieldsResult, commentsAfterFields) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterFields, recordFieldsResult.b),
                a: $author$project$GrenSyntax$RecordExpr(recordFieldsResult.a)
            };
        }, $author$project$GrenParserLenient$cyclic$recordFields(), $author$project$ParserFast$followedBySymbol_fn("}", $author$project$GrenParserLenient$whitespaceAndComments)));
    }
    function $author$project$GrenParserLenient$cyclic$recordFields() {
        return $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, setterResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(setterResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore)),
                a: setterResult.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$cyclic$recordSetterNodeFollowedByWhitespaceAndComments())));
    }
    function $author$project$GrenParserLenient$cyclic$recordSetterNodeFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map4WithRange_fn_unwrapped(function (range, nameNode, commentsAfterName, commentsAfterEquals, maybeValueResult) {
            if (maybeValueResult.$ === 1) {
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEquals, commentsAfterName),
                    a: $author$project$GrenSyntax$Node_fn(range, _Utils_Tuple2(nameNode, $author$project$GrenSyntax$Node_fn({
                        c: $author$project$GrenSyntax$nodeRange(nameNode).c,
                        d: $author$project$GrenSyntax$nodeRange(nameNode).c
                    }, $author$project$GrenSyntax$FunctionOrValue_fn(_List_Nil, $author$project$GrenSyntax$nodeValue(nameNode)))))
                };
            }
            else {
                var expressionResult = maybeValueResult.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEquals, commentsAfterName)),
                    a: $author$project$GrenSyntax$Node_fn(range, _Utils_Tuple2(nameNode, expressionResult.a))
                };
            }
        }, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf2OrSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$ParserFast$mapOrSucceed_fn($elm$core$Maybe$Just, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $elm$core$Maybe$Nothing));
    }
    function $author$project$GrenParserLenient$cyclic$letOrUnqualifiedReferenceExpressionMaybeApplied() {
        return $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$cyclic$letExpressionFollowedByOptimisticLayout(), $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));
    }
    function $author$project$GrenParserLenient$cyclic$letExpressionFollowedByOptimisticLayout() {
        return $author$project$ParserFast$map3WithStartLocation_fn_unwrapped(function (start, letDeclarationsResult, commentsAfterIn, expressionResult) {
            var _v34 = expressionResult.a;
            var expressionRange = _v34.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterIn, letDeclarationsResult.b)),
                a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: start }, $author$project$GrenSyntax$LetExpression({ b1: letDeclarationsResult.b1, I: expressionResult.a }))
            };
        }, $author$project$ParserFast$withIndentSetToColumn($author$project$ParserFast$keywordFollowedBy_fn("let", $author$project$ParserFast$map2_fn_unwrapped(function (commentsAfterLet, letDeclarationsResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(letDeclarationsResult.b, commentsAfterLet),
                b1: letDeclarationsResult.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$withIndentSetToColumn($author$project$GrenParserLenient$cyclic$letDeclarationsIn())))), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments());
    }
    function $author$project$GrenParserLenient$cyclic$letDeclarationsIn() {
        return $author$project$GrenParserLenient$topIndentedFollowedBy($author$project$ParserFast$map3_fn_unwrapped(function (headLetResult, commentsAfter, tailLetResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tailLetResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, headLetResult.b)),
                a: _List_Cons(headLetResult.a, tailLetResult.a)
            };
        }, $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$cyclic$letFunctionFollowedByOptimisticLayout(), $author$project$GrenParserLenient$cyclic$letDestructuringDeclarationFollowedByOptimisticLayout()), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$untilWithComments_fn($author$project$ParserFast$keyword_fn("in", 0), $author$project$GrenParserLenient$cyclic$letBlockElementFollowedByOptimisticLayout())));
    }
    function $author$project$GrenParserLenient$cyclic$letBlockElementFollowedByOptimisticLayout() {
        return $author$project$GrenParserLenient$topIndentedFollowedBy($author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$cyclic$letFunctionFollowedByOptimisticLayout(), $author$project$GrenParserLenient$cyclic$letDestructuringDeclarationFollowedByOptimisticLayout()));
    }
    function $author$project$GrenParserLenient$cyclic$letFunctionFollowedByOptimisticLayout() {
        return $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$validate_fn(function (result) {
            var _v27 = result.a;
            var letDeclaration = _v27.b;
            if (letDeclaration.$ === 1) {
                return true;
            }
            else {
                var letFunctionDeclaration = letDeclaration.a;
                var _v29 = letFunctionDeclaration.V;
                if (_v29.$ === 1) {
                    return true;
                }
                else {
                    var _v30 = _v29.a;
                    var signature = _v30.b;
                    var _v31 = signature.q;
                    var signatureName = _v31.b;
                    var _v32 = letFunctionDeclaration.R;
                    var implementation = _v32.b;
                    var _v33 = implementation.q;
                    var implementationName = _v33.b;
                    return _Utils_eq(implementationName, signatureName);
                }
            }
        }, $author$project$ParserFast$map6WithStartLocation_fn_unwrapped(function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, expressionResult) {
            if (maybeSignature.$ === 1) {
                var _v24 = expressionResult.a;
                var expressionRange = _v24.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, commentsAfterStartName))),
                    a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, $author$project$GrenSyntax$LetFunction({
                        R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, { W: _arguments.a, I: expressionResult.a, q: startNameNode }),
                        Z: $elm$core$Maybe$Nothing,
                        V: $elm$core$Maybe$Nothing
                    }))
                };
            }
            else {
                var signature = maybeSignature.a;
                var _v25 = signature.at;
                var implementationNameRange = _v25.a;
                var _v26 = expressionResult.a;
                var expressionRange = _v26.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(signature.b, commentsAfterStartName)))),
                    a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, $author$project$GrenSyntax$LetFunction({
                        R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: implementationNameRange.d }, { W: _arguments.a, I: expressionResult.a, q: signature.at }),
                        Z: $elm$core$Maybe$Nothing,
                        V: $elm$core$Maybe$Just($author$project$GrenSyntax$nodeCombine_fn_unwrapped(function (name, value) {
                            return { q: name, D: value };
                        }, startNameNode, signature.D))
                    }))
                };
            }
        }, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
            return $elm$core$Maybe$Just({
                b: $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(implementationName.b, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation))),
                at: implementationName.a,
                D: typeAnnotationResult.a
            });
        }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedBy($author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords), $author$project$GrenParserLenient$whitespaceAndComments, $elm$core$Maybe$Nothing), $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments())), $author$project$ParserFast$map8WithStartLocation_fn_unwrapped(function (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, _arguments, commentsAfterEqual, result) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBetweenTypeAndName, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation)))))),
                a: $author$project$GrenSyntax$Node_fn({
                    c: $author$project$GrenSyntax$nodeRange(result.a).c,
                    d: start
                }, $author$project$GrenSyntax$LetFunction({
                    R: $author$project$GrenSyntax$Node_fn({
                        c: $author$project$GrenSyntax$nodeRange(result.a).c,
                        d: $author$project$GrenSyntax$nodeRange(nameNode).d
                    }, { W: _arguments.a, I: result.a, q: nameNode }),
                    Z: $elm$core$Maybe$Nothing,
                    V: $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn({
                        c: $author$project$GrenSyntax$nodeRange(typeAnnotationResult.a).c,
                        d: start
                    }, {
                        q: $author$project$GrenSyntax$Node_fn({ c: start, d: start }, $author$project$GrenSyntax$nodeValue(nameNode)),
                        D: typeAnnotationResult.a
                    }))
                }))
            };
        }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndented, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments()));
    }
    function $author$project$GrenParserLenient$cyclic$letDestructuringDeclarationFollowedByOptimisticLayout() {
        return $author$project$ParserFast$map4_fn_unwrapped(function (patternResult, commentsAfterPattern, commentsAfterEquals, expressionResult) {
            var _v21 = patternResult.a;
            var patternRange = _v21.a;
            var _v22 = expressionResult.a;
            var destructuredExpressionRange = _v22.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEquals, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterPattern, patternResult.b))),
                a: $author$project$GrenSyntax$Node_fn({ c: destructuredExpressionRange.c, d: patternRange.d }, $author$project$GrenSyntax$LetDestructuring_fn(patternResult.a, expressionResult.a))
            };
        }, $author$project$GrenParserLenient$patternNotSpaceSeparated, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments());
    }
    function $author$project$GrenParserLenient$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied() {
        return $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$cyclic$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess());
    }
    function $author$project$GrenParserLenient$cyclic$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess() {
        return $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$symbolWithEndLocation_fn(")", function (end) {
            return {
                b: $author$project$GrenParserLenient$ropeEmpty,
                a: $author$project$GrenSyntax$Node_fn({
                    c: end,
                    d: { o: end.o - 2, n: end.n }
                }, $author$project$GrenSyntax$UnitExpr)
            };
        }), $author$project$GrenParserLenient$allowedPrefixOperatorFollowedByClosingParensOneOf, $author$project$GrenParserLenient$cyclic$expressionParenthesizedOrTupleOrTripleAfterOpeningParens()));
    }
    function $author$project$GrenParserLenient$cyclic$expressionParenthesizedOrTupleOrTripleAfterOpeningParens() {
        return $author$project$GrenParserLenient$followedByMultiRecordAccess($author$project$ParserFast$map3WithRange_fn_unwrapped(function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, tailParts) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tailParts.b, $author$project$GrenParserLenient$ropePrependTo_fn(firstPart.b, commentsBeforeFirstPart)),
                a: function () {
                    var _v19 = tailParts.a;
                    if (!_v19.$) {
                        return $author$project$GrenSyntax$Node_fn({
                            c: rangeAfterOpeningParens.c,
                            d: { o: rangeAfterOpeningParens.d.o - 1, n: rangeAfterOpeningParens.d.n }
                        }, $author$project$GrenSyntax$ParenthesizedExpression(firstPart.a));
                    }
                    else {
                        var secondPart = _v19.a;
                        var maybeThirdPart = _v19.b;
                        return $author$project$GrenSyntax$Node_fn({
                            c: rangeAfterOpeningParens.c,
                            d: { o: rangeAfterOpeningParens.d.o - 1, n: rangeAfterOpeningParens.d.n }
                        }, function () {
                            if (maybeThirdPart.$ === 1) {
                                return $author$project$GrenSyntax$TupledExpression(_List_fromArray([firstPart.a, secondPart]));
                            }
                            else {
                                var thirdPart = maybeThirdPart.a;
                                return $author$project$GrenSyntax$TupledExpression(_List_fromArray([firstPart.a, secondPart, thirdPart]));
                            }
                        }());
                    }
                }()
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenParserLenient$TupledParenthesized_fn(0, 0)
        }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, partResult, maybeThirdPart) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeThirdPart.b, $author$project$GrenParserLenient$ropePrependTo_fn(partResult.b, commentsBefore)),
                a: $author$project$GrenParserLenient$TupledTwoOrThree_fn(partResult.a, maybeThirdPart.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, partResult) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(partResult.b, commentsBefore),
                a: $elm$core$Maybe$Just(partResult.a)
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments())))))))));
    }
    function $author$project$GrenParserLenient$cyclic$expressionLambdaFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map6WithStartLocation_fn_unwrapped(function (start, commentsAfterBackslash, parameter0, commentsAfterParameter0, parameter1Up, commentsAfterArrow, expressionResult) {
            var _v18 = expressionResult.a;
            var expressionRange = _v18.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(expressionResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterArrow, $author$project$GrenParserLenient$ropePrependTo_fn(parameter1Up.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterParameter0, $author$project$GrenParserLenient$ropePrependTo_fn(parameter0.b, commentsAfterBackslash))))),
                a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: start }, $author$project$GrenSyntax$LambdaExpression({
                    dW: _List_Cons(parameter0.a, parameter1Up.a),
                    I: expressionResult.a
                }))
            };
        }, $author$project$ParserFast$symbolFollowedBy_fn("\\", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$patternNotSpaceSeparated, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$untilWithComments_fn($author$project$ParserFast$oneOf3_fn($author$project$ParserFast$symbol_fn("->", 0), $author$project$ParserFast$symbol_fn("=>", 0), $author$project$ParserFast$symbol_fn(".", 0)), $author$project$ParserFast$map2_fn_unwrapped(function (patternResult, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, patternResult.b),
                a: patternResult.a
            };
        }, $author$project$GrenParserLenient$patternNotSpaceSeparated, $author$project$GrenParserLenient$whitespaceAndComments)), $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments());
    }
    function $author$project$GrenParserLenient$cyclic$ifOrUnqualifiedReferenceExpressionMaybeApplied() {
        return $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$cyclic$expressionIfThenElseFollowedByOptimisticLayout(), $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));
    }
    function $author$project$GrenParserLenient$cyclic$expressionIfThenElseFollowedByOptimisticLayout() {
        return $author$project$ParserFast$map6WithStartLocation_fn_unwrapped(function (start, commentsAfterIf, condition, commentsAfterThen, ifTrue, commentsAfterElse, ifFalse) {
            var _v17 = ifFalse.a;
            var ifFalseRange = _v17.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(ifFalse.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterElse, $author$project$GrenParserLenient$ropePrependTo_fn(ifTrue.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterThen, $author$project$GrenParserLenient$ropePrependTo_fn(condition.b, commentsAfterIf))))),
                a: $author$project$GrenSyntax$Node_fn({ c: ifFalseRange.c, d: start }, $author$project$GrenSyntax$IfBlock_fn(condition.a, ifTrue.a, ifFalse.a))
            };
        }, $author$project$ParserFast$keywordFollowedBy_fn("if", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$keywordFollowedBy_fn("then", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$keywordFollowedBy_fn("->", $author$project$GrenParserLenient$whitespaceAndComments)), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments(), $author$project$ParserFast$keywordFollowedBy_fn("else", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments());
    }
    function $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$map2_fn_unwrapped(function (expressionResult, maybeCases) {
            if (maybeCases.$ === 1) {
                return expressionResult;
            }
            else {
                var cases = maybeCases.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(cases.b, expressionResult.b),
                    a: $author$project$GrenSyntax$Node_fn({
                        c: cases.c,
                        d: $author$project$GrenSyntax$nodeRange(expressionResult.a).d
                    }, $author$project$GrenSyntax$CaseExpression({ bX: cases.bX, I: expressionResult.a }))
                };
            }
        }, $author$project$GrenParserLenient$extendedSubExpressionFollowedByWhitespaceAndComments({
            a4: function ($) {
                return $.aV;
            },
            bi: $elm$core$Maybe$Just
        }), $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$keywordFollowedBy_fn("case", $author$project$ParserFast$map2_fn_unwrapped(function (commentsAfterCase, casesResult) {
            var _v10 = casesResult.a;
            var firstCase = _v10.a;
            var lastToSecondCase = _v10.b;
            return $elm$core$Maybe$Just({
                bX: _List_Cons(firstCase, $elm$core$List$reverse(lastToSecondCase)),
                b: $author$project$GrenParserLenient$ropePrependTo_fn(casesResult.b, commentsAfterCase),
                c: function () {
                    if (lastToSecondCase.b) {
                        var _v12 = lastToSecondCase.a;
                        var _v13 = _v12.b;
                        var lastCaseExpressionRange = _v13.a;
                        return lastCaseExpressionRange.c;
                    }
                    else {
                        var _v14 = firstCase;
                        var _v15 = _v14.b;
                        var firstCaseExpressionRange = _v15.a;
                        return firstCaseExpressionRange.c;
                    }
                }()
            });
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$withIndentSetToColumn($author$project$ParserFast$lazy(function (_v16) {
            return $author$project$GrenParserLenient$cyclic$caseStatementsFollowedByWhitespaceAndComments();
        })))), $elm$core$Maybe$Nothing));
    }
    function $author$project$GrenParserLenient$cyclic$negationOperationOptimisticLayout() {
        return $author$project$GrenParserLenient$followedByOptimisticLayout($author$project$GrenParserLenient$cyclic$expressionNegation());
    }
    function $author$project$GrenParserLenient$cyclic$expressionNegation() {
        return $author$project$ParserFast$symbolBacktrackableFollowedBy_fn("-", $author$project$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
            var _v8 = _String_slice_fn(offset - 2, offset - 1, source);
            switch (_v8) {
                case " ":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case "(":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case ")":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case "}":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case ">":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case "=":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case ",":
                    return $author$project$GrenParserLenient$cyclic$negationAfterMinus();
                case "n":
                    return ((_String_slice_fn(offset - 3, offset - 2, source) === "i") && (!_String_all_fn($author$project$Char$Extra$isLatinAlphaNumOrUnderscoreFast, _String_slice_fn(offset - 4, offset - 3, source)))) ? $author$project$GrenParserLenient$cyclic$negationAfterMinus() : $author$project$ParserFast$problem;
                default:
                    return $author$project$ParserFast$problem;
            }
        }));
    }
    function $author$project$GrenParserLenient$cyclic$referenceOrNumberExpressionMaybeApplied() {
        return $author$project$ParserFast$oneOf3_fn($author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess), $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionUnqualifiedFunctionReferenceFollowedByRecordAccess), $author$project$GrenParserLenient$followedByOptimisticLayout($author$project$GrenParserLenient$expressionNumber));
    }
    function $author$project$GrenParserLenient$cyclic$recordAccessFunctionExpressionMaybeApplied() {
        return $author$project$GrenParserLenient$followedByMultiArgumentApplication($author$project$GrenParserLenient$expressionRecordAccessFunction);
    }
    function $author$project$GrenParserLenient$cyclic$precedence9ComposeL() {
        return $author$project$GrenParserLenient$infixLeft_fn(9, "<<");
    }
    function $author$project$GrenParserLenient$cyclic$precedence8QuestionMark() {
        return $author$project$GrenParserLenient$infixLeft_fn(8, "<?>");
    }
    function $author$project$GrenParserLenient$cyclic$precedence7Mul() {
        return $author$project$GrenParserLenient$infixLeft_fn(7, "*");
    }
    function $author$project$GrenParserLenient$cyclic$precedence7Idiv() {
        return $author$project$GrenParserLenient$infixLeft_fn(7, "//");
    }
    function $author$project$GrenParserLenient$cyclic$precedence7Fdiv() {
        return $author$project$GrenParserLenient$infixLeft_fn(7, "/");
    }
    function $author$project$GrenParserLenient$cyclic$precedence6Sub() {
        return $author$project$GrenParserLenient$infixLeft_fn(6, "-");
    }
    function $author$project$GrenParserLenient$cyclic$precedence6Ignore() {
        return $author$project$GrenParserLenient$infixLeft_fn(6, "|.");
    }
    function $author$project$GrenParserLenient$cyclic$precedence6Add() {
        return $author$project$GrenParserLenient$infixLeft_fn(6, "+");
    }
    function $author$project$GrenParserLenient$cyclic$precedence5Keep() {
        return $author$project$GrenParserLenient$infixLeft_fn(5, "|=");
    }
    function $author$project$GrenParserLenient$cyclic$precedence1ApR() {
        return $author$project$GrenParserLenient$infixLeft_fn(1, "|>");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Neq() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, "/=");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Lt() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, "<");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Le() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, "<=");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Gt() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, ">");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Ge() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, ">=");
    }
    function $author$project$GrenParserLenient$cyclic$precedence4Eq() {
        return $author$project$GrenParserLenient$infixNonAssociative_fn(4, "==");
    }
    function $author$project$GrenParserLenient$cyclic$precedence9ComposeR() {
        return $author$project$GrenParserLenient$infixRight_fn(9, ">>");
    }
    function $author$project$GrenParserLenient$cyclic$precedence8Pow() {
        return $author$project$GrenParserLenient$infixRight_fn(8, "^");
    }
    function $author$project$GrenParserLenient$cyclic$precedence7Slash() {
        return $author$project$GrenParserLenient$infixRight_fn(7, "</>");
    }
    function $author$project$GrenParserLenient$cyclic$precedence5append() {
        return $author$project$GrenParserLenient$infixRight_fn(5, "++");
    }
    function $author$project$GrenParserLenient$cyclic$precedence5Cons() {
        return $author$project$GrenParserLenient$infixRight_fn(5, "::");
    }
    function $author$project$GrenParserLenient$cyclic$precedence3And() {
        return $author$project$GrenParserLenient$infixRight_fn(3, "&&");
    }
    function $author$project$GrenParserLenient$cyclic$precedence2Or() {
        return $author$project$GrenParserLenient$infixRight_fn(2, "||");
    }
    function $author$project$GrenParserLenient$cyclic$precedence1ApL() {
        return $author$project$GrenParserLenient$infixRight_fn(1, "<|");
    }
    function $author$project$GrenParserLenient$cyclic$negationAfterMinus() {
        return $author$project$ParserFast$map_fn(function (subExpressionResult) {
            var _v2 = subExpressionResult.a;
            var subExpressionRange = _v2.a;
            return {
                b: subExpressionResult.b,
                a: $author$project$GrenSyntax$Node_fn({
                    c: subExpressionRange.c,
                    d: { o: subExpressionRange.d.o - 1, n: subExpressionRange.d.n }
                }, $author$project$GrenSyntax$Negation(subExpressionResult.a))
            };
        }, $author$project$GrenParserLenient$cyclic$subExpression());
    }
    function $author$project$GrenParserLenient$cyclic$subExpression() {
        return $author$project$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
            var _v1 = _String_slice_fn(offset, offset + 1, source);
            switch (_v1) {
                case "\"":
                    return $author$project$GrenParserLenient$expressionString;
                case "(":
                    return $author$project$GrenParserLenient$cyclic$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess();
                case "[":
                    return $author$project$GrenParserLenient$cyclic$expressionListOrGlsl();
                case "{":
                    return $author$project$GrenParserLenient$cyclic$expressionRecordFollowedByRecordAccess();
                case ".":
                    return $author$project$GrenParserLenient$expressionRecordAccessFunction;
                case "-":
                    return $author$project$GrenParserLenient$cyclic$expressionNegation();
                case "'":
                    return $author$project$GrenParserLenient$expressionChar;
                default:
                    return $author$project$GrenParserLenient$referenceOrNumberExpression;
            }
        });
    }
    function $author$project$GrenParserLenient$cyclic$subExpressionMaybeAppliedFollowedByWhitespaceAndComments() {
        return $author$project$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
            var _v0 = _String_slice_fn(offset, offset + 1, source);
            switch (_v0) {
                case "\"":
                    return $author$project$GrenParserLenient$literalExpressionOptimisticLayout;
                case "(":
                    return $author$project$GrenParserLenient$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied();
                case "[":
                    return $author$project$GrenParserLenient$cyclic$listOrGlslExpressionOptimisticLayout();
                case "{":
                    return $author$project$GrenParserLenient$cyclic$recordExpressionFollowedByRecordAccessMaybeApplied();
                case "c":
                    return $author$project$GrenParserLenient$cyclic$caseOrUnqualifiedReferenceExpressionMaybeApplied();
                case "\\":
                    return $author$project$GrenParserLenient$cyclic$expressionLambdaFollowedByWhitespaceAndComments();
                case "l":
                    return $author$project$GrenParserLenient$cyclic$letOrUnqualifiedReferenceExpressionMaybeApplied();
                case "i":
                    return $author$project$GrenParserLenient$cyclic$ifOrUnqualifiedReferenceExpressionMaybeApplied();
                case ".":
                    return $author$project$GrenParserLenient$cyclic$recordAccessFunctionExpressionMaybeApplied();
                case "-":
                    return $author$project$GrenParserLenient$cyclic$negationOperationOptimisticLayout();
                case "'":
                    return $author$project$GrenParserLenient$charLiteralExpressionOptimisticLayout;
                default:
                    return $author$project$GrenParserLenient$cyclic$referenceOrNumberExpressionMaybeApplied();
            }
        });
    }
    var $author$project$GrenParserLenient$caseOrUnqualifiedReferenceExpressionMaybeApplied = $author$project$GrenParserLenient$cyclic$caseOrUnqualifiedReferenceExpressionMaybeApplied();
    $author$project$GrenParserLenient$cyclic$caseOrUnqualifiedReferenceExpressionMaybeApplied = function () {
        return $author$project$GrenParserLenient$caseOrUnqualifiedReferenceExpressionMaybeApplied;
    };
    var $author$project$GrenParserLenient$expressionCaseOfFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$expressionCaseOfFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$expressionCaseOfFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$expressionCaseOfFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$caseStatementsFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$caseStatementsFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$caseStatementsFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$caseStatementsFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$caseStatementFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$caseStatementFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$caseStatementFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$caseStatementFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$listOrGlslExpressionOptimisticLayout = $author$project$GrenParserLenient$cyclic$listOrGlslExpressionOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$listOrGlslExpressionOptimisticLayout = function () {
        return $author$project$GrenParserLenient$listOrGlslExpressionOptimisticLayout;
    };
    var $author$project$GrenParserLenient$expressionListOrGlsl = $author$project$GrenParserLenient$cyclic$expressionListOrGlsl();
    $author$project$GrenParserLenient$cyclic$expressionListOrGlsl = function () {
        return $author$project$GrenParserLenient$expressionListOrGlsl;
    };
    var $author$project$GrenParserLenient$expressionAfterOpeningSquareBracket = $author$project$GrenParserLenient$cyclic$expressionAfterOpeningSquareBracket();
    $author$project$GrenParserLenient$cyclic$expressionAfterOpeningSquareBracket = function () {
        return $author$project$GrenParserLenient$expressionAfterOpeningSquareBracket;
    };
    var $author$project$GrenParserLenient$recordExpressionFollowedByRecordAccessMaybeApplied = $author$project$GrenParserLenient$cyclic$recordExpressionFollowedByRecordAccessMaybeApplied();
    $author$project$GrenParserLenient$cyclic$recordExpressionFollowedByRecordAccessMaybeApplied = function () {
        return $author$project$GrenParserLenient$recordExpressionFollowedByRecordAccessMaybeApplied;
    };
    var $author$project$GrenParserLenient$expressionRecordFollowedByRecordAccess = $author$project$GrenParserLenient$cyclic$expressionRecordFollowedByRecordAccess();
    $author$project$GrenParserLenient$cyclic$expressionRecordFollowedByRecordAccess = function () {
        return $author$project$GrenParserLenient$expressionRecordFollowedByRecordAccess;
    };
    var $author$project$GrenParserLenient$recordContentsFollowedByCurlyEnd = $author$project$GrenParserLenient$cyclic$recordContentsFollowedByCurlyEnd();
    $author$project$GrenParserLenient$cyclic$recordContentsFollowedByCurlyEnd = function () {
        return $author$project$GrenParserLenient$recordContentsFollowedByCurlyEnd;
    };
    var $author$project$GrenParserLenient$recordFields = $author$project$GrenParserLenient$cyclic$recordFields();
    $author$project$GrenParserLenient$cyclic$recordFields = function () {
        return $author$project$GrenParserLenient$recordFields;
    };
    var $author$project$GrenParserLenient$recordSetterNodeFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$recordSetterNodeFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$recordSetterNodeFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$recordSetterNodeFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$letOrUnqualifiedReferenceExpressionMaybeApplied = $author$project$GrenParserLenient$cyclic$letOrUnqualifiedReferenceExpressionMaybeApplied();
    $author$project$GrenParserLenient$cyclic$letOrUnqualifiedReferenceExpressionMaybeApplied = function () {
        return $author$project$GrenParserLenient$letOrUnqualifiedReferenceExpressionMaybeApplied;
    };
    var $author$project$GrenParserLenient$letExpressionFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$letExpressionFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$letExpressionFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$letExpressionFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$letDeclarationsIn = $author$project$GrenParserLenient$cyclic$letDeclarationsIn();
    $author$project$GrenParserLenient$cyclic$letDeclarationsIn = function () {
        return $author$project$GrenParserLenient$letDeclarationsIn;
    };
    var $author$project$GrenParserLenient$letBlockElementFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$letBlockElementFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$letBlockElementFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$letBlockElementFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$letFunctionFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$letFunctionFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$letFunctionFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$letFunctionFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$letDestructuringDeclarationFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$letDestructuringDeclarationFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$letDestructuringDeclarationFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$letDestructuringDeclarationFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied = $author$project$GrenParserLenient$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied();
    $author$project$GrenParserLenient$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied = function () {
        return $author$project$GrenParserLenient$tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied;
    };
    var $author$project$GrenParserLenient$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess = $author$project$GrenParserLenient$cyclic$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess();
    $author$project$GrenParserLenient$cyclic$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess = function () {
        return $author$project$GrenParserLenient$expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess;
    };
    var $author$project$GrenParserLenient$expressionParenthesizedOrTupleOrTripleAfterOpeningParens = $author$project$GrenParserLenient$cyclic$expressionParenthesizedOrTupleOrTripleAfterOpeningParens();
    $author$project$GrenParserLenient$cyclic$expressionParenthesizedOrTupleOrTripleAfterOpeningParens = function () {
        return $author$project$GrenParserLenient$expressionParenthesizedOrTupleOrTripleAfterOpeningParens;
    };
    var $author$project$GrenParserLenient$expressionLambdaFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$expressionLambdaFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$expressionLambdaFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$expressionLambdaFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$ifOrUnqualifiedReferenceExpressionMaybeApplied = $author$project$GrenParserLenient$cyclic$ifOrUnqualifiedReferenceExpressionMaybeApplied();
    $author$project$GrenParserLenient$cyclic$ifOrUnqualifiedReferenceExpressionMaybeApplied = function () {
        return $author$project$GrenParserLenient$ifOrUnqualifiedReferenceExpressionMaybeApplied;
    };
    var $author$project$GrenParserLenient$expressionIfThenElseFollowedByOptimisticLayout = $author$project$GrenParserLenient$cyclic$expressionIfThenElseFollowedByOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$expressionIfThenElseFollowedByOptimisticLayout = function () {
        return $author$project$GrenParserLenient$expressionIfThenElseFollowedByOptimisticLayout;
    };
    var $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$expressionFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments;
    };
    var $author$project$GrenParserLenient$negationOperationOptimisticLayout = $author$project$GrenParserLenient$cyclic$negationOperationOptimisticLayout();
    $author$project$GrenParserLenient$cyclic$negationOperationOptimisticLayout = function () {
        return $author$project$GrenParserLenient$negationOperationOptimisticLayout;
    };
    var $author$project$GrenParserLenient$expressionNegation = $author$project$GrenParserLenient$cyclic$expressionNegation();
    $author$project$GrenParserLenient$cyclic$expressionNegation = function () {
        return $author$project$GrenParserLenient$expressionNegation;
    };
    var $author$project$GrenParserLenient$referenceOrNumberExpressionMaybeApplied = $author$project$GrenParserLenient$cyclic$referenceOrNumberExpressionMaybeApplied();
    $author$project$GrenParserLenient$cyclic$referenceOrNumberExpressionMaybeApplied = function () {
        return $author$project$GrenParserLenient$referenceOrNumberExpressionMaybeApplied;
    };
    var $author$project$GrenParserLenient$recordAccessFunctionExpressionMaybeApplied = $author$project$GrenParserLenient$cyclic$recordAccessFunctionExpressionMaybeApplied();
    $author$project$GrenParserLenient$cyclic$recordAccessFunctionExpressionMaybeApplied = function () {
        return $author$project$GrenParserLenient$recordAccessFunctionExpressionMaybeApplied;
    };
    var $author$project$GrenParserLenient$precedence9ComposeL = $author$project$GrenParserLenient$cyclic$precedence9ComposeL();
    $author$project$GrenParserLenient$cyclic$precedence9ComposeL = function () {
        return $author$project$GrenParserLenient$precedence9ComposeL;
    };
    var $author$project$GrenParserLenient$precedence8QuestionMark = $author$project$GrenParserLenient$cyclic$precedence8QuestionMark();
    $author$project$GrenParserLenient$cyclic$precedence8QuestionMark = function () {
        return $author$project$GrenParserLenient$precedence8QuestionMark;
    };
    var $author$project$GrenParserLenient$precedence7Mul = $author$project$GrenParserLenient$cyclic$precedence7Mul();
    $author$project$GrenParserLenient$cyclic$precedence7Mul = function () {
        return $author$project$GrenParserLenient$precedence7Mul;
    };
    var $author$project$GrenParserLenient$precedence7Idiv = $author$project$GrenParserLenient$cyclic$precedence7Idiv();
    $author$project$GrenParserLenient$cyclic$precedence7Idiv = function () {
        return $author$project$GrenParserLenient$precedence7Idiv;
    };
    var $author$project$GrenParserLenient$precedence7Fdiv = $author$project$GrenParserLenient$cyclic$precedence7Fdiv();
    $author$project$GrenParserLenient$cyclic$precedence7Fdiv = function () {
        return $author$project$GrenParserLenient$precedence7Fdiv;
    };
    var $author$project$GrenParserLenient$precedence6Sub = $author$project$GrenParserLenient$cyclic$precedence6Sub();
    $author$project$GrenParserLenient$cyclic$precedence6Sub = function () {
        return $author$project$GrenParserLenient$precedence6Sub;
    };
    var $author$project$GrenParserLenient$precedence6Ignore = $author$project$GrenParserLenient$cyclic$precedence6Ignore();
    $author$project$GrenParserLenient$cyclic$precedence6Ignore = function () {
        return $author$project$GrenParserLenient$precedence6Ignore;
    };
    var $author$project$GrenParserLenient$precedence6Add = $author$project$GrenParserLenient$cyclic$precedence6Add();
    $author$project$GrenParserLenient$cyclic$precedence6Add = function () {
        return $author$project$GrenParserLenient$precedence6Add;
    };
    var $author$project$GrenParserLenient$precedence5Keep = $author$project$GrenParserLenient$cyclic$precedence5Keep();
    $author$project$GrenParserLenient$cyclic$precedence5Keep = function () {
        return $author$project$GrenParserLenient$precedence5Keep;
    };
    var $author$project$GrenParserLenient$precedence1ApR = $author$project$GrenParserLenient$cyclic$precedence1ApR();
    $author$project$GrenParserLenient$cyclic$precedence1ApR = function () {
        return $author$project$GrenParserLenient$precedence1ApR;
    };
    var $author$project$GrenParserLenient$precedence4Neq = $author$project$GrenParserLenient$cyclic$precedence4Neq();
    $author$project$GrenParserLenient$cyclic$precedence4Neq = function () {
        return $author$project$GrenParserLenient$precedence4Neq;
    };
    var $author$project$GrenParserLenient$precedence4Lt = $author$project$GrenParserLenient$cyclic$precedence4Lt();
    $author$project$GrenParserLenient$cyclic$precedence4Lt = function () {
        return $author$project$GrenParserLenient$precedence4Lt;
    };
    var $author$project$GrenParserLenient$precedence4Le = $author$project$GrenParserLenient$cyclic$precedence4Le();
    $author$project$GrenParserLenient$cyclic$precedence4Le = function () {
        return $author$project$GrenParserLenient$precedence4Le;
    };
    var $author$project$GrenParserLenient$precedence4Gt = $author$project$GrenParserLenient$cyclic$precedence4Gt();
    $author$project$GrenParserLenient$cyclic$precedence4Gt = function () {
        return $author$project$GrenParserLenient$precedence4Gt;
    };
    var $author$project$GrenParserLenient$precedence4Ge = $author$project$GrenParserLenient$cyclic$precedence4Ge();
    $author$project$GrenParserLenient$cyclic$precedence4Ge = function () {
        return $author$project$GrenParserLenient$precedence4Ge;
    };
    var $author$project$GrenParserLenient$precedence4Eq = $author$project$GrenParserLenient$cyclic$precedence4Eq();
    $author$project$GrenParserLenient$cyclic$precedence4Eq = function () {
        return $author$project$GrenParserLenient$precedence4Eq;
    };
    var $author$project$GrenParserLenient$precedence9ComposeR = $author$project$GrenParserLenient$cyclic$precedence9ComposeR();
    $author$project$GrenParserLenient$cyclic$precedence9ComposeR = function () {
        return $author$project$GrenParserLenient$precedence9ComposeR;
    };
    var $author$project$GrenParserLenient$precedence8Pow = $author$project$GrenParserLenient$cyclic$precedence8Pow();
    $author$project$GrenParserLenient$cyclic$precedence8Pow = function () {
        return $author$project$GrenParserLenient$precedence8Pow;
    };
    var $author$project$GrenParserLenient$precedence7Slash = $author$project$GrenParserLenient$cyclic$precedence7Slash();
    $author$project$GrenParserLenient$cyclic$precedence7Slash = function () {
        return $author$project$GrenParserLenient$precedence7Slash;
    };
    var $author$project$GrenParserLenient$precedence5append = $author$project$GrenParserLenient$cyclic$precedence5append();
    $author$project$GrenParserLenient$cyclic$precedence5append = function () {
        return $author$project$GrenParserLenient$precedence5append;
    };
    var $author$project$GrenParserLenient$precedence5Cons = $author$project$GrenParserLenient$cyclic$precedence5Cons();
    $author$project$GrenParserLenient$cyclic$precedence5Cons = function () {
        return $author$project$GrenParserLenient$precedence5Cons;
    };
    var $author$project$GrenParserLenient$precedence3And = $author$project$GrenParserLenient$cyclic$precedence3And();
    $author$project$GrenParserLenient$cyclic$precedence3And = function () {
        return $author$project$GrenParserLenient$precedence3And;
    };
    var $author$project$GrenParserLenient$precedence2Or = $author$project$GrenParserLenient$cyclic$precedence2Or();
    $author$project$GrenParserLenient$cyclic$precedence2Or = function () {
        return $author$project$GrenParserLenient$precedence2Or;
    };
    var $author$project$GrenParserLenient$precedence1ApL = $author$project$GrenParserLenient$cyclic$precedence1ApL();
    $author$project$GrenParserLenient$cyclic$precedence1ApL = function () {
        return $author$project$GrenParserLenient$precedence1ApL;
    };
    var $author$project$GrenParserLenient$negationAfterMinus = $author$project$GrenParserLenient$cyclic$negationAfterMinus();
    $author$project$GrenParserLenient$cyclic$negationAfterMinus = function () {
        return $author$project$GrenParserLenient$negationAfterMinus;
    };
    var $author$project$GrenParserLenient$subExpression = $author$project$GrenParserLenient$cyclic$subExpression();
    $author$project$GrenParserLenient$cyclic$subExpression = function () {
        return $author$project$GrenParserLenient$subExpression;
    };
    var $author$project$GrenParserLenient$subExpressionMaybeAppliedFollowedByWhitespaceAndComments = $author$project$GrenParserLenient$cyclic$subExpressionMaybeAppliedFollowedByWhitespaceAndComments();
    $author$project$GrenParserLenient$cyclic$subExpressionMaybeAppliedFollowedByWhitespaceAndComments = function () {
        return $author$project$GrenParserLenient$subExpressionMaybeAppliedFollowedByWhitespaceAndComments;
    };
    var $author$project$ParserFast$map6_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        return function (s0) {
            var _v6 = parseA(s0);
            if (_v6.$ === 1) {
                var committed = _v6.a;
                var x = _v6.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v6.a;
                var s1 = _v6.b;
                var _v7 = parseB(s1);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v7.a;
                    var s2 = _v7.b;
                    var _v8 = parseC(s2);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v8.a;
                        var s3 = _v8.b;
                        var _v9 = parseD(s3);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v9.a;
                            var s4 = _v9.b;
                            var _v10 = parseE(s4);
                            if (_v10.$ === 1) {
                                var x = _v10.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v10.a;
                                var s5 = _v10.b;
                                var _v11 = parseF(s5);
                                if (_v11.$ === 1) {
                                    var x = _v11.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v11.a;
                                    var s6 = _v11.b;
                                    return $author$project$ParserFast$Good_fn(A6(func, a, b, c, d, e, f), s6);
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map6_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        return function (s0) {
            var _v6 = parseA(s0);
            if (_v6.$ === 1) {
                var committed = _v6.a;
                var x = _v6.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v6.a;
                var s1 = _v6.b;
                var _v7 = parseB(s1);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v7.a;
                    var s2 = _v7.b;
                    var _v8 = parseC(s2);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v8.a;
                        var s3 = _v8.b;
                        var _v9 = parseD(s3);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v9.a;
                            var s4 = _v9.b;
                            var _v10 = parseE(s4);
                            if (_v10.$ === 1) {
                                var x = _v10.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v10.a;
                                var s5 = _v10.b;
                                var _v11 = parseF(s5);
                                if (_v11.$ === 1) {
                                    var x = _v11.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v11.a;
                                    var s6 = _v11.b;
                                    return $author$project$ParserFast$Good_fn(func(a, b, c, d, e, f), s6);
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map6 = F7($author$project$ParserFast$map6_fn);
    var $author$project$GrenParserLenient$nameLowercaseNode = $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn($author$project$GrenSyntax$Node, $author$project$Char$Extra$unicodeIsLowerFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $author$project$GrenParserLenient$isNotReserved);
    var $author$project$GrenParserLenient$functionAfterDocumentation = $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$map6_fn_unwrapped(function (startName, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(maybeSignature.b, commentsAfterStartName)))),
            a: $author$project$GrenParserLenient$FunctionDeclarationAfterDocumentation({ W: _arguments.a, I: result.a, V: maybeSignature.a, bP: startName })
        };
    }, $author$project$GrenParserLenient$nameLowercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(implementationName.b, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation))),
            a: $elm$core$Maybe$Just({ at: implementationName.a, D: typeAnnotationResult.a })
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedBy($author$project$GrenParserLenient$nameLowercaseNode), $author$project$GrenParserLenient$whitespaceAndComments, { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments), $author$project$ParserFast$map8WithStartLocation_fn_unwrapped(function (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, _arguments, commentsAfterEqual, result) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBetweenTypeAndName, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation)))))),
            a: $author$project$GrenParserLenient$FunctionDeclarationAfterDocumentation({
                W: _arguments.a,
                I: result.a,
                V: $elm$core$Maybe$Just({ at: nameNode, D: typeAnnotationResult.a }),
                bP: $author$project$GrenSyntax$Node_fn({ c: start, d: start }, $author$project$GrenSyntax$nodeValue(nameNode))
            })
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndented, $author$project$GrenParserLenient$nameLowercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments));
    var $author$project$GrenParserLenient$PortDeclarationAfterDocumentation = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GrenParserLenient$portDeclarationAfterDocumentation = $author$project$ParserFast$map5_fn_unwrapped(function (commentsAfterPort, nameNode, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
        var _v0 = nameNode;
        var nameRange = _v0.a;
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterColon, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterName, commentsAfterPort))),
            a: $author$project$GrenParserLenient$PortDeclarationAfterDocumentation({
                q: nameNode,
                dC: { o: 1, n: nameRange.d.n },
                D: typeAnnotationResult.a
            })
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("port", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_);
    var $author$project$GrenParserLenient$TypeDeclarationAfterDocumentation = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$ParserFast$map7_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        return function (s0) {
            var _v7 = parseA(s0);
            if (_v7.$ === 1) {
                var committed = _v7.a;
                var x = _v7.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v7.a;
                var s1 = _v7.b;
                var _v8 = parseB(s1);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v8.a;
                    var s2 = _v8.b;
                    var _v9 = parseC(s2);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v9.a;
                        var s3 = _v9.b;
                        var _v10 = parseD(s3);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v10.a;
                            var s4 = _v10.b;
                            var _v11 = parseE(s4);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v11.a;
                                var s5 = _v11.b;
                                var _v12 = parseF(s5);
                                if (_v12.$ === 1) {
                                    var x = _v12.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v12.a;
                                    var s6 = _v12.b;
                                    var _v13 = parseG(s6);
                                    if (_v13.$ === 1) {
                                        var x = _v13.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v13.a;
                                        var s7 = _v13.b;
                                        return $author$project$ParserFast$Good_fn(A7(func, a, b, c, d, e, f, g), s7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map7_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        return function (s0) {
            var _v7 = parseA(s0);
            if (_v7.$ === 1) {
                var committed = _v7.a;
                var x = _v7.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v7.a;
                var s1 = _v7.b;
                var _v8 = parseB(s1);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v8.a;
                    var s2 = _v8.b;
                    var _v9 = parseC(s2);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v9.a;
                        var s3 = _v9.b;
                        var _v10 = parseD(s3);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v10.a;
                            var s4 = _v10.b;
                            var _v11 = parseE(s4);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v11.a;
                                var s5 = _v11.b;
                                var _v12 = parseF(s5);
                                if (_v12.$ === 1) {
                                    var x = _v12.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v12.a;
                                    var s6 = _v12.b;
                                    var _v13 = parseG(s6);
                                    if (_v13.$ === 1) {
                                        var x = _v13.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v13.a;
                                        var s7 = _v13.b;
                                        return $author$project$ParserFast$Good_fn(func(a, b, c, d, e, f, g), s7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map7 = F8($author$project$ParserFast$map7_fn);
    var $author$project$GrenParserLenient$nameUppercaseNode = $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn($author$project$GrenSyntax$Node, $author$project$Char$Extra$unicodeIsUpperFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
    var $author$project$GrenParserLenient$typeGenericListEquals = $author$project$GrenParserLenient$untilWithComments_fn($author$project$ParserFast$symbol_fn("=", 0), $author$project$ParserFast$map2_fn_unwrapped(function (name, commentsAfterName) {
        return { b: commentsAfterName, a: name };
    }, $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments));
    var $author$project$GrenParserLenient$variantDeclarationFollowedByWhitespaceAndComments = $author$project$ParserFast$map3_fn_unwrapped(function (nameNode, commentsAfterName, argumentsReverse) {
        var _v0 = nameNode;
        var nameRange = _v0.a;
        var fullRange = function () {
            var _v1 = argumentsReverse.a;
            if (_v1.b) {
                var _v2 = _v1.a;
                var lastArgRange = _v2.a;
                return { c: lastArgRange.c, d: nameRange.d };
            }
            else {
                return nameRange;
            }
        }();
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(argumentsReverse.b, commentsAfterName),
            a: $author$project$GrenSyntax$Node_fn(fullRange, {
                W: $elm$core$List$reverse(argumentsReverse.a),
                q: nameNode
            })
        };
    }, $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$GrenParserLenient$positivelyIndentedFollowedBy($author$project$ParserFast$map2_fn_unwrapped(function (typeAnnotationResult, commentsAfter) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, typeAnnotationResult.b),
            a: typeAnnotationResult.a
        };
    }, $author$project$GrenParserLenient$typeNotSpaceSeparated, $author$project$GrenParserLenient$whitespaceAndComments))));
    var $author$project$GrenParserLenient$choiceTypeDefinitionAfterDocumentationAfterTypePrefix = $author$project$ParserFast$map7_fn_unwrapped(function (name, commentsAfterName, parameters, commentsAfterEqual, commentsBeforeHeadVariant, headVariant, tailVariantsReverse) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(tailVariantsReverse.b, $author$project$GrenParserLenient$ropePrependTo_fn(headVariant.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBeforeHeadVariant, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(parameters.b, commentsAfterName))))),
            a: $author$project$GrenParserLenient$TypeDeclarationAfterDocumentation({ bp: headVariant.a, q: name, a_: parameters.a, bB: tailVariantsReverse.a })
        };
    }, $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$typeGenericListEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$variantDeclarationFollowedByWhitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBeforePipe, commentsWithExtraPipe, variantResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(variantResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraPipe, commentsBeforePipe)),
            a: variantResult.a
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$variantDeclarationFollowedByWhitespaceAndComments))));
    var $author$project$GrenParserLenient$TypeAliasDeclarationAfterDocumentation = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GrenParserLenient$typeAliasDefinitionAfterDocumentationAfterTypePrefix = $author$project$ParserFast$map6_fn_unwrapped(function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEquals, typeAnnotationResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEquals, $author$project$GrenParserLenient$ropePrependTo_fn(parameters.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterName, commentsAfterAlias)))),
            a: $author$project$GrenParserLenient$TypeAliasDeclarationAfterDocumentation({ q: name, a_: parameters.a, D: typeAnnotationResult.a })
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("alias", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$typeGenericListEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$type_);
    var $author$project$GrenParserLenient$typeOrTypeAliasDefinitionAfterDocumentation = $author$project$ParserFast$map2_fn_unwrapped(function (commentsAfterType, declarationAfterDocumentation) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(declarationAfterDocumentation.b, commentsAfterType),
            a: declarationAfterDocumentation.a
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("type", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$typeAliasDefinitionAfterDocumentationAfterTypePrefix, $author$project$GrenParserLenient$choiceTypeDefinitionAfterDocumentationAfterTypePrefix));
    var $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedByWithComments = function (nextParser) {
        return $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, after) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(after.b, commentsBefore),
                a: after.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$topIndentedFollowedBy(nextParser));
    };
    var $author$project$GrenParserLenient$declarationWithDocumentation = $author$project$ParserFast$validate_fn(function (result) {
        var _v11 = result.a;
        var decl = _v11.b;
        if (!decl.$) {
            var letFunctionDeclaration = decl.a;
            var _v13 = letFunctionDeclaration.V;
            if (_v13.$ === 1) {
                return true;
            }
            else {
                var _v14 = _v13.a;
                var signature = _v14.b;
                var _v15 = signature.q;
                var signatureName = _v15.b;
                var _v16 = letFunctionDeclaration.R;
                var implementation = _v16.b;
                var _v17 = implementation.q;
                var implementationName = _v17.b;
                return _Utils_eq(implementationName, signatureName);
            }
        }
        else {
            return true;
        }
    }, $author$project$ParserFast$map2_fn_unwrapped(function (documentation, afterDocumentation) {
        var start = $author$project$GrenSyntax$nodeRange(documentation).d;
        var _v0 = afterDocumentation.a;
        switch (_v0.$) {
            case 0:
                var functionDeclarationAfterDocumentation = _v0.a;
                var _v1 = functionDeclarationAfterDocumentation.V;
                if (!_v1.$) {
                    var signature = _v1.a;
                    var _v2 = signature.at;
                    var implementationNameRange = _v2.a;
                    var _v3 = functionDeclarationAfterDocumentation.I;
                    var expressionRange = _v3.a;
                    return {
                        b: afterDocumentation.b,
                        a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: start }, $author$project$GrenSyntax$FunctionDeclaration({
                            R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: implementationNameRange.d }, { W: functionDeclarationAfterDocumentation.W, I: functionDeclarationAfterDocumentation.I, q: signature.at }),
                            Z: $elm$core$Maybe$Just(documentation),
                            V: $elm$core$Maybe$Just($author$project$GrenSyntax$nodeCombine_fn_unwrapped(function (name, value) {
                                return { q: name, D: value };
                            }, functionDeclarationAfterDocumentation.bP, signature.D))
                        }))
                    };
                }
                else {
                    var _v4 = functionDeclarationAfterDocumentation.bP;
                    var startNameRange = _v4.a;
                    var _v5 = functionDeclarationAfterDocumentation.I;
                    var expressionRange = _v5.a;
                    return {
                        b: afterDocumentation.b,
                        a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: start }, $author$project$GrenSyntax$FunctionDeclaration({
                            R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameRange.d }, { W: functionDeclarationAfterDocumentation.W, I: functionDeclarationAfterDocumentation.I, q: functionDeclarationAfterDocumentation.bP }),
                            Z: $elm$core$Maybe$Just(documentation),
                            V: $elm$core$Maybe$Nothing
                        }))
                    };
                }
            case 1:
                var typeDeclarationAfterDocumentation = _v0.a;
                var end = function () {
                    var _v6 = typeDeclarationAfterDocumentation.bB;
                    if (_v6.b) {
                        var _v7 = _v6.a;
                        var range = _v7.a;
                        return range.c;
                    }
                    else {
                        var _v8 = typeDeclarationAfterDocumentation.bp;
                        var headVariantRange = _v8.a;
                        return headVariantRange.c;
                    }
                }();
                return {
                    b: afterDocumentation.b,
                    a: $author$project$GrenSyntax$Node_fn({ c: end, d: start }, $author$project$GrenSyntax$CustomTypeDeclaration({
                        cT: _List_Cons(typeDeclarationAfterDocumentation.bp, $elm$core$List$reverse(typeDeclarationAfterDocumentation.bB)),
                        Z: $elm$core$Maybe$Just(documentation),
                        ca: typeDeclarationAfterDocumentation.a_,
                        q: typeDeclarationAfterDocumentation.q
                    }))
                };
            case 2:
                var typeAliasDeclarationAfterDocumentation = _v0.a;
                var _v9 = typeAliasDeclarationAfterDocumentation.D;
                var typeAnnotationRange = _v9.a;
                return {
                    b: afterDocumentation.b,
                    a: $author$project$GrenSyntax$Node_fn({ c: typeAnnotationRange.c, d: start }, $author$project$GrenSyntax$AliasDeclaration({
                        Z: $elm$core$Maybe$Just(documentation),
                        ca: typeAliasDeclarationAfterDocumentation.a_,
                        q: typeAliasDeclarationAfterDocumentation.q,
                        D: typeAliasDeclarationAfterDocumentation.D
                    }))
                };
            default:
                var portDeclarationAfterName = _v0.a;
                var _v10 = portDeclarationAfterName.D;
                var typeAnnotationRange = _v10.a;
                return {
                    b: $author$project$GrenParserLenient$ropeFilledPrependTo_fn(afterDocumentation.b, $author$project$GrenParserLenient$ropeOne(documentation)),
                    a: $author$project$GrenSyntax$Node_fn({ c: typeAnnotationRange.c, d: portDeclarationAfterName.dC }, $author$project$GrenSyntax$PortDeclaration({ q: portDeclarationAfterName.q, D: portDeclarationAfterName.D }))
                };
        }
    }, $author$project$GrenParserLenient$documentationComment, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedByWithComments($author$project$ParserFast$oneOf3_fn($author$project$GrenParserLenient$functionAfterDocumentation, $author$project$GrenParserLenient$typeOrTypeAliasDefinitionAfterDocumentation, $author$project$GrenParserLenient$portDeclarationAfterDocumentation))));
    var $author$project$GrenParserLenient$functionNameNotInfixNode = $author$project$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn($author$project$GrenSyntax$Node, $author$project$Char$Extra$unicodeIsLowerFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, function (name) {
        if (name === "infix") {
            return false;
        }
        else {
            var nameNotInfix = name;
            return $author$project$GrenParserLenient$isNotReserved(nameNotInfix);
        }
    });
    var $author$project$GrenParserLenient$functionDeclarationWithoutDocumentation = $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$validate_fn(function (result) {
        var _v3 = result.a;
        var decl = _v3.b;
        switch (decl.$) {
            case 0:
                var letFunctionDeclaration = decl.a;
                var _v5 = letFunctionDeclaration.V;
                if (_v5.$ === 1) {
                    return true;
                }
                else {
                    var _v6 = _v5.a;
                    var signature = _v6.b;
                    var _v7 = signature.q;
                    var signatureName = _v7.b;
                    var _v8 = letFunctionDeclaration.R;
                    var implementation = _v8.b;
                    var _v9 = implementation.q;
                    var implementationName = _v9.b;
                    return _Utils_eq(implementationName, signatureName);
                }
            case 1:
                return true;
            case 2:
                return true;
            case 3:
                return true;
            default:
                return true;
        }
    }, $author$project$ParserFast$map6WithStartLocation_fn_unwrapped(function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
        var _v0 = result.a;
        var expressionRange = _v0.a;
        if (maybeSignature.$ === 1) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, commentsAfterStartName))),
                a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, $author$project$GrenSyntax$FunctionDeclaration({
                    R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, { W: _arguments.a, I: result.a, q: startNameNode }),
                    Z: $elm$core$Maybe$Nothing,
                    V: $elm$core$Maybe$Nothing
                }))
            };
        }
        else {
            var signature = maybeSignature.a;
            var _v2 = signature.at;
            var implementationNameRange = _v2.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(signature.b, commentsAfterStartName)))),
                a: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: startNameStart }, $author$project$GrenSyntax$FunctionDeclaration({
                    R: $author$project$GrenSyntax$Node_fn({ c: expressionRange.c, d: implementationNameRange.d }, { W: _arguments.a, I: result.a, q: signature.at }),
                    Z: $elm$core$Maybe$Nothing,
                    V: $elm$core$Maybe$Just($author$project$GrenSyntax$nodeCombine_fn_unwrapped(function (name, typeAnnotation) {
                        return { q: name, D: typeAnnotation };
                    }, startNameNode, signature.D))
                }))
            };
        }
    }, $author$project$GrenParserLenient$functionNameNotInfixNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
        return $elm$core$Maybe$Just({
            b: $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(implementationName.b, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation))),
            at: implementationName.a,
            D: typeAnnotationResult.a
        });
    }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedBy($author$project$GrenParserLenient$nameLowercaseNode), $author$project$GrenParserLenient$whitespaceAndComments, $elm$core$Maybe$Nothing), $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments)), $author$project$ParserFast$map8WithStartLocation_fn_unwrapped(function (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, _arguments, commentsAfterEqual, result) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(_arguments.b, $author$project$GrenParserLenient$ropePrependTo_fn(afterImplementationName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBetweenTypeAndName, $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, commentsBeforeTypeAnnotation)))))),
            a: $author$project$GrenSyntax$Node_fn({
                c: $author$project$GrenSyntax$nodeRange(result.a).c,
                d: start
            }, $author$project$GrenSyntax$FunctionDeclaration({
                R: $author$project$GrenSyntax$Node_fn({
                    c: $author$project$GrenSyntax$nodeRange(result.a).c,
                    d: $author$project$GrenSyntax$nodeRange(nameNode).d
                }, { W: _arguments.a, I: result.a, q: nameNode }),
                Z: $elm$core$Maybe$Nothing,
                V: $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn({
                    c: $author$project$GrenSyntax$nodeRange(typeAnnotationResult.a).c,
                    d: start
                }, {
                    q: $author$project$GrenSyntax$Node_fn({ c: start, d: start }, $author$project$GrenSyntax$nodeValue(nameNode)),
                    D: typeAnnotationResult.a
                }))
            }))
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndented, $author$project$GrenParserLenient$nameLowercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$parameterPatternsEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$expressionFollowedByWhitespaceAndComments));
    var $author$project$GrenSyntax$InfixDeclaration = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GrenParserLenient$infixDirection = $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$mapWithRange_fn($author$project$GrenSyntax$Node, $author$project$ParserFast$keyword_fn("right", 1)), $author$project$ParserFast$mapWithRange_fn($author$project$GrenSyntax$Node, $author$project$ParserFast$keyword_fn("left", 0)), $author$project$ParserFast$mapWithRange_fn($author$project$GrenSyntax$Node, $author$project$ParserFast$keyword_fn("non", 2)));
    var $author$project$ParserFast$errorAsOffsetAndInt = { U: 0, e: -1 };
    var $author$project$ParserFast$convertIntegerDecimal_fn = function (offset, src) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                return { U: 0, e: offset + 1 };
            case "1":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(1, offset + 1, src);
            case "2":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(2, offset + 1, src);
            case "3":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(3, offset + 1, src);
            case "4":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(4, offset + 1, src);
            case "5":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(5, offset + 1, src);
            case "6":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(6, offset + 1, src);
            case "7":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(7, offset + 1, src);
            case "8":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(8, offset + 1, src);
            case "9":
                return $author$project$ParserFast$convert0OrMore0To9s_fn(9, offset + 1, src);
            default:
                return $author$project$ParserFast$errorAsOffsetAndInt;
        }
    }, $author$project$ParserFast$convertIntegerDecimal = F2($author$project$ParserFast$convertIntegerDecimal_fn);
    var $author$project$ParserFast$integerDecimalMapWithRange = function (rangeAndIntToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$convertIntegerDecimal_fn(s0.e, s0.g);
            if (s1.e === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var newColumn = s0.f + (s1.e - s0.e);
                return $author$project$ParserFast$Good_fn(A2(rangeAndIntToRes, {
                    c: { o: newColumn, n: s0.n },
                    d: { o: s0.f, n: s0.n }
                }, s1.U), { f: newColumn, H: s0.H, e: s1.e, n: s0.n, g: s0.g });
            }
        };
    }, $author$project$ParserFast$integerDecimalMapWithRange_unwrapped = function (rangeAndIntToRes) {
        return function (s0) {
            var s1 = $author$project$ParserFast$convertIntegerDecimal_fn(s0.e, s0.g);
            if (s1.e === -1) {
                return $author$project$ParserFast$pStepBadBacktracking;
            }
            else {
                var newColumn = s0.f + (s1.e - s0.e);
                return $author$project$ParserFast$Good_fn(rangeAndIntToRes({
                    c: { o: newColumn, n: s0.n },
                    d: { o: s0.f, n: s0.n }
                }, s1.U), { f: newColumn, H: s0.H, e: s1.e, n: s0.n, g: s0.g });
            }
        };
    };
    var $author$project$ParserFast$map9WithRange = function (func) {
        return function (_v0) {
            return function (_v1) {
                return function (_v2) {
                    return function (_v3) {
                        return function (_v4) {
                            return function (_v5) {
                                return function (_v6) {
                                    return function (_v7) {
                                        return function (_v8) {
                                            var parseA = _v0;
                                            var parseB = _v1;
                                            var parseC = _v2;
                                            var parseD = _v3;
                                            var parseE = _v4;
                                            var parseF = _v5;
                                            var parseG = _v6;
                                            var parseH = _v7;
                                            var parseI = _v8;
                                            return function (s0) {
                                                var _v9 = parseA(s0);
                                                if (_v9.$ === 1) {
                                                    var committed = _v9.a;
                                                    var x = _v9.b;
                                                    return $author$project$ParserFast$Bad_fn(committed, x);
                                                }
                                                else {
                                                    var a = _v9.a;
                                                    var s1 = _v9.b;
                                                    var _v10 = parseB(s1);
                                                    if (_v10.$ === 1) {
                                                        var x = _v10.b;
                                                        return $author$project$ParserFast$Bad_fn(true, x);
                                                    }
                                                    else {
                                                        var b = _v10.a;
                                                        var s2 = _v10.b;
                                                        var _v11 = parseC(s2);
                                                        if (_v11.$ === 1) {
                                                            var x = _v11.b;
                                                            return $author$project$ParserFast$Bad_fn(true, x);
                                                        }
                                                        else {
                                                            var c = _v11.a;
                                                            var s3 = _v11.b;
                                                            var _v12 = parseD(s3);
                                                            if (_v12.$ === 1) {
                                                                var x = _v12.b;
                                                                return $author$project$ParserFast$Bad_fn(true, x);
                                                            }
                                                            else {
                                                                var d = _v12.a;
                                                                var s4 = _v12.b;
                                                                var _v13 = parseE(s4);
                                                                if (_v13.$ === 1) {
                                                                    var x = _v13.b;
                                                                    return $author$project$ParserFast$Bad_fn(true, x);
                                                                }
                                                                else {
                                                                    var e = _v13.a;
                                                                    var s5 = _v13.b;
                                                                    var _v14 = parseF(s5);
                                                                    if (_v14.$ === 1) {
                                                                        var x = _v14.b;
                                                                        return $author$project$ParserFast$Bad_fn(true, x);
                                                                    }
                                                                    else {
                                                                        var f = _v14.a;
                                                                        var s6 = _v14.b;
                                                                        var _v15 = parseG(s6);
                                                                        if (_v15.$ === 1) {
                                                                            var x = _v15.b;
                                                                            return $author$project$ParserFast$Bad_fn(true, x);
                                                                        }
                                                                        else {
                                                                            var g = _v15.a;
                                                                            var s7 = _v15.b;
                                                                            var _v16 = parseH(s7);
                                                                            if (_v16.$ === 1) {
                                                                                var x = _v16.b;
                                                                                return $author$project$ParserFast$Bad_fn(true, x);
                                                                            }
                                                                            else {
                                                                                var h = _v16.a;
                                                                                var s8 = _v16.b;
                                                                                var _v17 = parseI(s8);
                                                                                if (_v17.$ === 1) {
                                                                                    var x = _v17.b;
                                                                                    return $author$project$ParserFast$Bad_fn(true, x);
                                                                                }
                                                                                else {
                                                                                    var i = _v17.a;
                                                                                    var s9 = _v17.b;
                                                                                    return $author$project$ParserFast$Good_fn(func({
                                                                                        c: { o: s9.f, n: s9.n },
                                                                                        d: { o: s0.f, n: s0.n }
                                                                                    })(a)(b)(c)(d)(e)(f)(g)(h)(i), s9);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $author$project$GrenParserLenient$infixDeclaration = $author$project$ParserFast$map9WithRange(function (range) {
        return function (commentsAfterInfix) {
            return function (direction) {
                return function (commentsAfterDirection) {
                    return function (precedence) {
                        return function (commentsAfterPrecedence) {
                            return function (operator) {
                                return function (commentsAfterOperator) {
                                    return function (commentsAfterEqual) {
                                        return function (fn) {
                                            return {
                                                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterOperator, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterPrecedence, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterDirection, commentsAfterInfix)))),
                                                a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$InfixDeclaration({ bo: direction, d8: fn, eA: operator, eC: precedence }))
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    })($author$project$ParserFast$keywordFollowedBy_fn("infix", $author$project$GrenParserLenient$whitespaceAndComments))($author$project$GrenParserLenient$infixDirection)($author$project$GrenParserLenient$whitespaceAndComments)($author$project$ParserFast$integerDecimalMapWithRange($author$project$GrenSyntax$Node))($author$project$GrenParserLenient$whitespaceAndComments)($author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped(function (operatorRange, operator) {
        return $author$project$GrenSyntax$Node_fn({
            c: { o: operatorRange.c.o + 1, n: operatorRange.c.n },
            d: { o: operatorRange.d.o - 1, n: operatorRange.d.n }
        }, operator);
    }, $author$project$GrenParserLenient$isOperatorSymbolCharAsString, $author$project$GrenParserLenient$isAllowedOperatorToken, ")")))($author$project$GrenParserLenient$whitespaceAndComments)($author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments))($author$project$GrenParserLenient$nameLowercaseNode);
    var $author$project$ParserFast$oneOf5_fn = function (_v0, _v1, _v2, _v3, _v4) {
        var attemptFirst = _v0;
        var attemptSecond = _v1;
        var attemptThird = _v2;
        var attemptFourth = _v3;
        var attemptFifth = _v4;
        return function (s) {
            var _v5 = attemptFirst(s);
            if (!_v5.$) {
                var firstGood = _v5;
                return firstGood;
            }
            else {
                var firstBad = _v5;
                var firstCommitted = firstBad.a;
                if (firstCommitted) {
                    return firstBad;
                }
                else {
                    var _v6 = attemptSecond(s);
                    if (!_v6.$) {
                        var secondGood = _v6;
                        return secondGood;
                    }
                    else {
                        var secondBad = _v6;
                        var secondCommitted = secondBad.a;
                        if (secondCommitted) {
                            return secondBad;
                        }
                        else {
                            var _v7 = attemptThird(s);
                            if (!_v7.$) {
                                var thirdGood = _v7;
                                return thirdGood;
                            }
                            else {
                                var thirdBad = _v7;
                                var thirdCommitted = thirdBad.a;
                                if (thirdCommitted) {
                                    return thirdBad;
                                }
                                else {
                                    var _v8 = attemptFourth(s);
                                    if (!_v8.$) {
                                        var fourthGood = _v8;
                                        return fourthGood;
                                    }
                                    else {
                                        var fourthBad = _v8;
                                        var fourthCommitted = fourthBad.a;
                                        if (fourthCommitted) {
                                            return fourthBad;
                                        }
                                        else {
                                            var _v9 = attemptFifth(s);
                                            if (!_v9.$) {
                                                var fifthGood = _v9;
                                                return fifthGood;
                                            }
                                            else {
                                                var fifthBad = _v9;
                                                var fifthCommitted = fifthBad.a;
                                                return fifthCommitted ? fifthBad : $author$project$ParserFast$pStepBadBacktracking;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$oneOf5 = F5($author$project$ParserFast$oneOf5_fn);
    var $author$project$GrenParserLenient$portDeclarationWithoutDocumentation = $author$project$ParserFast$map5_fn_unwrapped(function (commentsAfterPort, nameNode, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
        var _v0 = typeAnnotationResult.a;
        var typeRange = _v0.a;
        var _v1 = nameNode;
        var nameRange = _v1.a;
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterColon, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterName, commentsAfterPort))),
            a: $author$project$GrenSyntax$Node_fn({
                c: typeRange.c,
                d: { o: 1, n: nameRange.d.n }
            }, $author$project$GrenSyntax$PortDeclaration({ q: nameNode, D: typeAnnotationResult.a }))
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("port", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameLowercaseNodeUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$symbolFollowedBy_fn(":", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$type_);
    var $author$project$GrenParserLenient$TypeDeclarationWithoutDocumentation = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenParserLenient$choiceTypeDefinitionWithoutDocumentationAfterTypePrefix = $author$project$ParserFast$map7_fn_unwrapped(function (name, commentsAfterName, parameters, commentsAfterEqual, commentsBeforeHeadVariant, headVariant, tailVariantsReverse) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(tailVariantsReverse.b, $author$project$GrenParserLenient$ropePrependTo_fn(headVariant.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsBeforeHeadVariant, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(parameters.b, commentsAfterName))))),
            a: $author$project$GrenParserLenient$TypeDeclarationWithoutDocumentation({ bp: headVariant.a, q: name, a_: parameters.a, bB: tailVariantsReverse.a })
        };
    }, $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$typeGenericListEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$variantDeclarationFollowedByWhitespaceAndComments, $author$project$GrenParserLenient$manyWithCommentsReverse($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBeforePipe, commentsWithExtraPipe, variantResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(variantResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraPipe, commentsBeforePipe)),
            a: variantResult.a
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn("|", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$variantDeclarationFollowedByWhitespaceAndComments))));
    var $author$project$ParserFast$map2WithStartLocation_fn = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(A3(func, { o: s0.f, n: s0.n }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithStartLocation_fn_unwrapped = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var committed = _v2.a;
                var x = _v2.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithStartLocation = F3($author$project$ParserFast$map2WithStartLocation_fn);
    var $author$project$GrenParserLenient$TypeAliasDeclarationWithoutDocumentation = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenParserLenient$typeAliasDefinitionWithoutDocumentationAfterTypePrefix = $author$project$ParserFast$map6_fn_unwrapped(function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEqual, typeAnnotationResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(typeAnnotationResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, $author$project$GrenParserLenient$ropePrependTo_fn(parameters.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterName, commentsAfterAlias)))),
            a: $author$project$GrenParserLenient$TypeAliasDeclarationWithoutDocumentation({ q: name, a_: parameters.a, D: typeAnnotationResult.a })
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("alias", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$typeGenericListEquals, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$type_);
    var $author$project$GrenParserLenient$typeOrTypeAliasDefinitionWithoutDocumentation = $author$project$ParserFast$map2WithStartLocation_fn_unwrapped(function (start, commentsAfterType, afterStart) {
        var allComments = $author$project$GrenParserLenient$ropePrependTo_fn(afterStart.b, commentsAfterType);
        var _v0 = afterStart.a;
        if (!_v0.$) {
            var typeDeclarationAfterDocumentation = _v0.a;
            var end = function () {
                var _v1 = typeDeclarationAfterDocumentation.bB;
                if (_v1.b) {
                    var _v2 = _v1.a;
                    var range = _v2.a;
                    return range.c;
                }
                else {
                    var _v3 = typeDeclarationAfterDocumentation.bp;
                    var headVariantRange = _v3.a;
                    return headVariantRange.c;
                }
            }();
            return {
                b: allComments,
                a: $author$project$GrenSyntax$Node_fn({ c: end, d: start }, $author$project$GrenSyntax$CustomTypeDeclaration({
                    cT: _List_Cons(typeDeclarationAfterDocumentation.bp, $elm$core$List$reverse(typeDeclarationAfterDocumentation.bB)),
                    Z: $elm$core$Maybe$Nothing,
                    ca: typeDeclarationAfterDocumentation.a_,
                    q: typeDeclarationAfterDocumentation.q
                }))
            };
        }
        else {
            var typeAliasDeclarationAfterDocumentation = _v0.a;
            var _v4 = typeAliasDeclarationAfterDocumentation.D;
            var typeAnnotationRange = _v4.a;
            return {
                b: allComments,
                a: $author$project$GrenSyntax$Node_fn({ c: typeAnnotationRange.c, d: start }, $author$project$GrenSyntax$AliasDeclaration({ Z: $elm$core$Maybe$Nothing, ca: typeAliasDeclarationAfterDocumentation.a_, q: typeAliasDeclarationAfterDocumentation.q, D: typeAliasDeclarationAfterDocumentation.D }))
            };
        }
    }, $author$project$ParserFast$keywordFollowedBy_fn("type", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$oneOf2_fn($author$project$GrenParserLenient$typeAliasDefinitionWithoutDocumentationAfterTypePrefix, $author$project$GrenParserLenient$choiceTypeDefinitionWithoutDocumentationAfterTypePrefix));
    var $author$project$GrenParserLenient$declaration = $author$project$ParserFast$oneOf5_fn($author$project$GrenParserLenient$functionDeclarationWithoutDocumentation, $author$project$GrenParserLenient$declarationWithDocumentation, $author$project$GrenParserLenient$typeOrTypeAliasDefinitionWithoutDocumentation, $author$project$GrenParserLenient$portDeclarationWithoutDocumentation, $author$project$GrenParserLenient$infixDeclaration);
    var $author$project$GrenParserLenient$declarationIsPort = function (syntaxDeclaration) {
        switch (syntaxDeclaration.$) {
            case 3:
                return true;
            case 0:
                return false;
            case 1:
                return false;
            case 2:
                return false;
            default:
                return false;
        }
    };
    var $author$project$GrenSyntax$All = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenSyntax$Explicit = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenSyntax$FunctionExpose = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GrenParserLenient$functionExpose = $author$project$GrenParserLenient$nameLowercaseMapWithRange(F2(function (range, name) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$FunctionExpose(name))
        };
    }));
    var $author$project$GrenSyntax$InfixExpose = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GrenParserLenient$infixExpose = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, infixName, _v0) {
        return {
            b: $author$project$GrenParserLenient$ropeEmpty,
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$InfixExpose(infixName))
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$ifFollowedByWhileWithoutLinebreak_fn(function (c) {
        switch (c) {
            case ")":
                return false;
            case "\n":
                return false;
            case " ":
                return false;
            default:
                return true;
        }
    }, function (c) {
        switch (c) {
            case ")":
                return false;
            case "\n":
                return false;
            case " ":
                return false;
            default:
                return true;
        }
    })), $author$project$ParserFast$symbol_fn(")", 0));
    var $author$project$GrenSyntax$TypeExpose = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GrenSyntax$TypeOrAliasExpose = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$ParserFast$map2WithRangeOrSucceed_fn = function (func, _v0, _v1, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var c1 = _v2.a;
                var x = _v2.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(A3(func, {
                        c: { o: s2.f, n: s2.n },
                        d: { o: s0.f, n: s0.n }
                    }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithRangeOrSucceed_fn_unwrapped = function (func, _v0, _v1, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var c1 = _v2.a;
                var x = _v2.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v2.a;
                var s1 = _v2.b;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var x = _v3.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v3.a;
                    var s2 = _v3.b;
                    return $author$project$ParserFast$Good_fn(func({
                        c: { o: s2.f, n: s2.n },
                        d: { o: s0.f, n: s0.n }
                    }, a, b), s2);
                }
            }
        };
    }, $author$project$ParserFast$map2WithRangeOrSucceed = F4($author$project$ParserFast$map2WithRangeOrSucceed_fn);
    var $author$project$GrenParserLenient$typeExpose = $author$project$ParserFast$map3_fn_unwrapped(function (_v0, commentsBeforeMaybeOpen, maybeOpen) {
        var typeNameRange = _v0.a;
        var typeExposeName = _v0.b;
        if (maybeOpen.$ === 1) {
            return {
                b: commentsBeforeMaybeOpen,
                a: $author$project$GrenSyntax$Node_fn(typeNameRange, $author$project$GrenSyntax$TypeOrAliasExpose(typeExposeName))
            };
        }
        else {
            var open = maybeOpen.a;
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(open.b, commentsBeforeMaybeOpen),
                a: $author$project$GrenSyntax$Node_fn({ c: open.a.c, d: typeNameRange.d }, $author$project$GrenSyntax$TypeExpose({
                    q: typeExposeName,
                    ez: $elm$core$Maybe$Just(open.a)
                }))
            };
        }
    }, $author$project$GrenParserLenient$nameUppercaseNode, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$map2WithRangeOrSucceed_fn_unwrapped(function (range, left, right) {
        return $elm$core$Maybe$Just({
            b: $author$project$GrenParserLenient$ropePrependTo_fn(right, left),
            a: range
        });
    }, $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$oneOf2_fn($author$project$ParserFast$symbolFollowedBy_fn("...", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("..", $author$project$GrenParserLenient$whitespaceAndComments))), $elm$core$Maybe$Nothing));
    var $author$project$GrenParserLenient$expose = $author$project$ParserFast$oneOf3_fn($author$project$GrenParserLenient$functionExpose, $author$project$GrenParserLenient$typeExpose, $author$project$GrenParserLenient$infixExpose);
    var $author$project$GrenParserLenient$exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap = function (exposingToSyntax) {
        return $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeHeadElement, headElement, commentsAfterHeadElement, tailElements) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(tailElements.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterHeadElement, $author$project$GrenParserLenient$ropePrependTo_fn(headElement.b, commentsBeforeHeadElement))),
                a: exposingToSyntax($author$project$GrenSyntax$Explicit(_List_Cons(headElement.a, tailElements.a)))
            };
        }, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$expose, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBefore, commentsWithExtraComma, result, commentsAfter) {
            return {
                b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(result.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsWithExtraComma, commentsBefore))),
                a: result.a
            };
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$orSucceed_fn($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$ropeEmpty), $author$project$GrenParserLenient$expose, $author$project$GrenParserLenient$whitespaceAndComments))));
    };
    var $author$project$ParserFast$map3OrSucceed_fn = function (func, _v0, _v1, _v2, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var c1 = _v3.a;
                var x = _v3.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(A3(func, a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3OrSucceed_fn_unwrapped = function (func, _v0, _v1, _v2, fallback) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        return function (s0) {
            var _v3 = parseA(s0);
            if (_v3.$ === 1) {
                var c1 = _v3.a;
                var x = _v3.b;
                return c1 ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(fallback, s0);
            }
            else {
                var a = _v3.a;
                var s1 = _v3.b;
                var _v4 = parseB(s1);
                if (_v4.$ === 1) {
                    var x = _v4.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v4.a;
                    var s2 = _v4.b;
                    var _v5 = parseC(s2);
                    if (_v5.$ === 1) {
                        var x = _v5.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v5.a;
                        var s3 = _v5.b;
                        return $author$project$ParserFast$Good_fn(func(a, b, c), s3);
                    }
                }
            }
        };
    }, $author$project$ParserFast$map3OrSucceed = F5($author$project$ParserFast$map3OrSucceed_fn);
    var $author$project$ParserFast$map5WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(A6(func, { o: s0.f, n: s0.n }, a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        return function (s0) {
            var _v5 = parseA(s0);
            if (_v5.$ === 1) {
                var committed = _v5.a;
                var x = _v5.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v5.a;
                var s1 = _v5.b;
                var _v6 = parseB(s1);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v6.a;
                    var s2 = _v6.b;
                    var _v7 = parseC(s2);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v7.a;
                        var s3 = _v7.b;
                        var _v8 = parseD(s3);
                        if (_v8.$ === 1) {
                            var x = _v8.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v8.a;
                            var s4 = _v8.b;
                            var _v9 = parseE(s4);
                            if (_v9.$ === 1) {
                                var x = _v9.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v9.a;
                                var s5 = _v9.b;
                                return $author$project$ParserFast$Good_fn(func({ o: s0.f, n: s0.n }, a, b, c, d, e), s5);
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map5WithStartLocation = F6($author$project$ParserFast$map5WithStartLocation_fn);
    var $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn = function (element, initialFolded, reduce, s0) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var _v1 = $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn(element, initialFolded, reduce, s1);
            if (!_v1.$) {
                var tailFolded = _v1.a;
                var s2 = _v1.b;
                return $author$project$ParserFast$Good_fn(A2(reduce, elementResult, tailFolded), s2);
            }
            else {
                var tailBad = _v1;
                return tailBad;
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return elementCommitted ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(initialFolded, s0);
        }
    }, $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn_unwrapped = function (element, initialFolded, reduce, s0) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var _v1 = $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn_unwrapped(element, initialFolded, reduce, s1);
            if (!_v1.$) {
                var tailFolded = _v1.a;
                var s2 = _v1.b;
                return $author$project$ParserFast$Good_fn(reduce(elementResult, tailFolded), s2);
            }
            else {
                var tailBad = _v1;
                return tailBad;
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return elementCommitted ? $author$project$ParserFast$Bad_fn(true, x) : $author$project$ParserFast$Good_fn(initialFolded, s0);
        }
    }, $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp = F4($author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn);
    var $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafe_fn = function (element, initialFolded, reduce) {
        return function (s) {
            return $author$project$ParserFast$loopWhileSucceedsFromRightToLeftStackUnsafeHelp_fn(element, initialFolded, reduce, s);
        };
    }, $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafe = F3($author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafe_fn);
    var $author$project$GrenParserLenient$moduleName = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, head, tail) {
        return $author$project$GrenSyntax$Node_fn(range, _List_Cons(head, tail));
    }, $author$project$GrenParserLenient$nameUppercase, $author$project$ParserFast$loopWhileSucceedsRightToLeftStackUnsafe_fn($author$project$ParserFast$symbolFollowedBy_fn(".", $author$project$GrenParserLenient$nameUppercase), _List_Nil, $elm$core$List$cons));
    var $author$project$GrenParserLenient$nameUppercaseMapWithRange = function (rangeAndNameToRes) {
        return $author$project$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn(rangeAndNameToRes, $author$project$Char$Extra$unicodeIsUpperFast, $author$project$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
    };
    var $author$project$GrenParserLenient$importFollowedByWhitespaceAndComments = $author$project$ParserFast$map5WithStartLocation_fn_unwrapped(function (start, commentsAfterImport, moduleNameNode, commentsAfterModuleName, maybeModuleAlias, maybeExposingResult) {
        var commentsBeforeAlias = $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterModuleName, commentsAfterImport);
        if (maybeModuleAlias.$ === 1) {
            var _v1 = maybeExposingResult.a;
            if (_v1.$ === 1) {
                var _v2 = moduleNameNode;
                var moduleNameRange = _v2.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeExposingResult.b, commentsBeforeAlias),
                    a: $author$project$GrenSyntax$Node_fn({ c: moduleNameRange.c, d: start }, { a5: $elm$core$Maybe$Nothing, cf: $elm$core$Maybe$Nothing, ag: moduleNameNode })
                };
            }
            else {
                var exposingListValue = _v1.a;
                var _v3 = exposingListValue;
                var exposingRange = _v3.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeExposingResult.b, commentsBeforeAlias),
                    a: $author$project$GrenSyntax$Node_fn({ c: exposingRange.c, d: start }, {
                        a5: $elm$core$Maybe$Just(exposingListValue),
                        cf: $elm$core$Maybe$Nothing,
                        ag: moduleNameNode
                    })
                };
            }
        }
        else {
            var moduleAliasResult = maybeModuleAlias.a;
            var _v4 = maybeExposingResult.a;
            if (_v4.$ === 1) {
                var _v5 = moduleAliasResult.a;
                var aliasRange = _v5.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeExposingResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(moduleAliasResult.b, commentsBeforeAlias)),
                    a: $author$project$GrenSyntax$Node_fn({ c: aliasRange.c, d: start }, {
                        a5: $elm$core$Maybe$Nothing,
                        cf: $elm$core$Maybe$Just(moduleAliasResult.a),
                        ag: moduleNameNode
                    })
                };
            }
            else {
                var exposingListValue = _v4.a;
                var _v6 = exposingListValue;
                var exposingRange = _v6.a;
                return {
                    b: $author$project$GrenParserLenient$ropePrependTo_fn(maybeExposingResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(moduleAliasResult.b, commentsBeforeAlias)),
                    a: $author$project$GrenSyntax$Node_fn({ c: exposingRange.c, d: start }, {
                        a5: $elm$core$Maybe$Just(exposingListValue),
                        cf: $elm$core$Maybe$Just(moduleAliasResult.a),
                        ag: moduleNameNode
                    })
                };
            }
        }
    }, $author$project$ParserFast$keywordFollowedBy_fn("import", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$moduleName, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$map3OrSucceed_fn_unwrapped(function (commentsBefore, moduleAliasNode, commentsAfter) {
        return $elm$core$Maybe$Just({
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, commentsBefore),
            a: moduleAliasNode
        });
    }, $author$project$ParserFast$keywordFollowedBy_fn("as", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameUppercaseMapWithRange(F2(function (range, moduleAlias) {
        return $author$project$GrenSyntax$Node_fn(range, _List_fromArray([moduleAlias]));
    })), $author$project$GrenParserLenient$whitespaceAndComments, $elm$core$Maybe$Nothing), $author$project$ParserFast$map2OrSucceed_fn_unwrapped(function (exposingResult, commentsAfter) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, exposingResult.b),
            a: exposingResult.a
        };
    }, $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsAfterExposing, exposingListInnerResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(exposingListInnerResult.b, commentsAfterExposing),
            a: function () {
                var _v7 = exposingListInnerResult.a;
                if (_v7.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var exposingListInner = _v7.a;
                    return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(range, exposingListInner));
                }
            }()
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("exposing", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, inner) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(inner.b, commentsBefore),
            a: inner.a
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf4_fn($author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$mapWithRange_fn_unwrapped(function (range, comments) {
        return {
            b: comments,
            a: $elm$core$Maybe$Just($author$project$GrenSyntax$All(range))
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("...", $author$project$GrenParserLenient$whitespaceAndComments))), $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$mapWithRange_fn_unwrapped(function (range, comments) {
        return {
            b: comments,
            a: $elm$core$Maybe$Just($author$project$GrenSyntax$All(range))
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("..", $author$project$GrenParserLenient$whitespaceAndComments))), $author$project$ParserFast$symbol_fn(")", { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }), $author$project$ParserFast$followedBySymbol_fn(")", $author$project$GrenParserLenient$exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap($elm$core$Maybe$Just)))))), $author$project$GrenParserLenient$whitespaceAndComments, { b: $author$project$GrenParserLenient$ropeEmpty, a: $elm$core$Maybe$Nothing }));
    var $author$project$GrenParserLenient$effectWhereClause = $author$project$ParserFast$map4_fn_unwrapped(function (fnName, commentsAfterFnName, commentsAfterEqual, fnTypeName) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterEqual, commentsAfterFnName),
            a: _Utils_Tuple2(fnName, fnTypeName)
        };
    }, $author$project$GrenParserLenient$nameLowercaseUnderscoreSuffixingKeywords, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$symbolFollowedBy_fn("=", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$nameUppercaseNode);
    var $author$project$GrenParserLenient$listFirstWhere_fn = function (predicate, list) {
        listFirstWhere: while (true) {
            if (!list.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var x = list.a;
                var xs = list.b;
                if (predicate(x)) {
                    return $elm$core$Maybe$Just(x);
                }
                else {
                    var $temp$predicate = predicate, $temp$list = xs;
                    predicate = $temp$predicate;
                    list = $temp$list;
                    continue listFirstWhere;
                }
            }
        }
    }, $author$project$GrenParserLenient$listFirstWhere = F2($author$project$GrenParserLenient$listFirstWhere_fn);
    var $elm$core$Maybe$map_fn = function (f, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return $elm$core$Maybe$Just(f(value));
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $elm$core$Maybe$map = F2($elm$core$Maybe$map_fn);
    var $elm$core$Tuple$second = function (_v0) {
        var y = _v0.b;
        return y;
    };
    var $author$project$GrenParserLenient$whereBlock = $author$project$ParserFast$followedBySymbol_fn("}", $author$project$ParserFast$symbolFollowedBy_fn("{", $author$project$ParserFast$map4_fn_unwrapped(function (commentsBeforeHead, head, commentsAfterHead, tail) {
        var pairs = _List_Cons(head.a, tail.a);
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(tail.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterHead, $author$project$GrenParserLenient$ropePrependTo_fn(head.b, commentsBeforeHead))),
            a: {
                cv: $elm$core$Maybe$map_fn($elm$core$Tuple$second, $author$project$GrenParserLenient$listFirstWhere_fn(function (_v0) {
                    var fnName = _v0.a;
                    if (fnName === "command") {
                        return true;
                    }
                    else {
                        return false;
                    }
                }, pairs)),
                cH: $elm$core$Maybe$map_fn($elm$core$Tuple$second, $author$project$GrenParserLenient$listFirstWhere_fn(function (_v2) {
                    var fnName = _v2.a;
                    if (fnName === "subscription") {
                        return true;
                    }
                    else {
                        return false;
                    }
                }, pairs))
            }
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$effectWhereClause, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithComments($author$project$ParserFast$symbolFollowedBy_fn(",", $author$project$ParserFast$map3_fn_unwrapped(function (commentsBefore, v, commentsAfter) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropePrependTo_fn(v.b, commentsBefore)),
            a: v.a
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$effectWhereClause, $author$project$GrenParserLenient$whitespaceAndComments))))));
    var $author$project$GrenParserLenient$effectWhereClauses = $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, whereResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(whereResult.b, commentsBefore),
            a: whereResult.a
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("where", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$whereBlock);
    var $author$project$GrenParserLenient$exposing_ = $author$project$ParserFast$followedBySymbol_fn(")", $author$project$ParserFast$symbolFollowedBy_fn("(", $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, inner) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(inner.b, commentsBefore),
            a: inner.a
        };
    }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$ParserFast$oneOf3_fn($author$project$ParserFast$mapWithRange_fn_unwrapped(function (range, comments) {
        return {
            b: comments,
            a: $author$project$GrenSyntax$All(range)
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("...", $author$project$GrenParserLenient$whitespaceAndComments)), $author$project$ParserFast$mapWithRange_fn_unwrapped(function (range, comments) {
        return {
            b: comments,
            a: $author$project$GrenSyntax$All(range)
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("..", $author$project$GrenParserLenient$whitespaceAndComments)), $author$project$GrenParserLenient$exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap($elm$core$Basics$identity)))));
    var $author$project$GrenParserLenient$exposeDefinition = $author$project$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsAfterExposing, exposingListInnerResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(exposingListInnerResult.b, commentsAfterExposing),
            a: $author$project$GrenSyntax$Node_fn(range, exposingListInnerResult.a)
        };
    }, $author$project$ParserFast$symbolFollowedBy_fn("exposing", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$exposing_);
    var $author$project$ParserFast$map7WithRange_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        return function (s0) {
            var _v7 = parseA(s0);
            if (_v7.$ === 1) {
                var committed = _v7.a;
                var x = _v7.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v7.a;
                var s1 = _v7.b;
                var _v8 = parseB(s1);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v8.a;
                    var s2 = _v8.b;
                    var _v9 = parseC(s2);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v9.a;
                        var s3 = _v9.b;
                        var _v10 = parseD(s3);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v10.a;
                            var s4 = _v10.b;
                            var _v11 = parseE(s4);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v11.a;
                                var s5 = _v11.b;
                                var _v12 = parseF(s5);
                                if (_v12.$ === 1) {
                                    var x = _v12.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v12.a;
                                    var s6 = _v12.b;
                                    var _v13 = parseG(s6);
                                    if (_v13.$ === 1) {
                                        var x = _v13.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v13.a;
                                        var s7 = _v13.b;
                                        return $author$project$ParserFast$Good_fn(A8(func, {
                                            c: { o: s7.f, n: s7.n },
                                            d: { o: s0.f, n: s0.n }
                                        }, a, b, c, d, e, f, g), s7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map7WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
        var parseA = _v0;
        var parseB = _v1;
        var parseC = _v2;
        var parseD = _v3;
        var parseE = _v4;
        var parseF = _v5;
        var parseG = _v6;
        return function (s0) {
            var _v7 = parseA(s0);
            if (_v7.$ === 1) {
                var committed = _v7.a;
                var x = _v7.b;
                return $author$project$ParserFast$Bad_fn(committed, x);
            }
            else {
                var a = _v7.a;
                var s1 = _v7.b;
                var _v8 = parseB(s1);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $author$project$ParserFast$Bad_fn(true, x);
                }
                else {
                    var b = _v8.a;
                    var s2 = _v8.b;
                    var _v9 = parseC(s2);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $author$project$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var c = _v9.a;
                        var s3 = _v9.b;
                        var _v10 = parseD(s3);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $author$project$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var d = _v10.a;
                            var s4 = _v10.b;
                            var _v11 = parseE(s4);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $author$project$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var e = _v11.a;
                                var s5 = _v11.b;
                                var _v12 = parseF(s5);
                                if (_v12.$ === 1) {
                                    var x = _v12.b;
                                    return $author$project$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var f = _v12.a;
                                    var s6 = _v12.b;
                                    var _v13 = parseG(s6);
                                    if (_v13.$ === 1) {
                                        var x = _v13.b;
                                        return $author$project$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var g = _v13.a;
                                        var s7 = _v13.b;
                                        return $author$project$ParserFast$Good_fn(func({
                                            c: { o: s7.f, n: s7.n },
                                            d: { o: s0.f, n: s0.n }
                                        }, a, b, c, d, e, f, g), s7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
    }, $author$project$ParserFast$map7WithRange = F8($author$project$ParserFast$map7WithRange_fn);
    var $author$project$GrenParserLenient$effectModuleDefinition = $author$project$ParserFast$map7WithRange_fn_unwrapped(function (range, commentsAfterEffect, commentsAfterModule, name, commentsAfterName, whereClauses, commentsAfterWhereClauses, exp) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(exp.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterWhereClauses, $author$project$GrenParserLenient$ropePrependTo_fn(whereClauses.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterModule, commentsAfterEffect))))),
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$EffectModule({ cv: whereClauses.a.cv, a5: exp.a, ag: name, cH: whereClauses.a.cH }))
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("effect", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$keywordFollowedBy_fn("module", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$moduleName, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$effectWhereClauses, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$exposeDefinition);
    var $author$project$GrenParserLenient$normalModuleDefinition = $author$project$ParserFast$map4WithRange_fn_unwrapped(function (range, commentsAfterModule, moduleNameNode, commentsAfterModuleName, exposingList) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(exposingList.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterModuleName, commentsAfterModule)),
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$NormalModule({ a5: exposingList.a, ag: moduleNameNode }))
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("module", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$moduleName, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$exposeDefinition);
    var $author$project$GrenParserLenient$portModuleDefinition = $author$project$ParserFast$map5WithRange_fn_unwrapped(function (range, commentsAfterPort, commentsAfterModule, moduleNameNode, commentsAfterModuleName, exposingList) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(exposingList.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterModuleName, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfterModule, commentsAfterPort))),
            a: $author$project$GrenSyntax$Node_fn(range, $author$project$GrenSyntax$PortModule({ a5: exposingList.a, ag: moduleNameNode }))
        };
    }, $author$project$ParserFast$keywordFollowedBy_fn("port", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$ParserFast$keywordFollowedBy_fn("module", $author$project$GrenParserLenient$whitespaceAndComments), $author$project$GrenParserLenient$moduleName, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$exposeDefinition);
    var $author$project$GrenParserLenient$moduleHeader = $author$project$ParserFast$oneOf3_fn($author$project$GrenParserLenient$normalModuleDefinition, $author$project$GrenParserLenient$portModuleDefinition, $author$project$GrenParserLenient$effectModuleDefinition);
    var $author$project$GrenSyntax$nodeMap_fn = function (f, _v0) {
        var r = _v0.a;
        var a = _v0.b;
        return $author$project$GrenSyntax$Node_fn(r, f(a));
    }, $author$project$GrenSyntax$nodeMap = F2($author$project$GrenSyntax$nodeMap_fn);
    var $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedByComments = function (nextParser) {
        return $author$project$ParserFast$map2_fn_unwrapped(function (commentsBefore, afterComments) {
            return $author$project$GrenParserLenient$ropePrependTo_fn(afterComments, commentsBefore);
        }, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$topIndentedFollowedBy(nextParser));
    };
    var $author$project$GrenParserLenient$module_ = $author$project$ParserFast$map4_fn_unwrapped(function (moduleHeaderResult, moduleComments, importsResult, declarationsResult) {
        var moduleHeaderBasedOnExistingPorts = function (existingModuleHeaderInfo) {
            return $elm$core$List$any_fn(function (declarationAndLateImports) {
                return $author$project$GrenParserLenient$declarationIsPort($author$project$GrenSyntax$nodeValue(declarationAndLateImports.R));
            }, declarationsResult.a) ? $author$project$GrenSyntax$PortModule(existingModuleHeaderInfo) : $author$project$GrenSyntax$NormalModule(existingModuleHeaderInfo);
        };
        var importStartLocation = function () {
            var _v2 = importsResult.a;
            if (_v2.b) {
                var _v3 = _v2.a;
                var import0Range = _v3.a;
                return import0Range.d;
            }
            else {
                var _v4 = declarationsResult.a;
                if (_v4.b) {
                    var declarationAndLateImports0 = _v4.a;
                    return $author$project$GrenSyntax$nodeRange(declarationAndLateImports0.R).d;
                }
                else {
                    return { o: 1, n: 2 };
                }
            }
        }();
        return {
            b: $author$project$GrenParserLenient$commentsToList($author$project$GrenParserLenient$ropePrependTo_fn(declarationsResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(importsResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(moduleComments, moduleHeaderResult.b)))),
            b1: $elm$core$List$map_fn(function ($) {
                return $.R;
            }, declarationsResult.a),
            eb: _Utils_ap($elm$core$List$map_fn(function (_v0) {
                var lateImport = _v0.b;
                return $author$project$GrenSyntax$Node_fn({ c: importStartLocation, d: importStartLocation }, lateImport);
            }, $elm$core$List$concatMap_fn(function ($) {
                return $.dd;
            }, declarationsResult.a)), importsResult.a),
            eu: $author$project$GrenSyntax$nodeMap_fn(function (syntaxModuleHeader) {
                switch (syntaxModuleHeader.$) {
                    case 2:
                        var effectModuleHeader = syntaxModuleHeader.a;
                        return $author$project$GrenSyntax$EffectModule(effectModuleHeader);
                    case 0:
                        var normalModuleHeader = syntaxModuleHeader.a;
                        return moduleHeaderBasedOnExistingPorts(normalModuleHeader);
                    default:
                        var normalModuleHeader = syntaxModuleHeader.a;
                        return moduleHeaderBasedOnExistingPorts(normalModuleHeader);
                }
            }, moduleHeaderResult.a)
        };
    }, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedByWithComments($author$project$GrenParserLenient$moduleHeader), $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndentedFollowedByComments($author$project$ParserFast$map2OrSucceed_fn_unwrapped(function (moduleDocumentation, commentsAfter) {
        return $author$project$GrenParserLenient$ropeFilledPrependTo_fn(commentsAfter, $author$project$GrenParserLenient$ropeOne(moduleDocumentation));
    }, $author$project$GrenParserLenient$documentationComment, $author$project$GrenParserLenient$whitespaceAndCommentsEndsTopIndented, $author$project$GrenParserLenient$ropeEmpty)), $author$project$GrenParserLenient$manyWithComments($author$project$GrenParserLenient$importFollowedByWhitespaceAndComments), $author$project$GrenParserLenient$manyWithComments($author$project$GrenParserLenient$topIndentedFollowedBy($author$project$ParserFast$map3_fn_unwrapped(function (declarationParsed, commentsAfter, lateImportsResult) {
        return {
            b: $author$project$GrenParserLenient$ropePrependTo_fn(lateImportsResult.b, $author$project$GrenParserLenient$ropePrependTo_fn(commentsAfter, declarationParsed.b)),
            a: { R: declarationParsed.a, dd: lateImportsResult.a }
        };
    }, $author$project$GrenParserLenient$declaration, $author$project$GrenParserLenient$whitespaceAndComments, $author$project$GrenParserLenient$manyWithComments($author$project$GrenParserLenient$importFollowedByWhitespaceAndComments)))));
    var $author$project$GrenPrintDefunctionalized$locationCompareFast_fn = function (left, right) {
        return ((left.n - right.n) < 0) ? 0 : (((left.n - right.n) > 0) ? 2 : _Utils_compare_fn(left.o, right.o));
    }, $author$project$GrenPrintDefunctionalized$locationCompareFast = F2($author$project$GrenPrintDefunctionalized$locationCompareFast_fn);
    var $author$project$GrenPrintDefunctionalized$commentsAfter_fn = function (end, sortedComments) {
        commentsAfter: while (true) {
            if (!sortedComments.b) {
                return _List_Nil;
            }
            else {
                var _v1 = sortedComments.a;
                var headCommentRange = _v1.a;
                var headComment = _v1.b;
                var tailComments = sortedComments.b;
                var _v2 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.d, end);
                switch (_v2) {
                    case 0:
                        var $temp$end = end, $temp$sortedComments = tailComments;
                        end = $temp$end;
                        sortedComments = $temp$sortedComments;
                        continue commentsAfter;
                    case 2:
                        return _List_Cons(headComment, $elm$core$List$map_fn($author$project$GrenSyntax$nodeValue, tailComments));
                    default:
                        return _List_Cons(headComment, $elm$core$List$map_fn($author$project$GrenSyntax$nodeValue, tailComments));
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$commentsAfter = F2($author$project$GrenPrintDefunctionalized$commentsAfter_fn);
    var $author$project$GrenPrintDefunctionalized$commentsInRange_fn = function (range, sortedComments) {
        commentsInRange: while (true) {
            if (!sortedComments.b) {
                return _List_Nil;
            }
            else {
                var _v1 = sortedComments.a;
                var headCommentRange = _v1.a;
                var headComment = _v1.b;
                var tailComments = sortedComments.b;
                var _v2 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.d, range.d);
                switch (_v2) {
                    case 0:
                        var $temp$range = range, $temp$sortedComments = tailComments;
                        range = $temp$range;
                        sortedComments = $temp$sortedComments;
                        continue commentsInRange;
                    case 1:
                        return _List_Cons(headComment, $author$project$GrenPrintDefunctionalized$commentsInRange_fn(range, tailComments));
                    default:
                        var _v3 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.c, range.c);
                        switch (_v3) {
                            case 2:
                                return _List_Nil;
                            case 0:
                                return _List_Cons(headComment, $author$project$GrenPrintDefunctionalized$commentsInRange_fn(range, tailComments));
                            default:
                                return _List_Cons(headComment, $author$project$GrenPrintDefunctionalized$commentsInRange_fn(range, tailComments));
                        }
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$commentsInRange = F2($author$project$GrenPrintDefunctionalized$commentsInRange_fn);
    var $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn = function (range, sortedComments) {
        commentNodesInRange: while (true) {
            if (!sortedComments.b) {
                return _List_Nil;
            }
            else {
                var headCommentNode = sortedComments.a;
                var tailComments = sortedComments.b;
                var _v1 = headCommentNode;
                var headCommentRange = _v1.a;
                var _v2 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.d, range.d);
                switch (_v2) {
                    case 0:
                        var $temp$range = range, $temp$sortedComments = tailComments;
                        range = $temp$range;
                        sortedComments = $temp$sortedComments;
                        continue commentNodesInRange;
                    case 1:
                        return _List_Cons(headCommentNode, $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn(range, tailComments));
                    default:
                        var _v3 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.c, range.c);
                        switch (_v3) {
                            case 2:
                                return _List_Nil;
                            case 0:
                                return _List_Cons(headCommentNode, $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn(range, tailComments));
                            default:
                                return _List_Cons(headCommentNode, $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn(range, tailComments));
                        }
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$commentNodesInRange = F2($author$project$GrenPrintDefunctionalized$commentNodesInRange_fn);
    var $author$project$Print$SingleLine = 0;
    var $author$project$Print$MultipleLines = 1;
    var $elm$core$String$dropLeft_fn = function (n, string) {
        return (n < 1) ? string : _String_slice_fn(n, $elm$core$String$length(string), string);
    }, $elm$core$String$dropLeft = F2($elm$core$String$dropLeft_fn);
    var $elm$core$String$dropRight_fn = function (n, string) {
        return (n < 1) ? string : _String_slice_fn(0, -n, string);
    }, $elm$core$String$dropRight = F2($elm$core$String$dropRight_fn);
    var $author$project$Print$Exact_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$Print$Exact = F2($author$project$Print$Exact_fn);
    var $author$project$Print$exactly = function (exactNextString) {
        return $author$project$Print$Exact_fn(exactNextString, 0);
    };
    var $author$project$Print$FollowedBy_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$Print$FollowedBy = F2($author$project$Print$FollowedBy_fn);
    var $author$project$Print$followedBy = $author$project$Print$FollowedBy;
    var $author$project$Print$LinebreakIndented_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $author$project$Print$LinebreakIndented = F2($author$project$Print$LinebreakIndented_fn);
    var $author$project$Print$linebreakIndented = $author$project$Print$LinebreakIndented_fn(0, 0);
    var $elm$core$String$lines = _String_lines;
    var $author$project$GrenPrintDefunctionalized$listDropLastIfIs_fn = function (lastElementShouldBeRemoved, list) {
        if (!list.b) {
            return _List_Nil;
        }
        else {
            if (!list.b.b) {
                var onlyElement = list.a;
                return lastElementShouldBeRemoved(onlyElement) ? _List_Nil : _List_fromArray([onlyElement]);
            }
            else {
                var element0 = list.a;
                var _v1 = list.b;
                var element1 = _v1.a;
                var element2Up = _v1.b;
                return _List_Cons(element0, $author$project$GrenPrintDefunctionalized$listDropLastIfIs_fn(lastElementShouldBeRemoved, _List_Cons(element1, element2Up)));
            }
        }
    }, $author$project$GrenPrintDefunctionalized$listDropLastIfIs = F2($author$project$GrenPrintDefunctionalized$listDropLastIfIs_fn);
    var $author$project$Print$empty = $author$project$Print$exactly("");
    var $author$project$Print$listMapAndFlatten_fn = function (elementToPrint, elements) {
        return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
            return $author$project$Print$FollowedBy_fn(elementToPrint(next), soFar);
        }, $author$project$Print$empty, elements);
    }, $author$project$Print$listMapAndFlatten = F2($author$project$Print$listMapAndFlatten_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningDotDotCurlyClosing = $author$project$Print$exactly("{--}");
    var $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningMinus = $author$project$Print$exactly("{-");
    var $author$project$GrenPrintDefunctionalized$printExactlyMinusCurlyClosing = $author$project$Print$exactly("-}");
    var $author$project$GrenPrintDefunctionalized$printExactlySpaceSpace = $author$project$Print$exactly("  ");
    var $elm$core$String$startsWith = _String_startsWith;
    var $elm$core$String$trim = _String_trim;
    var $elm$core$String$trimLeft = _String_trimLeft;
    var $elm$core$String$trimRight = _String_trimRight;
    var $elm$core$List$maybeCons_fn = function (f, mx, xs) {
        var _v0 = f(mx);
        if (!_v0.$) {
            var x = _v0.a;
            return _List_Cons(x, xs);
        }
        else {
            return xs;
        }
    }, $elm$core$List$maybeCons = F3($elm$core$List$maybeCons_fn);
    var $elm$core$List$filterMap_fn = function (f, xs) {
        return $elm$core$List$foldr_fn($elm$core$List$maybeCons(f), _List_Nil, xs);
    }, $elm$core$List$filterMap = F2($elm$core$List$filterMap_fn);
    var $elm$core$String$foldl = _String_foldl;
    var $author$project$GrenPrintDefunctionalized$spaceCount0OnlySpacesTrue = { cg: true, bA: 0 };
    var $author$project$GrenPrintDefunctionalized$lineIndentation = function (line) {
        return _String_foldl_fn_unwrapped(function (_char, soFar) {
            if (soFar.cg) {
                if (" " === _char) {
                    return { cg: true, bA: soFar.bA + 1 };
                }
                else {
                    return { cg: false, bA: soFar.bA };
                }
            }
            else {
                return soFar;
            }
        }, $author$project$GrenPrintDefunctionalized$spaceCount0OnlySpacesTrue, line).bA;
    };
    var $elm$core$Basics$min_fn = function (x, y) {
        return (_Utils_cmp(x, y) < 0) ? x : y;
    }, $elm$core$Basics$min = F2($elm$core$Basics$min_fn);
    var $elm$core$List$minimum = function (list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just($elm$core$List$foldl_fn($elm$core$Basics$min, x, xs));
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$GrenPrintDefunctionalized$unindent = function (lines) {
        var nonBlankLines = $elm$core$List$filterMap_fn(function (line) {
            var _v1 = $elm$core$String$trim(line);
            if (_v1 === "") {
                return $elm$core$Maybe$Nothing;
            }
            else {
                return $elm$core$Maybe$Just(line);
            }
        }, lines);
        var _v0 = $elm$core$List$minimum($elm$core$List$map_fn($author$project$GrenPrintDefunctionalized$lineIndentation, nonBlankLines));
        if (_v0.$ === 1) {
            return lines;
        }
        else {
            var minimumIndentation = _v0.a;
            return $elm$core$List$map_fn(function (line) {
                return $elm$core$String$dropLeft_fn(minimumIndentation, line);
            }, lines);
        }
    };
    var $author$project$GrenPrintDefunctionalized$comment = function (syntaxComment) {
        if (syntaxComment === "{--}") {
            return $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningDotDotCurlyClosing;
        }
        else {
            var nonDirectlyClosingMultiLineComment = syntaxComment;
            if (_String_startsWith_fn("--", nonDirectlyClosingMultiLineComment)) {
                return $author$project$Print$exactly($elm$core$String$trimRight(nonDirectlyClosingMultiLineComment));
            }
            else {
                var commentContentLines = $elm$core$String$lines($elm$core$String$dropRight_fn(2, $elm$core$String$dropLeft_fn(2, nonDirectlyClosingMultiLineComment)));
                var commentContentNormal = function () {
                    if (!commentContentLines.b) {
                        return _List_Nil;
                    }
                    else {
                        var commentContentLine0 = commentContentLines.a;
                        var commentContentLine1Up = commentContentLines.b;
                        return $elm$core$List$map_fn($elm$core$String$trimRight, _List_Cons($elm$core$String$trimLeft(commentContentLine0), $author$project$GrenPrintDefunctionalized$unindent($author$project$GrenPrintDefunctionalized$listDropLastIfIs_fn(function (line) {
                            var _v6 = $elm$core$String$trim(line);
                            if (_v6 === "") {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }, commentContentLine1Up))));
                    }
                }();
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyMinusCurlyClosing, $author$project$Print$FollowedBy_fn(function () {
                    if (!commentContentNormal.b) {
                        return $author$project$GrenPrintDefunctionalized$printExactlySpaceSpace;
                    }
                    else {
                        if (!commentContentNormal.b.b) {
                            var singleLine = commentContentNormal.a;
                            return $author$project$Print$exactly(" " + (singleLine + " "));
                        }
                        else {
                            var firstLine = commentContentNormal.a;
                            var _v2 = commentContentNormal.b;
                            var secondLine = _v2.a;
                            var thirdLineUp = _v2.b;
                            return $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndFlatten_fn(function (line) {
                                if (line === "") {
                                    return $author$project$Print$linebreakIndented;
                                }
                                else {
                                    var lineNotEmpty = line;
                                    return $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$exactly("   " + lineNotEmpty));
                                }
                            }, _List_Cons(secondLine, thirdLineUp)), function () {
                                if (firstLine === "") {
                                    return $author$project$Print$linebreakIndented;
                                }
                                else {
                                    var lineNotEmpty = firstLine;
                                    return $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$exactly(" " + lineNotEmpty));
                                }
                            }());
                        }
                    }
                }(), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningMinus));
            }
        }
    };
    var $elm$core$String$contains = _String_contains;
    var $author$project$GrenPrintDefunctionalized$commentCanBePartOfCollapsible = function (syntaxComment) {
        if (syntaxComment === "{--}") {
            return false;
        }
        else {
            var commentNotDirectlyClosed = syntaxComment;
            return _String_startsWith_fn("{-", commentNotDirectlyClosed) && (!_String_contains_fn("\n", commentNotDirectlyClosed));
        }
    };
    var $author$project$Print$listMapAndIntersperseAndFlatten_fn = function (elementToPrint, inBetweenPrint, prints) {
        if (!prints.b) {
            return $author$project$Print$empty;
        }
        else {
            var head = prints.a;
            var tail = prints.b;
            return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
                return $author$project$Print$FollowedBy_fn(elementToPrint(next), $author$project$Print$FollowedBy_fn(inBetweenPrint, soFar));
            }, elementToPrint(head), tail);
        }
    }, $author$project$Print$listMapAndIntersperseAndFlatten = F3($author$project$Print$listMapAndIntersperseAndFlatten_fn);
    var $author$project$GrenPrintDefunctionalized$comments = function (syntaxComments) {
        return $author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$GrenPrintDefunctionalized$comment, $author$project$Print$linebreakIndented, syntaxComments);
    };
    var $author$project$Print$listIntersperseAndFlatten_fn = function (inBetweenPrint, elements) {
        if (!elements.b) {
            return $author$project$Print$empty;
        }
        else {
            var head = elements.a;
            var tail = elements.b;
            return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
                return $author$project$Print$FollowedBy_fn(next, $author$project$Print$FollowedBy_fn(inBetweenPrint, soFar));
            }, head, tail);
        }
    }, $author$project$Print$listIntersperseAndFlatten = F2($author$project$Print$listIntersperseAndFlatten_fn);
    var $author$project$GrenPrintDefunctionalized$printEmptyLineSpreadSingleLine = { l: 0, m: $author$project$Print$empty };
    var $author$project$GrenPrintDefunctionalized$printExactlySpace = $author$project$Print$exactly(" ");
    var $author$project$Print$indentAtMost4 = function (atMost4) {
        switch (atMost4) {
            case 1:
                return " ";
            case 2:
                return "  ";
            case 3:
                return "   ";
            default:
                return "    ";
        }
    };
    var $author$project$Print$indentInverseRemainderBy4 = function (inverseRemainderBy4) {
        switch (inverseRemainderBy4) {
            case 0:
                return "    ";
            case 1:
                return "   ";
            case 2:
                return "  ";
            default:
                return " ";
        }
    };
    var $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn = function (indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, print) {
        toStringWithIndentAndLinebreakIndentAsStringWithRight: while (true) {
            switch (print.$) {
                case 0:
                    var string = print.a;
                    return string + (right + "");
                case 1:
                    var b = print.a;
                    var a = print.b;
                    var $temp$indentIgnoringMultiplesOfBy4 = indentIgnoringMultiplesOfBy4, $temp$linebreakIndentAsString = linebreakIndentAsString, $temp$right = $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, b), $temp$print = a;
                    indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                    linebreakIndentAsString = $temp$linebreakIndentAsString;
                    right = $temp$right;
                    print = $temp$print;
                    continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
                case 2:
                    return "\n" + right;
                case 3:
                    return linebreakIndentAsString + (right + "");
                case 4:
                    var increase = print.a;
                    var innerPrint = print.b;
                    var $temp$indentIgnoringMultiplesOfBy4 = (indentIgnoringMultiplesOfBy4 + increase) + 0, $temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentAtMost4(increase) + ""), $temp$right = right, $temp$print = innerPrint;
                    indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                    linebreakIndentAsString = $temp$linebreakIndentAsString;
                    right = $temp$right;
                    print = $temp$print;
                    continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
                default:
                    var innerPrint = print.a;
                    var $temp$indentIgnoringMultiplesOfBy4 = 0, $temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentInverseRemainderBy4(indentIgnoringMultiplesOfBy4 - (((indentIgnoringMultiplesOfBy4 / 4) | 0) * 4)) + ""), $temp$right = right, $temp$print = innerPrint;
                    indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                    linebreakIndentAsString = $temp$linebreakIndentAsString;
                    right = $temp$right;
                    print = $temp$print;
                    continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
            }
        }
    }, $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight = F4($author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn);
    var $author$project$Print$toStringWithIndent_fn = function (indent, print) {
        return $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn(indent, "\n", "", print);
    }, $author$project$Print$toStringWithIndent = F2($author$project$Print$toStringWithIndent_fn);
    var $author$project$Print$toString = function (print) {
        return $author$project$Print$toStringWithIndent_fn(0, print);
    };
    var $author$project$GrenPrintDefunctionalized$collapsibleComments = function (commentsToPrint) {
        if (!commentsToPrint.b) {
            return $author$project$GrenPrintDefunctionalized$printEmptyLineSpreadSingleLine;
        }
        else {
            var comment0 = commentsToPrint.a;
            var comment1Up = commentsToPrint.b;
            var commentPrints = $elm$core$List$map_fn($author$project$GrenPrintDefunctionalized$comment, _List_Cons(comment0, comment1Up));
            return $elm$core$List$all_fn(function (commentPrint) {
                return $author$project$GrenPrintDefunctionalized$commentCanBePartOfCollapsible($author$project$Print$toString(commentPrint));
            }, commentPrints) ? {
                l: 0,
                m: $author$project$Print$listIntersperseAndFlatten_fn($author$project$GrenPrintDefunctionalized$printExactlySpace, commentPrints)
            } : {
                l: 1,
                m: $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))
            };
        }
    };
    var $author$project$Print$Linebreak_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $author$project$Print$Linebreak = F2($author$project$Print$Linebreak_fn);
    var $author$project$Print$linebreak = $author$project$Print$Linebreak_fn(0, 0);
    var $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak = $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$linebreak);
    var $author$project$GrenPrintDefunctionalized$moduleLevgrenultiLneCommentWithoutWhitespace = $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningDotDotCurlyClosing, $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak));
    var $author$project$GrenPrintDefunctionalized$moduleLevelComments = function (syntaxComments) {
        if (!syntaxComments.b) {
            return $author$project$Print$empty;
        }
        else {
            var comment0 = syntaxComments.a;
            var comment1Up = syntaxComments.b;
            return $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndFlatten_fn(function (syntaxComment) {
                if (syntaxComment === "{--}") {
                    return $author$project$GrenPrintDefunctionalized$moduleLevgrenultiLneCommentWithoutWhitespace;
                }
                else {
                    var notEmptyMultiLineComment = syntaxComment;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$GrenPrintDefunctionalized$comment(notEmptyMultiLineComment));
                }
            }, comment1Up), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$GrenPrintDefunctionalized$comment(comment0)));
        }
    };
    var $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak = $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$linebreak));
    var $author$project$GrenPrintDefunctionalized$commentsBetweenDocumentationAndDeclaration = function (syntaxComments) {
        if (!syntaxComments.b) {
            return $author$project$Print$empty;
        }
        else {
            var comment0 = syntaxComments.a;
            var comment1Up = syntaxComments.b;
            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printLinebreakLinebreak, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(comment0, comment1Up)), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak));
        }
    };
    var $author$project$Print$lineSpreadWithRemaining_fn = function (print, remainingPrints) {
        lineSpreadWithRemaining: while (true) {
            switch (print.$) {
                case 0:
                    if (!remainingPrints.b) {
                        return 0;
                    }
                    else {
                        var nextPrint = remainingPrints.a;
                        var nextRemainingPrints = remainingPrints.b;
                        var $temp$print = nextPrint, $temp$remainingPrints = nextRemainingPrints;
                        print = $temp$print;
                        remainingPrints = $temp$remainingPrints;
                        continue lineSpreadWithRemaining;
                    }
                case 1:
                    var b = print.a;
                    var a = print.b;
                    var $temp$print = a, $temp$remainingPrints = _List_Cons(b, remainingPrints);
                    print = $temp$print;
                    remainingPrints = $temp$remainingPrints;
                    continue lineSpreadWithRemaining;
                case 2:
                    return 1;
                case 3:
                    return 1;
                case 4:
                    var innerPrint = print.b;
                    var $temp$print = innerPrint, $temp$remainingPrints = remainingPrints;
                    print = $temp$print;
                    remainingPrints = $temp$remainingPrints;
                    continue lineSpreadWithRemaining;
                default:
                    var innerPrint = print.a;
                    var $temp$print = innerPrint, $temp$remainingPrints = remainingPrints;
                    print = $temp$print;
                    remainingPrints = $temp$remainingPrints;
                    continue lineSpreadWithRemaining;
            }
        }
    }, $author$project$Print$lineSpreadWithRemaining = F2($author$project$Print$lineSpreadWithRemaining_fn);
    var $author$project$Print$lineSpread = function (print) {
        lineSpread: while (true) {
            switch (print.$) {
                case 0:
                    return 0;
                case 1:
                    var b = print.a;
                    var a = print.b;
                    return $author$project$Print$lineSpreadWithRemaining_fn(a, _List_fromArray([b]));
                case 2:
                    return 1;
                case 3:
                    return 1;
                case 4:
                    var innerPrint = print.b;
                    var $temp$print = innerPrint;
                    print = $temp$print;
                    continue lineSpread;
                default:
                    var innerPrint = print.a;
                    var $temp$print = innerPrint;
                    print = $temp$print;
                    continue lineSpread;
            }
        }
    };
    var $author$project$Print$lineSpreadListMapAndCombine_fn = function (elementLineSpread, lineSpreads) {
        lineSpreadListMapAndCombine: while (true) {
            if (!lineSpreads.b) {
                return 0;
            }
            else {
                var head = lineSpreads.a;
                var tail = lineSpreads.b;
                var _v1 = elementLineSpread(head);
                if (_v1 === 1) {
                    return 1;
                }
                else {
                    var $temp$elementLineSpread = elementLineSpread, $temp$lineSpreads = tail;
                    elementLineSpread = $temp$elementLineSpread;
                    lineSpreads = $temp$lineSpreads;
                    continue lineSpreadListMapAndCombine;
                }
            }
        }
    }, $author$project$Print$lineSpreadListMapAndCombine = F2($author$project$Print$lineSpreadListMapAndCombine_fn);
    var $author$project$Print$lineSpreadMergeWith_fn = function (bLineSpreadLazy, aLineSpread) {
        if (aLineSpread === 1) {
            return 1;
        }
        else {
            return bLineSpreadLazy(0);
        }
    }, $author$project$Print$lineSpreadMergeWith = F2($author$project$Print$lineSpreadMergeWith_fn);
    var $author$project$Print$listReverseAndMapAndFlatten_fn = function (elementToPrint, elements) {
        return $elm$core$List$foldr_fn(F2(function (next, soFar) {
            return $author$project$Print$FollowedBy_fn(elementToPrint(next), soFar);
        }), $author$project$Print$empty, elements);
    }, $author$project$Print$listReverseAndMapAndFlatten = F2($author$project$Print$listReverseAndMapAndFlatten_fn);
    var $author$project$Print$space = $author$project$Print$exactly(" ");
    var $author$project$Print$spaceOrLinebreakIndented = function (lineSpreadToUse) {
        if (!lineSpreadToUse) {
            return $author$project$Print$space;
        }
        else {
            return $author$project$Print$linebreakIndented;
        }
    };
    var $author$project$Print$WithIndentAtNextMultipleOf4_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $author$project$Print$WithIndentAtNextMultipleOf4 = F2($author$project$Print$WithIndentAtNextMultipleOf4_fn);
    var $author$project$Print$withIndentAtNextMultipleOf4 = function (print) {
        return $author$project$Print$WithIndentAtNextMultipleOf4_fn(print, 0);
    };
    var $author$project$GrenPrintDefunctionalized$construct_fn = function (specific, syntaxComments, syntaxConstruct) {
        var argumentPrintsAndCommentsBeforeReverse = $elm$core$List$foldl_fn_unwrapped(function (argument, soFar) {
            var print = A2(specific.ck, syntaxComments, argument);
            return {
                j: $author$project$GrenSyntax$nodeRange(argument).c,
                h: _List_Cons(function () {
                    var _v1 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: $author$project$GrenSyntax$nodeRange(argument).d,
                        d: soFar.j
                    }, syntaxComments);
                    if (!_v1.b) {
                        return print;
                    }
                    else {
                        var comment0 = _v1.a;
                        var comment1Up = _v1.b;
                        var commentsBeforeArgument = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v2) {
                            return $author$project$Print$lineSpread(print);
                        }, commentsBeforeArgument.l)), commentsBeforeArgument.m));
                    }
                }(), soFar.h)
            };
        }, { j: syntaxConstruct.i.d, h: _List_Nil }, syntaxConstruct.W).h;
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v0) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, argumentPrintsAndCommentsBeforeReverse);
        }, specific._);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$listReverseAndMapAndFlatten_fn(function (argumentPrintWithCommentsBefore) {
            return $author$project$Print$FollowedBy_fn(argumentPrintWithCommentsBefore, $author$project$Print$spaceOrLinebreakIndented(lineSpread));
        }, argumentPrintsAndCommentsBeforeReverse)), $author$project$Print$exactly(syntaxConstruct.d));
    }, $author$project$GrenPrintDefunctionalized$construct = F3($author$project$GrenPrintDefunctionalized$construct_fn);
    var $author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn = function (elementToPrint, inBetweenPrint, elements) {
        if (!elements.b) {
            return $author$project$Print$empty;
        }
        else {
            var head = elements.a;
            var tail = elements.b;
            return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
                return $author$project$Print$FollowedBy_fn(soFar, $author$project$Print$FollowedBy_fn(inBetweenPrint, elementToPrint(next)));
            }, elementToPrint(head), tail);
        }
    }, $author$project$Print$listReverseAndMapAndIntersperseAndFlatten = F3($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyEqualsSpace = $author$project$Print$exactly("= ");
    var $author$project$GrenPrintDefunctionalized$printExactlyType = $author$project$Print$exactly("type");
    var $author$project$GrenPrintDefunctionalized$printExactlyVerticalBarSpace = $author$project$Print$exactly("| ");
    var $author$project$GrenPrintDefunctionalized$printLinebreakIndentedVerticalBarSpace = $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyVerticalBarSpace, $author$project$Print$linebreakIndented);
    var $author$project$Print$emptyOrLinebreakIndented = function (lineSpreadToUse) {
        if (!lineSpreadToUse) {
            return $author$project$Print$empty;
        }
        else {
            return $author$project$Print$linebreakIndented;
        }
    };
    var $author$project$GrenPrintDefunctionalized$lineSpreadInRange = function (range) {
        return (!(range.c.n - range.d.n)) ? 0 : 1;
    };
    var $author$project$GrenPrintDefunctionalized$printExactlyCommaSpace = $author$project$Print$exactly(", ");
    var $author$project$GrenPrintDefunctionalized$printExactlyParensClosing = $author$project$Print$exactly(")");
    var $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace = $author$project$Print$exactly("( ");
    var $author$project$Print$WithIndentIncreasedBy_fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $author$project$Print$WithIndentIncreasedBy = F2($author$project$Print$WithIndentIncreasedBy_fn);
    var $author$project$Print$withIndentIncreasedBy = $author$project$Print$WithIndentIncreasedBy;
    var $author$project$GrenPrintDefunctionalized$invalidNTuple_fn = function (printPartNotParenthesized, syntaxComments, syntaxTuple) {
        var lineSpread = $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxTuple.i);
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (part) {
            return $author$project$Print$WithIndentIncreasedBy_fn(2, A2(printPartNotParenthesized, syntaxComments, part));
        }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), _List_Cons(syntaxTuple.P, _List_Cons(syntaxTuple.Q, _List_Cons(syntaxTuple.av, _List_Cons(syntaxTuple.ch, syntaxTuple.ci))))), $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace)));
    }, $author$project$GrenPrintDefunctionalized$invalidNTuple_fn_unwrapped = function (printPartNotParenthesized, syntaxComments, syntaxTuple) {
        var lineSpread = $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxTuple.i);
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (part) {
            return $author$project$Print$WithIndentIncreasedBy_fn(2, printPartNotParenthesized(syntaxComments, part));
        }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), _List_Cons(syntaxTuple.P, _List_Cons(syntaxTuple.Q, _List_Cons(syntaxTuple.av, _List_Cons(syntaxTuple.ch, syntaxTuple.ci))))), $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace)));
    }, $author$project$GrenPrintDefunctionalized$invalidNTuple = F3($author$project$GrenPrintDefunctionalized$invalidNTuple_fn);
    var $author$project$Print$lineSpreadMergeWithStrict_fn = function (bLineSpreadLazy, aLineSpread) {
        if (aLineSpread === 1) {
            return 1;
        }
        else {
            return bLineSpreadLazy;
        }
    }, $author$project$Print$lineSpreadMergeWithStrict = F2($author$project$Print$lineSpreadMergeWithStrict_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyParensOpening = $author$project$Print$exactly("(");
    var $author$project$GrenPrintDefunctionalized$parenthesized_fn = function (printNotParenthesized, syntax, syntaxComments) {
        var notParenthesizedPrint = A2(printNotParenthesized, syntaxComments, syntax.ah);
        var commentsBeforeInner = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntax.ah).d,
            d: syntax.i.d
        }, syntaxComments);
        var commentsBeforeInnerCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeInner);
        var commentsAfterInner = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: syntax.i.c,
            d: $author$project$GrenSyntax$nodeRange(syntax.ah).c
        }, syntaxComments);
        var commentsAfterInnerCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsAfterInner);
        var lineSpread = $author$project$Print$lineSpreadMergeWithStrict_fn(commentsAfterInnerCollapsible.l, $author$project$Print$lineSpreadMergeWithStrict_fn(commentsBeforeInnerCollapsible.l, $author$project$Print$lineSpread(notParenthesizedPrint)));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, $author$project$Print$FollowedBy_fn(function () {
            if (!commentsAfterInner.b) {
                return $author$project$Print$empty;
            }
            else {
                return $author$project$Print$FollowedBy_fn(commentsAfterInnerCollapsible.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread));
            }
        }(), function () {
            if (!commentsBeforeInner.b) {
                return notParenthesizedPrint;
            }
            else {
                return $author$project$Print$FollowedBy_fn(notParenthesizedPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), commentsBeforeInnerCollapsible.m));
            }
        }())), $author$project$GrenPrintDefunctionalized$printExactlyParensOpening)));
    }, $author$project$GrenPrintDefunctionalized$parenthesized_fn_unwrapped = function (printNotParenthesized, syntax, syntaxComments) {
        var notParenthesizedPrint = printNotParenthesized(syntaxComments, syntax.ah);
        var commentsBeforeInner = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntax.ah).d,
            d: syntax.i.d
        }, syntaxComments);
        var commentsBeforeInnerCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeInner);
        var commentsAfterInner = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: syntax.i.c,
            d: $author$project$GrenSyntax$nodeRange(syntax.ah).c
        }, syntaxComments);
        var commentsAfterInnerCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsAfterInner);
        var lineSpread = $author$project$Print$lineSpreadMergeWithStrict_fn(commentsAfterInnerCollapsible.l, $author$project$Print$lineSpreadMergeWithStrict_fn(commentsBeforeInnerCollapsible.l, $author$project$Print$lineSpread(notParenthesizedPrint)));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, $author$project$Print$FollowedBy_fn(function () {
            if (!commentsAfterInner.b) {
                return $author$project$Print$empty;
            }
            else {
                return $author$project$Print$FollowedBy_fn(commentsAfterInnerCollapsible.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread));
            }
        }(), function () {
            if (!commentsBeforeInner.b) {
                return notParenthesizedPrint;
            }
            else {
                return $author$project$Print$FollowedBy_fn(notParenthesizedPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), commentsBeforeInnerCollapsible.m));
            }
        }())), $author$project$GrenPrintDefunctionalized$printExactlyParensOpening)));
    }, $author$project$GrenPrintDefunctionalized$parenthesized = F3($author$project$GrenPrintDefunctionalized$parenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing = $author$project$Print$exactly("}");
    var $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningSpace = $author$project$Print$exactly("{ ");
    var $author$project$GrenPrintDefunctionalized$printExactlyMinusGreaterThan = $author$project$Print$exactly("->");
    var $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed = $author$project$Print$exactly("()");
    var $author$project$GrenPrintDefunctionalized$listMapAndFlattenToString_fn = function (elementToString, elements) {
        return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
            return soFar + (elementToString(next) + "");
        }, "", elements);
    }, $author$project$GrenPrintDefunctionalized$listMapAndFlattenToString = F2($author$project$GrenPrintDefunctionalized$listMapAndFlattenToString_fn);
    var $author$project$GrenPrintDefunctionalized$qualifiedReference = function (syntaxReference) {
        var _v0 = syntaxReference.cl;
        if (!_v0.b) {
            return syntaxReference.bR;
        }
        else {
            var modulePartHead = _v0.a;
            var modulePartTail = _v0.b;
            return modulePartHead + ($author$project$GrenPrintDefunctionalized$listMapAndFlattenToString_fn(function (modulePart) {
                return "." + modulePart;
            }, modulePartTail) + ("." + syntaxReference.bR));
        }
    };
    var $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpening = $author$project$Print$exactly("{");
    var $author$project$GrenPrintDefunctionalized$recordLiteral_fn = function (fieldSpecific, syntaxComments, syntaxRecord) {
        var _v0 = syntaxRecord.aE;
        if (!_v0.b) {
            return $author$project$Print$FollowedBy_fn(function () {
                var _v1 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(syntaxRecord.i, syntaxComments);
                if (!_v1.b) {
                    return $author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing;
                }
                else {
                    var comment0 = _v1.a;
                    var comment1Up = _v1.b;
                    var commentsCollapsed = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(commentsCollapsed.l), $author$project$Print$WithIndentIncreasedBy_fn(1, commentsCollapsed.m)));
                }
            }(), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpening);
        }
        else {
            var field0 = _v0.a;
            var field1Up = _v0.b;
            var fieldPrintsAndComments = $elm$core$List$foldl_fn_unwrapped(function (_v17, soFar) {
                var _v18 = _v17.b;
                var _v19 = _v18.a;
                var fieldNameRange = _v19.a;
                var fieldName = _v19.b;
                var fieldValueNode = _v18.b;
                var commentsBeforeName = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldNameRange.d, d: soFar.j }, syntaxComments);
                var _v20 = fieldValueNode;
                var fieldValueRange = _v20.a;
                var commentsBetweenNameAndValue = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldValueRange.d, d: fieldNameRange.d }, syntaxComments);
                return {
                    j: fieldValueRange.c,
                    h: _List_Cons({
                        bt: function () {
                            if (!commentsBeforeName.b) {
                                return $elm$core$Maybe$Nothing;
                            }
                            else {
                                var comment0 = commentsBeforeName.a;
                                var comment1Up = commentsBeforeName.b;
                                return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                            }
                        }(),
                        bu: function () {
                            if (!commentsBetweenNameAndValue.b) {
                                return $elm$core$Maybe$Nothing;
                            }
                            else {
                                var comment0 = commentsBetweenNameAndValue.a;
                                var comment1Up = commentsBetweenNameAndValue.b;
                                return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                            }
                        }(),
                        a: _Utils_Tuple2($author$project$GrenSyntax$Node_fn(fieldNameRange, fieldName), fieldValueNode),
                        aC: A2(fieldSpecific.cE, syntaxComments, fieldValueNode)
                    }, soFar.h)
                };
            }, { j: syntaxRecord.i.d, h: _List_Nil }, _List_Cons(field0, field1Up));
            var commentsAfterFields = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxRecord.i.c, d: fieldPrintsAndComments.j }, syntaxComments);
            var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v15) {
                if (!commentsAfterFields.b) {
                    return 0;
                }
                else {
                    return 1;
                }
            }, $author$project$Print$lineSpreadMergeWith_fn(function (_v10) {
                return $author$project$Print$lineSpreadListMapAndCombine_fn(function (field) {
                    return $author$project$Print$lineSpreadMergeWith_fn(function (_v13) {
                        var _v14 = field.bu;
                        if (_v14.$ === 1) {
                            return 0;
                        }
                        else {
                            var commentsBetweenNameAndValue = _v14.a;
                            return commentsBetweenNameAndValue.l;
                        }
                    }, $author$project$Print$lineSpreadMergeWith_fn(function (_v11) {
                        var _v12 = field.bt;
                        if (_v12.$ === 1) {
                            return 0;
                        }
                        else {
                            var commentsBeforeName = _v12.a;
                            return commentsBeforeName.l;
                        }
                    }, $author$project$Print$lineSpread(field.aC)));
                }, fieldPrintsAndComments.h);
            }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxRecord.i)));
            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn(function () {
                if (!commentsAfterFields.b) {
                    return $author$project$Print$spaceOrLinebreakIndented(lineSpread);
                }
                else {
                    var comment0 = commentsAfterFields.a;
                    var comment1Up = commentsAfterFields.b;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$linebreak)));
                }
            }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (field) {
                var _v2 = field.a;
                var _v3 = _v2.a;
                var fieldNameRange = _v3.a;
                var fieldName = _v3.b;
                var fieldValue = _v2.b;
                var lineSpreadBetweenNameAndValueNotConsideringComments = function (_v8) {
                    return $author$project$Print$lineSpreadMergeWith_fn(function (_v7) {
                        return $author$project$Print$lineSpread(field.aC);
                    }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange({
                        c: $author$project$GrenSyntax$nodeRange(fieldValue).c,
                        d: fieldNameRange.d
                    }));
                };
                var nameSeparatorValuePrint = $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(field.aC, function () {
                    var _v5 = field.bu;
                    if (_v5.$ === 1) {
                        return $author$project$Print$spaceOrLinebreakIndented(lineSpreadBetweenNameAndValueNotConsideringComments(0));
                    }
                    else {
                        var commentsBetweenNameAndValue = _v5.a;
                        return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v6) {
                            return $author$project$Print$lineSpread(field.aC);
                        }, commentsBetweenNameAndValue.l)), $author$project$Print$FollowedBy_fn(commentsBetweenNameAndValue.m, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.l))));
                    }
                }())), $author$project$Print$exactly(fieldName + (" " + fieldSpecific.cB)));
                return $author$project$Print$WithIndentIncreasedBy_fn(2, function () {
                    var _v4 = field.bt;
                    if (_v4.$ === 1) {
                        return nameSeparatorValuePrint;
                    }
                    else {
                        var commentsBeforeName = _v4.a;
                        return $author$project$Print$FollowedBy_fn(nameSeparatorValuePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsBeforeName.l), commentsBeforeName.m));
                    }
                }());
            }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), fieldPrintsAndComments.h), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningSpace)));
        }
    }, $author$project$GrenPrintDefunctionalized$recordLiteral = F3($author$project$GrenPrintDefunctionalized$recordLiteral_fn);
    var $author$project$GrenPrintDefunctionalized$triple_fn = function (config, syntaxComments, syntaxTriple) {
        var part2Print = A2(config.ak, syntaxComments, syntaxTriple.av);
        var part1Print = A2(config.ak, syntaxComments, syntaxTriple.Q);
        var part0Print = A2(config.ak, syntaxComments, syntaxTriple.P);
        var beforePart2Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxTriple.av).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxTriple.Q).c
        }, syntaxComments);
        var beforePart2CommentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(beforePart2Comments);
        var beforePart1Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxTriple.Q).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxTriple.P).c
        }, syntaxComments);
        var beforePart1CommentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(beforePart1Comments);
        var beforePart0Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxTriple.P).d,
            d: syntaxTriple.i.d
        }, syntaxComments);
        var beforePart0CommentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(beforePart0Comments);
        var afterPart2Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: syntaxTriple.i.c,
            d: $author$project$GrenSyntax$nodeRange(syntaxTriple.av).c
        }, syntaxComments);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v7) {
            if (afterPart2Comments.b) {
                return 1;
            }
            else {
                return 0;
            }
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(beforePart2CommentsCollapsible.l, $author$project$Print$lineSpreadMergeWithStrict_fn(beforePart1CommentsCollapsible.l, $author$project$Print$lineSpreadMergeWithStrict_fn(beforePart0CommentsCollapsible.l, config._))));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn(function () {
            if (!afterPart2Comments.b) {
                return $author$project$Print$empty;
            }
            else {
                var comment0 = afterPart2Comments.a;
                var comment1Up = afterPart2Comments.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented);
            }
        }(), function () {
            if (!beforePart2Comments.b) {
                return part2Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(part2Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v5) {
                    return $author$project$Print$lineSpread(part2Print);
                }, beforePart2CommentsCollapsible.l)), beforePart2CommentsCollapsible.m));
            }
        }())), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, function () {
            if (!beforePart1Comments.b) {
                return part1Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(part1Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v3) {
                    return $author$project$Print$lineSpread(part1Print);
                }, beforePart1CommentsCollapsible.l)), beforePart1CommentsCollapsible.m));
            }
        }()), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, function () {
            if (!beforePart0Comments.b) {
                return part0Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(part0Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v1) {
                    return $author$project$Print$lineSpread(part0Print);
                }, beforePart0CommentsCollapsible.l)), beforePart0CommentsCollapsible.m));
            }
        }()), $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace)))))))));
    }, $author$project$GrenPrintDefunctionalized$triple = F3($author$project$GrenPrintDefunctionalized$triple_fn);
    var $author$project$GrenPrintDefunctionalized$tuple_fn = function (config, syntaxComments, syntaxTuple) {
        var part1Print = A2(config.ak, syntaxComments, syntaxTuple.Q);
        var part0Print = A2(config.ak, syntaxComments, syntaxTuple.P);
        var beforePart1Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxTuple.Q).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxTuple.P).c
        }, syntaxComments);
        var beforePart1CommentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(beforePart1Comments);
        var beforePart0Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxTuple.P).d,
            d: syntaxTuple.i.d
        }, syntaxComments);
        var beforePart0CommentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(beforePart0Comments);
        var afterPart1Comments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: syntaxTuple.i.c,
            d: $author$project$GrenSyntax$nodeRange(syntaxTuple.Q).c
        }, syntaxComments);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v5) {
            if (afterPart1Comments.b) {
                return 1;
            }
            else {
                return 0;
            }
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(beforePart1CommentsCollapsible.l, $author$project$Print$lineSpreadMergeWithStrict_fn(beforePart0CommentsCollapsible.l, config._)));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn(function () {
            if (!afterPart1Comments.b) {
                return $author$project$Print$empty;
            }
            else {
                var comment0 = afterPart1Comments.a;
                var comment1Up = afterPart1Comments.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented);
            }
        }(), function () {
            if (!beforePart1Comments.b) {
                return part1Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(part1Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v3) {
                    return $author$project$Print$lineSpread(part1Print);
                }, beforePart1CommentsCollapsible.l)), beforePart1CommentsCollapsible.m));
            }
        }())), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, function () {
            if (!beforePart0Comments.b) {
                return part0Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(part0Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v1) {
                    return $author$project$Print$lineSpread(part0Print);
                }, beforePart0CommentsCollapsible.l)), beforePart0CommentsCollapsible.m));
            }
        }()), $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace))))));
    }, $author$project$GrenPrintDefunctionalized$tuple = F3($author$project$GrenPrintDefunctionalized$tuple_fn);
    var $author$project$GrenPrintDefunctionalized$typeFunctionExpand = function (typeNode) {
        if (typeNode.b.$ === 6) {
            var _v1 = typeNode.b;
            var inType = _v1.a;
            var outType = _v1.b;
            var outTypeExpanded = $author$project$GrenPrintDefunctionalized$typeFunctionExpand(outType);
            return {
                bV: _List_Cons(inType, outTypeExpanded.bV),
                bO: outTypeExpanded.bO
            };
        }
        else {
            var typeNodeNotFunction = typeNode;
            return { bV: _List_Nil, bO: typeNodeNotFunction };
        }
    };
    var $author$project$GrenPrintDefunctionalized$typeIsSpaceSeparated = function (syntaxType) {
        typeIsSpaceSeparated: while (true) {
            switch (syntaxType.$) {
                case 0:
                    return false;
                case 1:
                    var _arguments = syntaxType.b;
                    if (!_arguments.b) {
                        return false;
                    }
                    else {
                        return true;
                    }
                case 2:
                    return false;
                case 3:
                    var parts = syntaxType.a;
                    if (!parts.b) {
                        return false;
                    }
                    else {
                        if (!parts.b.b) {
                            var _v3 = parts.a;
                            var inParens = _v3.b;
                            var $temp$syntaxType = inParens;
                            syntaxType = $temp$syntaxType;
                            continue typeIsSpaceSeparated;
                        }
                        else {
                            if (!parts.b.b.b) {
                                var _v4 = parts.b;
                                return false;
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var _v5 = parts.b;
                                    var _v6 = _v5.b;
                                    return false;
                                }
                                else {
                                    var _v7 = parts.b;
                                    var _v8 = _v7.b;
                                    var _v9 = _v8.b;
                                    return false;
                                }
                            }
                        }
                    }
                case 4:
                    return false;
                case 5:
                    return false;
                default:
                    return true;
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$typeToNotParenthesized = function (_v0) {
        typeToNotParenthesized: while (true) {
            var typeRange = _v0.a;
            var syntaxType = _v0.b;
            switch (syntaxType.$) {
                case 0:
                    var name = syntaxType.a;
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationVariable(name));
                case 1:
                    var reference = syntaxType.a;
                    var _arguments = syntaxType.b;
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationConstruct_fn(reference, _arguments));
                case 2:
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationUnit);
                case 3:
                    var parts = syntaxType.a;
                    if (!parts.b) {
                        return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationUnit);
                    }
                    else {
                        if (!parts.b.b) {
                            var inParens = parts.a;
                            var $temp$_v0 = inParens;
                            _v0 = $temp$_v0;
                            continue typeToNotParenthesized;
                        }
                        else {
                            if (!parts.b.b.b) {
                                var part0 = parts.a;
                                var _v3 = parts.b;
                                var part1 = _v3.a;
                                return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationTupled(_List_fromArray([part0, part1])));
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var part0 = parts.a;
                                    var _v4 = parts.b;
                                    var part1 = _v4.a;
                                    var _v5 = _v4.b;
                                    var part2 = _v5.a;
                                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationTupled(_List_fromArray([part0, part1, part2])));
                                }
                                else {
                                    var part0 = parts.a;
                                    var _v6 = parts.b;
                                    var part1 = _v6.a;
                                    var _v7 = _v6.b;
                                    var part2 = _v7.a;
                                    var _v8 = _v7.b;
                                    var part3 = _v8.a;
                                    var part4Up = _v8.b;
                                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationTupled(_List_Cons(part0, _List_Cons(part1, _List_Cons(part2, _List_Cons(part3, part4Up))))));
                                }
                            }
                        }
                    }
                case 4:
                    var fields = syntaxType.a;
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationRecord(fields));
                case 5:
                    var extendedRecordVariableName = syntaxType.a;
                    var additionalFieldsNode = syntaxType.b;
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationRecordExtension_fn(extendedRecordVariableName, additionalFieldsNode));
                default:
                    var inType = syntaxType.a;
                    var outType = syntaxType.b;
                    return $author$project$GrenSyntax$Node_fn(typeRange, $author$project$GrenSyntax$TypeAnnotationFunction_fn(inType, outType));
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$typeToFunction = function (typeNode) {
        var _v0 = $author$project$GrenSyntax$nodeValue($author$project$GrenPrintDefunctionalized$typeToNotParenthesized(typeNode));
        switch (_v0.$) {
            case 6:
                var inType = _v0.a;
                var outType = _v0.b;
                return $elm$core$Maybe$Just({ cb: inType, cC: outType });
            case 0:
                return $elm$core$Maybe$Nothing;
            case 1:
                return $elm$core$Maybe$Nothing;
            case 2:
                return $elm$core$Maybe$Nothing;
            case 3:
                return $elm$core$Maybe$Nothing;
            case 4:
                return $elm$core$Maybe$Nothing;
            default:
                return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$GrenPrintDefunctionalized$typeFunctionNotParenthesized_fn = function (syntaxComments, _function) {
        var inTypePrint = $author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction_fn(syntaxComments, _function.cb);
        var afterArrowTypes = $author$project$GrenPrintDefunctionalized$typeFunctionExpand(_function.cC);
        var afterArrowTypesBeforeRightestPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (afterArrowTypeNode, soFar) {
            var print = $author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction_fn(syntaxComments, afterArrowTypeNode);
            var _v43 = afterArrowTypeNode;
            var afterArrowTypeRange = _v43.a;
            return {
                j: afterArrowTypeRange.c,
                h: _List_Cons($author$project$Print$FollowedBy_fn(print, function () {
                    var _v44 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: afterArrowTypeRange.d, d: soFar.j }, syntaxComments);
                    if (!_v44.b) {
                        return $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(print));
                    }
                    else {
                        var comment0 = _v44.a;
                        var comment1Up = _v44.b;
                        var commentsBeforeAfterArrowType = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v45) {
                            return $author$project$Print$lineSpread(print);
                        }, commentsBeforeAfterArrowType.l);
                        return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn(commentsBeforeAfterArrowType.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread)));
                    }
                }()), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(_function.cb).c,
            h: _List_Nil
        }, afterArrowTypes.bV);
        var commentsBeforeRightestAfterArrowType = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(afterArrowTypes.bO).d,
            d: afterArrowTypesBeforeRightestPrintsWithCommentsBefore.j
        }, syntaxComments);
        var commentsCollapsibleBeforeRightestAfterArrowType = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeRightestAfterArrowType);
        var rightestAfterArrowTypePrint = $author$project$GrenPrintDefunctionalized$typeParenthesizedIfParenthesizedFunction_fn(syntaxComments, afterArrowTypes.bO);
        var rightestAfterArrowTypeWithCommentsBeforePrint = $author$project$Print$FollowedBy_fn(rightestAfterArrowTypePrint, function () {
            if (!commentsBeforeRightestAfterArrowType.b) {
                return $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(rightestAfterArrowTypePrint));
            }
            else {
                var comment0 = commentsBeforeRightestAfterArrowType.a;
                var comment1Up = commentsBeforeRightestAfterArrowType.b;
                var commentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v42) {
                    return $author$project$Print$lineSpread(rightestAfterArrowTypePrint);
                }, commentsCollapsible.l);
                return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn(commentsCollapsible.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread)));
            }
        }());
        var fullLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v40) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, afterArrowTypesBeforeRightestPrintsWithCommentsBefore.h);
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(commentsCollapsibleBeforeRightestAfterArrowType.l, $author$project$Print$lineSpreadMergeWith_fn(function (_v39) {
            return $author$project$Print$lineSpread(rightestAfterArrowTypeWithCommentsBeforePrint);
        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v38) {
            return $author$project$Print$lineSpread(inTypePrint);
        }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(_function.i)))));
        return $author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4(rightestAfterArrowTypeWithCommentsBeforePrint), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyMinusGreaterThan, $author$project$Print$spaceOrLinebreakIndented(fullLineSpread))), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndFlatten_fn(function (printWithCommentsBefore) {
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4(printWithCommentsBefore), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyMinusGreaterThan, $author$project$Print$spaceOrLinebreakIndented(fullLineSpread)));
        }, afterArrowTypesBeforeRightestPrintsWithCommentsBefore.h), inTypePrint));
    }, $author$project$GrenPrintDefunctionalized$typeFunctionNotParenthesized = F2($author$project$GrenPrintDefunctionalized$typeFunctionNotParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn = function (syntaxComments, _v25) {
        typeNotParenthesized: while (true) {
            var fullRange = _v25.a;
            var syntaxType = _v25.b;
            switch (syntaxType.$) {
                case 2:
                    return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                case 0:
                    var name = syntaxType.a;
                    return $author$project$Print$exactly(name);
                case 1:
                    var _v27 = syntaxType.a;
                    var _v28 = _v27.b;
                    var referenceQualification = _v28.a;
                    var referenceUnqualified = _v28.b;
                    var _arguments = syntaxType.b;
                    return $author$project$GrenPrintDefunctionalized$construct_fn({
                        _: $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange),
                        ck: $author$project$GrenPrintDefunctionalized$typeParenthesizedIfSpaceSeparated
                    }, syntaxComments, {
                        W: _arguments,
                        i: fullRange,
                        d: $author$project$GrenPrintDefunctionalized$qualifiedReference({ cl: referenceQualification, bR: referenceUnqualified })
                    });
                case 3:
                    var parts = syntaxType.a;
                    if (!parts.b) {
                        return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                    }
                    else {
                        if (!parts.b.b) {
                            var inParens = parts.a;
                            var commentsBeforeInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: $author$project$GrenSyntax$nodeRange(inParens).d,
                                d: fullRange.d
                            }, syntaxComments);
                            var commentsAfterInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: fullRange.c,
                                d: $author$project$GrenSyntax$nodeRange(inParens).c
                            }, syntaxComments);
                            var _v30 = _Utils_Tuple2(commentsBeforeInParens, commentsAfterInParens);
                            if ((!_v30.a.b) && (!_v30.b.b)) {
                                var $temp$syntaxComments = syntaxComments, $temp$_v25 = inParens;
                                syntaxComments = $temp$syntaxComments;
                                _v25 = $temp$_v25;
                                continue typeNotParenthesized;
                            }
                            else {
                                return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$typeNotParenthesized, {
                                    i: fullRange,
                                    ah: $author$project$GrenPrintDefunctionalized$typeToNotParenthesized(inParens)
                                }, syntaxComments);
                            }
                        }
                        else {
                            if (!parts.b.b.b) {
                                var part0 = parts.a;
                                var _v31 = parts.b;
                                var part1 = _v31.a;
                                return $author$project$GrenPrintDefunctionalized$tuple_fn({
                                    _: $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange),
                                    ak: $author$project$GrenPrintDefunctionalized$typeNotParenthesized
                                }, syntaxComments, { i: fullRange, P: part0, Q: part1 });
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var part0 = parts.a;
                                    var _v32 = parts.b;
                                    var part1 = _v32.a;
                                    var _v33 = _v32.b;
                                    var part2 = _v33.a;
                                    return $author$project$GrenPrintDefunctionalized$triple_fn({
                                        _: $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange),
                                        ak: $author$project$GrenPrintDefunctionalized$typeNotParenthesized
                                    }, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2 });
                                }
                                else {
                                    var part0 = parts.a;
                                    var _v34 = parts.b;
                                    var part1 = _v34.a;
                                    var _v35 = _v34.b;
                                    var part2 = _v35.a;
                                    var _v36 = _v35.b;
                                    var part3 = _v36.a;
                                    var part4Up = _v36.b;
                                    return $author$project$GrenPrintDefunctionalized$invalidNTuple_fn($author$project$GrenPrintDefunctionalized$typeNotParenthesized, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2, ch: part3, ci: part4Up });
                                }
                            }
                        }
                    }
                case 4:
                    var fields = syntaxType.a;
                    return $author$project$GrenPrintDefunctionalized$recordLiteral_fn({ cB: ":", cE: $author$project$GrenPrintDefunctionalized$typeNotParenthesized }, syntaxComments, { aE: fields, i: fullRange });
                case 5:
                    var recordVariable = syntaxType.a;
                    var _v37 = syntaxType.b;
                    var fields = _v37.b;
                    return $author$project$GrenPrintDefunctionalized$typeRecordExtension_fn(syntaxComments, { aE: fields, i: fullRange, a0: recordVariable });
                default:
                    var inType = syntaxType.a;
                    var outType = syntaxType.b;
                    return $author$project$GrenPrintDefunctionalized$typeFunctionNotParenthesized_fn(syntaxComments, { i: fullRange, cb: inType, cC: outType });
            }
        }
    }, $author$project$GrenPrintDefunctionalized$typeNotParenthesized = F2($author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$typeParenthesized_fn = function (syntaxComments, typeNode) {
        return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$typeNotParenthesized, {
            i: $author$project$GrenSyntax$nodeRange(typeNode),
            ah: $author$project$GrenPrintDefunctionalized$typeToNotParenthesized(typeNode)
        }, syntaxComments);
    }, $author$project$GrenPrintDefunctionalized$typeParenthesized = F2($author$project$GrenPrintDefunctionalized$typeParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction_fn = function (syntaxComments, typeNode) {
        var _v24 = $author$project$GrenPrintDefunctionalized$typeToFunction(typeNode);
        if (!_v24.$) {
            return $author$project$GrenPrintDefunctionalized$typeParenthesized_fn(syntaxComments, typeNode);
        }
        else {
            return $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, typeNode);
        }
    }, $author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction = F2($author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction_fn);
    var $author$project$GrenPrintDefunctionalized$typeParenthesizedIfParenthesizedFunction_fn = function (syntaxComments, typeNode) {
        var _v22 = $author$project$GrenSyntax$nodeValue(typeNode);
        if (((_v22.$ === 3) && _v22.a.b) && (!_v22.a.b.b)) {
            var _v23 = _v22.a;
            var inParens = _v23.a;
            return $author$project$GrenPrintDefunctionalized$typeParenthesizedIfFunction_fn(syntaxComments, inParens);
        }
        else {
            return $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, typeNode);
        }
    }, $author$project$GrenPrintDefunctionalized$typeParenthesizedIfParenthesizedFunction = F2($author$project$GrenPrintDefunctionalized$typeParenthesizedIfParenthesizedFunction_fn);
    var $author$project$GrenPrintDefunctionalized$typeParenthesizedIfSpaceSeparated_fn = function (syntaxComments, typeNode) {
        return $author$project$GrenPrintDefunctionalized$typeIsSpaceSeparated($author$project$GrenSyntax$nodeValue(typeNode)) ? $author$project$GrenPrintDefunctionalized$typeParenthesized_fn(syntaxComments, typeNode) : $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, typeNode);
    }, $author$project$GrenPrintDefunctionalized$typeParenthesizedIfSpaceSeparated = F2($author$project$GrenPrintDefunctionalized$typeParenthesizedIfSpaceSeparated_fn);
    var $author$project$GrenPrintDefunctionalized$typeRecordExtension_fn = function (syntaxComments, syntaxRecordExtension) {
        var recordVariablePrint = $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(syntaxRecordExtension.a0));
        var fieldPrintsAndComments = $elm$core$List$foldl_fn_unwrapped(function (_v16, soFar) {
            var _v17 = _v16.b;
            var _v18 = _v17.a;
            var fieldNameRange = _v18.a;
            var fieldName = _v18.b;
            var fieldValueNode = _v17.b;
            var commentsBeforeName = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldNameRange.d, d: soFar.j }, syntaxComments);
            var _v19 = fieldValueNode;
            var fieldValueRange = _v19.a;
            var commentsBetweenNameAndValue = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldValueRange.d, d: fieldNameRange.d }, syntaxComments);
            return {
                j: fieldValueRange.c,
                h: _List_Cons({
                    bt: function () {
                        if (!commentsBeforeName.b) {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var comment0 = commentsBeforeName.a;
                            var comment1Up = commentsBeforeName.b;
                            return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                        }
                    }(),
                    bu: function () {
                        if (!commentsBetweenNameAndValue.b) {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var comment0 = commentsBetweenNameAndValue.a;
                            var comment1Up = commentsBetweenNameAndValue.b;
                            return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                        }
                    }(),
                    a: _Utils_Tuple2($author$project$GrenSyntax$Node_fn(fieldNameRange, fieldName), fieldValueNode),
                    aC: $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, fieldValueNode)
                }, soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxRecordExtension.a0).c,
            h: _List_Nil
        }, syntaxRecordExtension.aE);
        var commentsBeforeRecordVariable = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxRecordExtension.a0).d,
            d: syntaxRecordExtension.i.d
        }, syntaxComments);
        var commentsCollapsibleBeforeRecordVariable = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeRecordVariable);
        var commentsAfterFields = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxRecordExtension.i.c, d: fieldPrintsAndComments.j }, syntaxComments);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v14) {
            if (!commentsAfterFields.b) {
                return 0;
            }
            else {
                return 1;
            }
        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v9) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn(function (field) {
                return $author$project$Print$lineSpreadMergeWith_fn(function (_v12) {
                    var _v13 = field.bu;
                    if (_v13.$ === 1) {
                        return 0;
                    }
                    else {
                        var commentsBetweenNameAndValue = _v13.a;
                        return commentsBetweenNameAndValue.l;
                    }
                }, $author$project$Print$lineSpreadMergeWith_fn(function (_v10) {
                    var _v11 = field.bt;
                    if (_v11.$ === 1) {
                        return 0;
                    }
                    else {
                        var commentsBeforeName = _v11.a;
                        return commentsBeforeName.l;
                    }
                }, $author$project$Print$lineSpread(field.aC)));
            }, fieldPrintsAndComments.h);
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(commentsCollapsibleBeforeRecordVariable.l, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxRecordExtension.i))));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsAfterFields.b) {
                return $author$project$Print$empty;
            }
            else {
                var comment0 = commentsAfterFields.a;
                var comment1Up = commentsAfterFields.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$linebreak));
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (field) {
            var _v1 = field.a;
            var _v2 = _v1.a;
            var fieldNameRange = _v2.a;
            var fieldName = _v2.b;
            var fieldValueNode = _v1.b;
            var lineSpreadBetweenNameAndValueNotConsideringComments = function (_v7) {
                return $author$project$Print$lineSpreadMergeWith_fn(function (_v6) {
                    return $author$project$Print$lineSpread(field.aC);
                }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange({
                    c: $author$project$GrenSyntax$nodeRange(fieldValueNode).c,
                    d: fieldNameRange.d
                }));
            };
            return $author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(field.aC, function () {
                var _v4 = field.bu;
                if (_v4.$ === 1) {
                    return $author$project$Print$spaceOrLinebreakIndented(lineSpreadBetweenNameAndValueNotConsideringComments(0));
                }
                else {
                    var commentsBetweenNameAndValue = _v4.a;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v5) {
                        return $author$project$Print$lineSpread(field.aC);
                    }, commentsBetweenNameAndValue.l)), $author$project$Print$FollowedBy_fn(commentsBetweenNameAndValue.m, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.l))));
                }
            }())), function () {
                var _v3 = field.bt;
                if (_v3.$ === 1) {
                    return $author$project$Print$exactly(fieldName + " :");
                }
                else {
                    var commentsBeforeName = _v3.a;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$exactly(fieldName + " :"), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsBeforeName.l), commentsBeforeName.m));
                }
            }()));
        }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), fieldPrintsAndComments.h), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyVerticalBarSpace, $author$project$Print$spaceOrLinebreakIndented(lineSpread))))), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, function () {
            if (!commentsBeforeRecordVariable.b) {
                return recordVariablePrint;
            }
            else {
                return $author$project$Print$FollowedBy_fn(recordVariablePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsCollapsibleBeforeRecordVariable.l), commentsCollapsibleBeforeRecordVariable.m));
            }
        }()), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningSpace))));
    }, $author$project$GrenPrintDefunctionalized$typeRecordExtension = F2($author$project$GrenPrintDefunctionalized$typeRecordExtension_fn);
    var $author$project$GrenPrintDefunctionalized$declarationChoiceType_fn = function (syntaxComments, syntaxChoiceTypeDeclaration) {
        var parameterPrints = $elm$core$List$foldl_fn_unwrapped(function (parameterName, soFar) {
            var parameterPrintedRange = $author$project$GrenSyntax$nodeRange(parameterName);
            var parameterNamePrint = $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(parameterName));
            return {
                j: parameterPrintedRange.c,
                h: _List_Cons(function () {
                    var _v5 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: parameterPrintedRange.d, d: soFar.j }, syntaxComments);
                    if (!_v5.b) {
                        return parameterNamePrint;
                    }
                    else {
                        var comment0 = _v5.a;
                        var comment1Up = _v5.b;
                        var commentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(parameterNamePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsCollapsible.l), commentsCollapsible.m));
                    }
                }(), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxChoiceTypeDeclaration.q).c,
            h: _List_Nil
        }, syntaxChoiceTypeDeclaration.ca);
        var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrints.h);
        var variantPrintsWithCommentsBeforeReverse = $elm$core$List$foldl_fn_unwrapped(function (_v2, soFar) {
            var variantRange = _v2.a;
            var variant = _v2.b;
            var variantPrint = $author$project$GrenPrintDefunctionalized$construct_fn({ _: 0, ck: $author$project$GrenPrintDefunctionalized$typeParenthesizedIfSpaceSeparated }, syntaxComments, {
                W: variant.W,
                i: variantRange,
                d: $author$project$GrenSyntax$nodeValue(variant.q)
            });
            var commentsVariantPrint = function () {
                var _v3 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(variant.q).d,
                    d: soFar.j
                }, syntaxComments);
                if (!_v3.b) {
                    return variantPrint;
                }
                else {
                    var comment0 = _v3.a;
                    var comment1Up = _v3.b;
                    var commentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                    return $author$project$Print$FollowedBy_fn(variantPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v4) {
                        return $author$project$Print$lineSpread(variantPrint);
                    }, commentsCollapsible.l)), commentsCollapsible.m));
                }
            }();
            return {
                j: variantRange.c,
                h: _List_Cons(commentsVariantPrint, soFar.h)
            };
        }, { j: parameterPrints.j, h: _List_Nil }, syntaxChoiceTypeDeclaration.cT).h;
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (variantPrint) {
            return $author$project$Print$WithIndentIncreasedBy_fn(2, variantPrint);
        }, $author$project$GrenPrintDefunctionalized$printLinebreakIndentedVerticalBarSpace, variantPrintsWithCommentsBeforeReverse), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyEqualsSpace, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$listReverseAndMapAndFlatten_fn(function (parameterPrint) {
            return $author$project$Print$FollowedBy_fn(parameterPrint, $author$project$Print$spaceOrLinebreakIndented(parametersLineSpread));
        }, parameterPrints.h)), $author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenSyntax$nodeValue(syntaxChoiceTypeDeclaration.q)), $author$project$Print$spaceOrLinebreakIndented(parametersLineSpread))))))), function () {
            var _v0 = syntaxChoiceTypeDeclaration.Z;
            if (_v0.$ === 1) {
                return $author$project$GrenPrintDefunctionalized$printExactlyType;
            }
            else {
                var _v1 = _v0.a;
                var documentationRange = _v1.a;
                var documentation = _v1.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyType, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$commentsBetweenDocumentationAndDeclaration($author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(syntaxChoiceTypeDeclaration.q).d,
                    d: documentationRange.d
                }, syntaxComments)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$exactly(documentation))));
            }
        }());
    }, $author$project$GrenPrintDefunctionalized$declarationChoiceType = F2($author$project$GrenPrintDefunctionalized$declarationChoiceType_fn);
    var $author$project$GrenPrintDefunctionalized$unsafeHexDigitIntToString = function (_int) {
        switch (_int) {
            case 0:
                return "0";
            case 1:
                return "1";
            case 2:
                return "2";
            case 3:
                return "3";
            case 4:
                return "4";
            case 5:
                return "5";
            case 6:
                return "6";
            case 7:
                return "7";
            case 8:
                return "8";
            case 9:
                return "9";
            case 10:
                return "A";
            case 11:
                return "B";
            case 12:
                return "C";
            case 13:
                return "D";
            case 14:
                return "E";
            default:
                return "F";
        }
    };
    var $author$project$GrenPrintDefunctionalized$intToHexString = function (_int) {
        return (_int < 16) ? $author$project$GrenPrintDefunctionalized$unsafeHexDigitIntToString(_int) : ($author$project$GrenPrintDefunctionalized$intToHexString((_int / 16) | 0) + ($author$project$GrenPrintDefunctionalized$unsafeHexDigitIntToString(_int % 16) + ""));
    };
    var $author$project$GrenPrintDefunctionalized$characterHex = function (character) {
        return $elm$core$String$toUpper($author$project$GrenPrintDefunctionalized$intToHexString($elm$core$Char$toCode(character)));
    };
    var $miniBill$elm_unicode$Unicode$LetterLowercase = 1;
    var $miniBill$elm_unicode$Unicode$LetterModifier = 17;
    var $miniBill$elm_unicode$Unicode$LetterOther = 18;
    var $miniBill$elm_unicode$Unicode$LetterTitlecase = 2;
    var $miniBill$elm_unicode$Unicode$LetterUppercase = 0;
    var $miniBill$elm_unicode$Unicode$MarkEnclosing = 5;
    var $miniBill$elm_unicode$Unicode$MarkNonSpacing = 3;
    var $miniBill$elm_unicode$Unicode$MarkSpacingCombining = 4;
    var $miniBill$elm_unicode$Unicode$NumberDecimalDigit = 6;
    var $miniBill$elm_unicode$Unicode$NumberLetter = 7;
    var $miniBill$elm_unicode$Unicode$NumberOther = 8;
    var $miniBill$elm_unicode$Unicode$OtherControl = 12;
    var $miniBill$elm_unicode$Unicode$OtherFormat = 13;
    var $miniBill$elm_unicode$Unicode$OtherPrivateUse = 15;
    var $miniBill$elm_unicode$Unicode$OtherSurrogate = 14;
    var $miniBill$elm_unicode$Unicode$PunctuationClose = 22;
    var $miniBill$elm_unicode$Unicode$PunctuationConnector = 19;
    var $miniBill$elm_unicode$Unicode$PunctuationDash = 20;
    var $miniBill$elm_unicode$Unicode$PunctuationFinalQuote = 24;
    var $miniBill$elm_unicode$Unicode$PunctuationInitialQuote = 23;
    var $miniBill$elm_unicode$Unicode$PunctuationOpen = 21;
    var $miniBill$elm_unicode$Unicode$PunctuationOther = 25;
    var $miniBill$elm_unicode$Unicode$SeparatorLine = 10;
    var $miniBill$elm_unicode$Unicode$SeparatorParagraph = 11;
    var $miniBill$elm_unicode$Unicode$SeparatorSpace = 9;
    var $miniBill$elm_unicode$Unicode$SymbolCurrency = 27;
    var $miniBill$elm_unicode$Unicode$SymbolMath = 26;
    var $miniBill$elm_unicode$Unicode$SymbolModifier = 28;
    var $miniBill$elm_unicode$Unicode$SymbolOther = 29;
    var $miniBill$elm_unicode$Unicode$getCategory = function (c) {
        var code = $elm$core$Char$toCode(c);
        var e = function (hex) {
            return _Utils_eq(hex, code);
        };
        var l = function (hex) {
            return _Utils_cmp(code, hex) < 0;
        };
        var r = F2(function (from, to) {
            return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
        });
        return l(256) ? (l(160) ? (l(59) ? (l(41) ? ((code <= 31) ? $elm$core$Maybe$Just(12) : (e(32) ? $elm$core$Maybe$Just(9) : ((A2(r, 33, 35) || A2(r, 37, 39)) ? $elm$core$Maybe$Just(25) : (e(36) ? $elm$core$Maybe$Just(27) : (e(40) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))) : (e(41) ? $elm$core$Maybe$Just(22) : ((e(42) || (e(44) || (A2(r, 46, 47) || e(58)))) ? $elm$core$Maybe$Just(25) : (e(43) ? $elm$core$Maybe$Just(26) : (e(45) ? $elm$core$Maybe$Just(20) : (A2(r, 48, 57) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(94) ? ((e(59) || (A2(r, 63, 64) || e(92))) ? $elm$core$Maybe$Just(25) : (A2(r, 60, 62) ? $elm$core$Maybe$Just(26) : (A2(r, 65, 90) ? $elm$core$Maybe$Just(0) : (e(91) ? $elm$core$Maybe$Just(21) : (e(93) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing))))) : ((e(94) || e(96)) ? $elm$core$Maybe$Just(28) : (e(95) ? $elm$core$Maybe$Just(19) : (A2(r, 97, 122) ? $elm$core$Maybe$Just(1) : (e(123) ? $elm$core$Maybe$Just(21) : ((e(124) || e(126)) ? $elm$core$Maybe$Just(26) : (e(125) ? $elm$core$Maybe$Just(22) : (A2(r, 127, 159) ? $elm$core$Maybe$Just(12) : $elm$core$Maybe$Nothing))))))))) : (l(177) ? (l(169) ? (e(160) ? $elm$core$Maybe$Just(9) : ((e(161) || e(167)) ? $elm$core$Maybe$Just(25) : (A2(r, 162, 165) ? $elm$core$Maybe$Just(27) : (e(166) ? $elm$core$Maybe$Just(29) : (e(168) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : ((e(169) || (e(174) || e(176))) ? $elm$core$Maybe$Just(29) : (e(170) ? $elm$core$Maybe$Just(18) : (e(171) ? $elm$core$Maybe$Just(23) : (e(172) ? $elm$core$Maybe$Just(26) : (e(173) ? $elm$core$Maybe$Just(13) : (e(175) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))))) : (l(186) ? (e(177) ? $elm$core$Maybe$Just(26) : ((A2(r, 178, 179) || e(185)) ? $elm$core$Maybe$Just(8) : ((e(180) || e(184)) ? $elm$core$Maybe$Just(28) : (e(181) ? $elm$core$Maybe$Just(1) : (A2(r, 182, 183) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (e(186) ? $elm$core$Maybe$Just(18) : (e(187) ? $elm$core$Maybe$Just(24) : (A2(r, 188, 190) ? $elm$core$Maybe$Just(8) : (e(191) ? $elm$core$Maybe$Just(25) : ((A2(r, 192, 214) || A2(r, 216, 222)) ? $elm$core$Maybe$Just(0) : ((e(215) || e(247)) ? $elm$core$Maybe$Just(26) : ((A2(r, 223, 246) || A2(r, 248, 255)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))))) : (l(9084) ? (l(3085) ? (l(1166) ? (l(488) ? (l(356) ? (l(304) ? (l(279) ? (l(266) ? ((e(256) || (e(258) || (e(260) || (e(262) || e(264))))) ? $elm$core$Maybe$Just(0) : ((e(257) || (e(259) || (e(261) || (e(263) || e(265))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(271) ? ((e(266) || (e(268) || e(270))) ? $elm$core$Maybe$Just(0) : ((e(267) || e(269)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(271) || (e(273) || (e(275) || e(277)))) ? $elm$core$Maybe$Just(1) : ((e(272) || (e(274) || (e(276) || e(278)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(290) ? ((e(279) || (e(281) || (e(283) || (e(285) || (e(287) || e(289)))))) ? $elm$core$Maybe$Just(1) : ((e(280) || (e(282) || (e(284) || (e(286) || e(288))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(296) ? ((e(290) || (e(292) || e(294))) ? $elm$core$Maybe$Just(0) : ((e(291) || (e(293) || e(295))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(296) || (e(298) || (e(300) || e(302)))) ? $elm$core$Maybe$Just(0) : ((e(297) || (e(299) || (e(301) || e(303)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(330) ? (l(316) ? ((e(304) || (e(306) || (e(308) || (e(310) || (e(313) || e(315)))))) ? $elm$core$Maybe$Just(0) : ((e(305) || (e(307) || (e(309) || (A2(r, 311, 312) || e(314))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(321) ? ((e(316) || (e(318) || e(320))) ? $elm$core$Maybe$Just(1) : ((e(317) || e(319)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(321) || (e(323) || (e(325) || e(327)))) ? $elm$core$Maybe$Just(0) : ((e(322) || (e(324) || (e(326) || A2(r, 328, 329)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(342) ? ((e(330) || (e(332) || (e(334) || (e(336) || (e(338) || e(340)))))) ? $elm$core$Maybe$Just(0) : ((e(331) || (e(333) || (e(335) || (e(337) || (e(339) || e(341)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(348) ? ((e(342) || (e(344) || e(346))) ? $elm$core$Maybe$Just(0) : ((e(343) || (e(345) || e(347))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(348) || (e(350) || (e(352) || e(354)))) ? $elm$core$Maybe$Just(0) : ((e(349) || (e(351) || (e(353) || e(355)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (l(424) ? (l(380) ? (l(366) ? ((e(356) || (e(358) || (e(360) || (e(362) || e(364))))) ? $elm$core$Maybe$Just(0) : ((e(357) || (e(359) || (e(361) || (e(363) || e(365))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(371) ? ((e(366) || (e(368) || e(370))) ? $elm$core$Maybe$Just(0) : ((e(367) || e(369)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(371) || (e(373) || (e(375) || e(378)))) ? $elm$core$Maybe$Just(1) : ((e(372) || (e(374) || (A2(r, 376, 377) || e(379)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(402) ? ((e(380) || (A2(r, 382, 384) || (e(387) || (e(389) || (e(392) || A2(r, 396, 397)))))) ? $elm$core$Maybe$Just(1) : ((e(381) || (A2(r, 385, 386) || (e(388) || (A2(r, 390, 391) || (A2(r, 393, 395) || A2(r, 398, 401)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(414) ? ((e(402) || (e(405) || A2(r, 409, 411))) ? $elm$core$Maybe$Just(1) : ((A2(r, 403, 404) || (A2(r, 406, 408) || A2(r, 412, 413))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(414) || (e(417) || (e(419) || e(421)))) ? $elm$core$Maybe$Just(1) : ((A2(r, 415, 416) || (e(418) || (e(420) || A2(r, 422, 423)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(460) ? (l(440) ? ((e(424) || (A2(r, 426, 427) || (e(429) || (e(432) || (e(436) || e(438)))))) ? $elm$core$Maybe$Just(1) : ((e(425) || (e(428) || (A2(r, 430, 431) || (A2(r, 433, 435) || (e(437) || e(439)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(452) ? ((e(440) || e(444)) ? $elm$core$Maybe$Just(0) : ((A2(r, 441, 442) || A2(r, 445, 447)) ? $elm$core$Maybe$Just(1) : ((e(443) || A2(r, 448, 451)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(452) || (e(455) || e(458))) ? $elm$core$Maybe$Just(0) : ((e(453) || (e(456) || e(459))) ? $elm$core$Maybe$Just(2) : ((e(454) || e(457)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(472) ? ((e(460) || (e(462) || (e(464) || (e(466) || (e(468) || e(470)))))) ? $elm$core$Maybe$Just(1) : ((e(461) || (e(463) || (e(465) || (e(467) || (e(469) || e(471)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(479) ? ((e(472) || (e(474) || A2(r, 476, 477))) ? $elm$core$Maybe$Just(1) : ((e(473) || (e(475) || e(478))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(479) || (e(481) || (e(483) || (e(485) || e(487))))) ? $elm$core$Maybe$Just(1) : ((e(480) || (e(482) || (e(484) || e(486)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(767) ? (l(540) ? (l(514) ? (l(499) ? ((e(488) || (e(490) || (e(492) || (e(494) || e(497))))) ? $elm$core$Maybe$Just(0) : ((e(489) || (e(491) || (e(493) || A2(r, 495, 496)))) ? $elm$core$Maybe$Just(1) : (e(498) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing))) : (l(506) ? ((e(499) || (e(501) || e(505))) ? $elm$core$Maybe$Just(1) : ((e(500) || A2(r, 502, 504)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(506) || (e(508) || (e(510) || e(512)))) ? $elm$core$Maybe$Just(0) : ((e(507) || (e(509) || (e(511) || e(513)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(526) ? ((e(514) || (e(516) || (e(518) || (e(520) || (e(522) || e(524)))))) ? $elm$core$Maybe$Just(0) : ((e(515) || (e(517) || (e(519) || (e(521) || (e(523) || e(525)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(532) ? ((e(526) || (e(528) || e(530))) ? $elm$core$Maybe$Just(0) : ((e(527) || (e(529) || e(531))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(532) || (e(534) || (e(536) || e(538)))) ? $elm$core$Maybe$Just(0) : ((e(533) || (e(535) || (e(537) || e(539)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(572) ? (l(551) ? ((e(540) || (e(542) || (e(544) || (e(546) || (e(548) || e(550)))))) ? $elm$core$Maybe$Just(0) : ((e(541) || (e(543) || (e(545) || (e(547) || e(549))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(557) ? ((e(551) || (e(553) || e(555))) ? $elm$core$Maybe$Just(1) : ((e(552) || (e(554) || e(556))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(557) || (e(559) || (e(561) || A2(r, 563, 569)))) ? $elm$core$Maybe$Just(1) : ((e(558) || (e(560) || (e(562) || A2(r, 570, 571)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(589) ? ((e(572) || (A2(r, 575, 576) || (e(578) || (e(583) || (e(585) || e(587)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 573, 574) || (e(577) || (A2(r, 579, 582) || (e(584) || (e(586) || e(588)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(709) ? ((e(589) || (A2(r, 591, 659) || A2(r, 661, 687))) ? $elm$core$Maybe$Just(1) : (e(590) ? $elm$core$Maybe$Just(0) : (e(660) ? $elm$core$Maybe$Just(18) : (A2(r, 688, 705) ? $elm$core$Maybe$Just(17) : (A2(r, 706, 708) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : ((e(709) || (A2(r, 722, 735) || (A2(r, 741, 747) || (e(749) || A2(r, 751, 766))))) ? $elm$core$Maybe$Just(28) : ((A2(r, 710, 721) || (A2(r, 736, 740) || (e(748) || e(750)))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(1006) ? (l(975) ? (l(893) ? ((e(767) || e(885)) ? $elm$core$Maybe$Just(28) : (A2(r, 768, 879) ? $elm$core$Maybe$Just(3) : ((e(880) || (e(882) || e(886))) ? $elm$core$Maybe$Just(0) : ((e(881) || (e(883) || (e(887) || A2(r, 891, 892)))) ? $elm$core$Maybe$Just(1) : ((e(884) || e(890)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(903) ? (e(893) ? $elm$core$Maybe$Just(1) : (e(894) ? $elm$core$Maybe$Just(25) : ((e(895) || e(902)) ? $elm$core$Maybe$Just(0) : (A2(r, 900, 901) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (e(903) ? $elm$core$Maybe$Just(25) : ((A2(r, 904, 906) || (e(908) || (A2(r, 910, 911) || (A2(r, 913, 929) || A2(r, 931, 939))))) ? $elm$core$Maybe$Just(0) : ((e(912) || A2(r, 940, 974)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(992) ? ((e(975) || (A2(r, 978, 980) || (e(984) || (e(986) || (e(988) || e(990)))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 976, 977) || (A2(r, 981, 983) || (e(985) || (e(987) || (e(989) || e(991)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(998) ? ((e(992) || (e(994) || e(996))) ? $elm$core$Maybe$Just(0) : ((e(993) || (e(995) || e(997))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(998) || (e(1000) || (e(1002) || e(1004)))) ? $elm$core$Maybe$Just(0) : ((e(999) || (e(1001) || (e(1003) || e(1005)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(1134) ? (l(1120) ? ((e(1006) || (e(1012) || (e(1015) || (A2(r, 1017, 1018) || A2(r, 1021, 1071))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 1007, 1011) || (e(1013) || (e(1016) || (A2(r, 1019, 1020) || A2(r, 1072, 1119))))) ? $elm$core$Maybe$Just(1) : (e(1014) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : (l(1126) ? ((e(1120) || (e(1122) || e(1124))) ? $elm$core$Maybe$Just(0) : ((e(1121) || (e(1123) || e(1125))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1126) || (e(1128) || (e(1130) || e(1132)))) ? $elm$core$Maybe$Just(0) : ((e(1127) || (e(1129) || (e(1131) || e(1133)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(1146) ? ((e(1134) || (e(1136) || (e(1138) || (e(1140) || (e(1142) || e(1144)))))) ? $elm$core$Maybe$Just(0) : ((e(1135) || (e(1137) || (e(1139) || (e(1141) || (e(1143) || e(1145)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1152) ? ((e(1146) || (e(1148) || e(1150))) ? $elm$core$Maybe$Just(0) : ((e(1147) || (e(1149) || e(1151))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1152) || (e(1162) || e(1164))) ? $elm$core$Maybe$Just(0) : ((e(1153) || (e(1163) || e(1165))) ? $elm$core$Maybe$Just(1) : (e(1154) ? $elm$core$Maybe$Just(29) : (A2(r, 1155, 1159) ? $elm$core$Maybe$Just(3) : (A2(r, 1160, 1161) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing))))))))))) : (l(1756) ? (l(1268) ? (l(1215) ? (l(1189) ? (l(1176) ? ((e(1166) || (e(1168) || (e(1170) || (e(1172) || e(1174))))) ? $elm$core$Maybe$Just(0) : ((e(1167) || (e(1169) || (e(1171) || (e(1173) || e(1175))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1181) ? ((e(1176) || (e(1178) || e(1180))) ? $elm$core$Maybe$Just(0) : ((e(1177) || e(1179)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1181) || (e(1183) || (e(1185) || e(1187)))) ? $elm$core$Maybe$Just(1) : ((e(1182) || (e(1184) || (e(1186) || e(1188)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(1201) ? ((e(1189) || (e(1191) || (e(1193) || (e(1195) || (e(1197) || e(1199)))))) ? $elm$core$Maybe$Just(1) : ((e(1190) || (e(1192) || (e(1194) || (e(1196) || (e(1198) || e(1200)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1207) ? ((e(1201) || (e(1203) || e(1205))) ? $elm$core$Maybe$Just(1) : ((e(1202) || (e(1204) || e(1206))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1207) || (e(1209) || (e(1211) || e(1213)))) ? $elm$core$Maybe$Just(1) : ((e(1208) || (e(1210) || (e(1212) || e(1214)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(1241) ? (l(1227) ? ((e(1215) || (e(1218) || (e(1220) || (e(1222) || (e(1224) || e(1226)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 1216, 1217) || (e(1219) || (e(1221) || (e(1223) || e(1225))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1233) ? ((e(1227) || (e(1229) || e(1232))) ? $elm$core$Maybe$Just(0) : ((e(1228) || A2(r, 1230, 1231)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1233) || (e(1235) || (e(1237) || e(1239)))) ? $elm$core$Maybe$Just(1) : ((e(1234) || (e(1236) || (e(1238) || e(1240)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(1253) ? ((e(1241) || (e(1243) || (e(1245) || (e(1247) || (e(1249) || e(1251)))))) ? $elm$core$Maybe$Just(1) : ((e(1242) || (e(1244) || (e(1246) || (e(1248) || (e(1250) || e(1252)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1259) ? ((e(1253) || (e(1255) || e(1257))) ? $elm$core$Maybe$Just(1) : ((e(1254) || (e(1256) || e(1258))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1259) || (e(1261) || (e(1263) || (e(1265) || e(1267))))) ? $elm$core$Maybe$Just(1) : ((e(1260) || (e(1262) || (e(1264) || e(1266)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(1318) ? (l(1292) ? (l(1279) ? ((e(1268) || (e(1270) || (e(1272) || (e(1274) || (e(1276) || e(1278)))))) ? $elm$core$Maybe$Just(0) : ((e(1269) || (e(1271) || (e(1273) || (e(1275) || e(1277))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1284) ? ((e(1279) || (e(1281) || e(1283))) ? $elm$core$Maybe$Just(1) : ((e(1280) || e(1282)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1284) || (e(1286) || (e(1288) || e(1290)))) ? $elm$core$Maybe$Just(0) : ((e(1285) || (e(1287) || (e(1289) || e(1291)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(1304) ? ((e(1292) || (e(1294) || (e(1296) || (e(1298) || (e(1300) || e(1302)))))) ? $elm$core$Maybe$Just(0) : ((e(1293) || (e(1295) || (e(1297) || (e(1299) || (e(1301) || e(1303)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1310) ? ((e(1304) || (e(1306) || e(1308))) ? $elm$core$Maybe$Just(0) : ((e(1305) || (e(1307) || e(1309))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1310) || (e(1312) || (e(1314) || e(1316)))) ? $elm$core$Maybe$Just(0) : ((e(1311) || (e(1313) || (e(1315) || e(1317)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(1478) ? (l(1369) ? ((e(1318) || (e(1320) || (e(1322) || (e(1324) || (e(1326) || A2(r, 1329, 1366)))))) ? $elm$core$Maybe$Just(0) : ((e(1319) || (e(1321) || (e(1323) || (e(1325) || e(1327))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1424) ? (e(1369) ? $elm$core$Maybe$Just(17) : ((A2(r, 1370, 1375) || e(1417)) ? $elm$core$Maybe$Just(25) : (A2(r, 1376, 1416) ? $elm$core$Maybe$Just(1) : (e(1418) ? $elm$core$Maybe$Just(20) : (A2(r, 1421, 1422) ? $elm$core$Maybe$Just(29) : (e(1423) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 1425, 1469) || (e(1471) || (A2(r, 1473, 1474) || A2(r, 1476, 1477)))) ? $elm$core$Maybe$Just(3) : (e(1470) ? $elm$core$Maybe$Just(20) : ((e(1472) || e(1475)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(1563) ? ((e(1478) || (A2(r, 1523, 1524) || (A2(r, 1545, 1546) || A2(r, 1548, 1549)))) ? $elm$core$Maybe$Just(25) : ((e(1479) || A2(r, 1552, 1562)) ? $elm$core$Maybe$Just(3) : ((A2(r, 1488, 1514) || A2(r, 1519, 1522)) ? $elm$core$Maybe$Just(18) : (A2(r, 1536, 1541) ? $elm$core$Maybe$Just(13) : (A2(r, 1542, 1544) ? $elm$core$Maybe$Just(26) : (e(1547) ? $elm$core$Maybe$Just(27) : (A2(r, 1550, 1551) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))))) : (l(1631) ? ((e(1563) || A2(r, 1565, 1567)) ? $elm$core$Maybe$Just(25) : (e(1564) ? $elm$core$Maybe$Just(13) : ((A2(r, 1568, 1599) || A2(r, 1601, 1610)) ? $elm$core$Maybe$Just(18) : (e(1600) ? $elm$core$Maybe$Just(17) : (A2(r, 1611, 1630) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(1631) || (e(1648) || A2(r, 1750, 1755))) ? $elm$core$Maybe$Just(3) : (A2(r, 1632, 1641) ? $elm$core$Maybe$Just(6) : ((A2(r, 1642, 1645) || e(1748)) ? $elm$core$Maybe$Just(25) : ((A2(r, 1646, 1647) || (A2(r, 1649, 1747) || e(1749))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))))) : (l(2556) ? (l(2248) ? (l(2035) ? (l(1790) ? ((e(1756) || (A2(r, 1759, 1764) || (A2(r, 1767, 1768) || A2(r, 1770, 1773)))) ? $elm$core$Maybe$Just(3) : (e(1757) ? $elm$core$Maybe$Just(13) : ((e(1758) || (e(1769) || e(1789))) ? $elm$core$Maybe$Just(29) : (A2(r, 1765, 1766) ? $elm$core$Maybe$Just(17) : ((A2(r, 1774, 1775) || A2(r, 1786, 1788)) ? $elm$core$Maybe$Just(18) : (A2(r, 1776, 1785) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(1839) ? (e(1790) ? $elm$core$Maybe$Just(29) : ((e(1791) || (e(1808) || A2(r, 1810, 1838))) ? $elm$core$Maybe$Just(18) : (A2(r, 1792, 1805) ? $elm$core$Maybe$Just(25) : (e(1807) ? $elm$core$Maybe$Just(13) : (e(1809) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(1839) || (A2(r, 1869, 1957) || (e(1969) || A2(r, 1994, 2026)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 1840, 1866) || (A2(r, 1958, 1968) || A2(r, 2027, 2034))) ? $elm$core$Maybe$Just(3) : (A2(r, 1984, 1993) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(2087) ? (l(2045) ? (e(2035) ? $elm$core$Maybe$Just(3) : ((A2(r, 2036, 2037) || e(2042)) ? $elm$core$Maybe$Just(17) : (e(2038) ? $elm$core$Maybe$Just(29) : (A2(r, 2039, 2041) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(2045) || (A2(r, 2070, 2073) || (A2(r, 2075, 2083) || A2(r, 2085, 2086)))) ? $elm$core$Maybe$Just(3) : (A2(r, 2046, 2047) ? $elm$core$Maybe$Just(27) : (A2(r, 2048, 2069) ? $elm$core$Maybe$Just(18) : ((e(2074) || e(2084)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(2143) ? ((e(2087) || (A2(r, 2089, 2093) || A2(r, 2137, 2139))) ? $elm$core$Maybe$Just(3) : (e(2088) ? $elm$core$Maybe$Just(17) : ((A2(r, 2096, 2110) || e(2142)) ? $elm$core$Maybe$Just(25) : (A2(r, 2112, 2136) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((A2(r, 2144, 2154) || (A2(r, 2160, 2183) || (A2(r, 2185, 2190) || A2(r, 2208, 2247)))) ? $elm$core$Maybe$Just(18) : (e(2184) ? $elm$core$Maybe$Just(28) : (A2(r, 2192, 2193) ? $elm$core$Maybe$Just(13) : (A2(r, 2200, 2207) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(2432) ? (l(2368) ? ((e(2248) || (A2(r, 2308, 2361) || e(2365))) ? $elm$core$Maybe$Just(18) : (e(2249) ? $elm$core$Maybe$Just(17) : ((A2(r, 2250, 2273) || (A2(r, 2275, 2306) || (e(2362) || e(2364)))) ? $elm$core$Maybe$Just(3) : (e(2274) ? $elm$core$Maybe$Just(13) : ((e(2307) || (e(2363) || A2(r, 2366, 2367))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(2391) ? ((e(2368) || (A2(r, 2377, 2380) || A2(r, 2382, 2383))) ? $elm$core$Maybe$Just(4) : ((A2(r, 2369, 2376) || (e(2381) || A2(r, 2385, 2390))) ? $elm$core$Maybe$Just(3) : (e(2384) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2391) || A2(r, 2402, 2403)) ? $elm$core$Maybe$Just(3) : ((A2(r, 2392, 2401) || A2(r, 2418, 2431)) ? $elm$core$Maybe$Just(18) : ((A2(r, 2404, 2405) || e(2416)) ? $elm$core$Maybe$Just(25) : (A2(r, 2406, 2415) ? $elm$core$Maybe$Just(6) : (e(2417) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(2502) ? (l(2473) ? ((e(2432) || (A2(r, 2437, 2444) || (A2(r, 2447, 2448) || A2(r, 2451, 2472)))) ? $elm$core$Maybe$Just(18) : (e(2433) ? $elm$core$Maybe$Just(3) : (A2(r, 2434, 2435) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((A2(r, 2474, 2480) || (e(2482) || (A2(r, 2486, 2489) || e(2493)))) ? $elm$core$Maybe$Just(18) : ((e(2492) || A2(r, 2497, 2500)) ? $elm$core$Maybe$Just(3) : (A2(r, 2494, 2496) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2529) ? ((A2(r, 2503, 2504) || (A2(r, 2507, 2508) || e(2519))) ? $elm$core$Maybe$Just(4) : (e(2509) ? $elm$core$Maybe$Just(3) : ((e(2510) || (A2(r, 2524, 2525) || A2(r, 2527, 2528))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2529) || A2(r, 2544, 2545)) ? $elm$core$Maybe$Just(18) : (A2(r, 2530, 2531) ? $elm$core$Maybe$Just(3) : (A2(r, 2534, 2543) ? $elm$core$Maybe$Just(6) : ((A2(r, 2546, 2547) || e(2555)) ? $elm$core$Maybe$Just(27) : (A2(r, 2548, 2553) ? $elm$core$Maybe$Just(8) : (e(2554) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))))))) : (l(2820) ? (l(2688) ? (l(2619) ? ((e(2556) || (A2(r, 2565, 2570) || (A2(r, 2575, 2576) || (A2(r, 2579, 2600) || (A2(r, 2602, 2608) || (A2(r, 2610, 2611) || (A2(r, 2613, 2614) || A2(r, 2616, 2617)))))))) ? $elm$core$Maybe$Just(18) : (e(2557) ? $elm$core$Maybe$Just(25) : ((e(2558) || A2(r, 2561, 2562)) ? $elm$core$Maybe$Just(3) : (e(2563) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2648) ? ((e(2620) || (A2(r, 2625, 2626) || (A2(r, 2631, 2632) || (A2(r, 2635, 2637) || e(2641))))) ? $elm$core$Maybe$Just(3) : (A2(r, 2622, 2624) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)) : ((A2(r, 2649, 2652) || (e(2654) || A2(r, 2674, 2676))) ? $elm$core$Maybe$Just(18) : (A2(r, 2662, 2671) ? $elm$core$Maybe$Just(6) : ((A2(r, 2672, 2673) || e(2677)) ? $elm$core$Maybe$Just(3) : (e(2678) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(2760) ? (l(2737) ? (A2(r, 2689, 2690) ? $elm$core$Maybe$Just(3) : (e(2691) ? $elm$core$Maybe$Just(4) : ((A2(r, 2693, 2701) || (A2(r, 2703, 2705) || (A2(r, 2707, 2728) || A2(r, 2730, 2736)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((A2(r, 2738, 2739) || (A2(r, 2741, 2745) || e(2749))) ? $elm$core$Maybe$Just(18) : ((e(2748) || (A2(r, 2753, 2757) || e(2759))) ? $elm$core$Maybe$Just(3) : (A2(r, 2750, 2752) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2789) ? ((e(2760) || (e(2765) || A2(r, 2786, 2787))) ? $elm$core$Maybe$Just(3) : ((e(2761) || A2(r, 2763, 2764)) ? $elm$core$Maybe$Just(4) : ((e(2768) || A2(r, 2784, 2785)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : (A2(r, 2790, 2799) ? $elm$core$Maybe$Just(6) : (e(2800) ? $elm$core$Maybe$Just(25) : (e(2801) ? $elm$core$Maybe$Just(27) : (e(2809) ? $elm$core$Maybe$Just(18) : ((A2(r, 2810, 2815) || e(2817)) ? $elm$core$Maybe$Just(3) : (A2(r, 2818, 2819) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))))) : (l(2948) ? (l(2890) ? (l(2875) ? ((A2(r, 2821, 2828) || (A2(r, 2831, 2832) || (A2(r, 2835, 2856) || (A2(r, 2858, 2864) || (A2(r, 2866, 2867) || A2(r, 2869, 2873)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((e(2876) || (e(2879) || A2(r, 2881, 2884))) ? $elm$core$Maybe$Just(3) : (e(2877) ? $elm$core$Maybe$Just(18) : ((e(2878) || (e(2880) || A2(r, 2887, 2888))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2913) ? ((A2(r, 2891, 2892) || e(2903)) ? $elm$core$Maybe$Just(4) : ((e(2893) || A2(r, 2901, 2902)) ? $elm$core$Maybe$Just(3) : ((A2(r, 2908, 2909) || A2(r, 2911, 2912)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2913) || (e(2929) || e(2947))) ? $elm$core$Maybe$Just(18) : ((A2(r, 2914, 2915) || e(2946)) ? $elm$core$Maybe$Just(3) : (A2(r, 2918, 2927) ? $elm$core$Maybe$Just(6) : (e(2928) ? $elm$core$Maybe$Just(29) : (A2(r, 2930, 2935) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : (l(3017) ? (l(2978) ? ((A2(r, 2949, 2954) || (A2(r, 2958, 2960) || (A2(r, 2962, 2965) || (A2(r, 2969, 2970) || (e(2972) || A2(r, 2974, 2975)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 2979, 2980) || (A2(r, 2984, 2986) || A2(r, 2990, 3001))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3006, 3007) || (A2(r, 3009, 3010) || A2(r, 3014, 3016))) ? $elm$core$Maybe$Just(4) : (e(3008) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(3058) ? ((A2(r, 3018, 3020) || e(3031)) ? $elm$core$Maybe$Just(4) : (e(3021) ? $elm$core$Maybe$Just(3) : (e(3024) ? $elm$core$Maybe$Just(18) : (A2(r, 3046, 3055) ? $elm$core$Maybe$Just(6) : (A2(r, 3056, 3057) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (e(3058) ? $elm$core$Maybe$Just(8) : ((A2(r, 3059, 3064) || e(3066)) ? $elm$core$Maybe$Just(29) : (e(3065) ? $elm$core$Maybe$Just(27) : ((e(3072) || e(3076)) ? $elm$core$Maybe$Just(3) : (A2(r, 3073, 3075) ? $elm$core$Maybe$Just(4) : (A2(r, 3077, 3084) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))))))))) : (l(7695) ? (l(4881) ? (l(3763) ? (l(3389) ? (l(3217) ? (l(3167) ? ((A2(r, 3086, 3088) || (A2(r, 3090, 3112) || (A2(r, 3114, 3129) || (e(3133) || (A2(r, 3160, 3162) || e(3165)))))) ? $elm$core$Maybe$Just(18) : ((e(3132) || (A2(r, 3134, 3136) || (A2(r, 3142, 3144) || (A2(r, 3146, 3149) || A2(r, 3157, 3158))))) ? $elm$core$Maybe$Just(3) : (A2(r, 3137, 3140) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((A2(r, 3168, 3169) || (e(3200) || (A2(r, 3205, 3212) || A2(r, 3214, 3216)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3170, 3171) || e(3201)) ? $elm$core$Maybe$Just(3) : (A2(r, 3174, 3183) ? $elm$core$Maybe$Just(6) : ((e(3191) || e(3204)) ? $elm$core$Maybe$Just(25) : (A2(r, 3192, 3198) ? $elm$core$Maybe$Just(8) : (e(3199) ? $elm$core$Maybe$Just(29) : (A2(r, 3202, 3203) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))))) : (l(3284) ? ((A2(r, 3218, 3240) || (A2(r, 3242, 3251) || (A2(r, 3253, 3257) || e(3261)))) ? $elm$core$Maybe$Just(18) : ((e(3260) || (e(3263) || (e(3270) || A2(r, 3276, 3277)))) ? $elm$core$Maybe$Just(3) : ((e(3262) || (A2(r, 3264, 3268) || (A2(r, 3271, 3272) || A2(r, 3274, 3275)))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : (l(3314) ? (A2(r, 3285, 3286) ? $elm$core$Maybe$Just(4) : ((A2(r, 3293, 3294) || (A2(r, 3296, 3297) || e(3313))) ? $elm$core$Maybe$Just(18) : (A2(r, 3298, 3299) ? $elm$core$Maybe$Just(3) : (A2(r, 3302, 3311) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(3314) || (A2(r, 3332, 3340) || (A2(r, 3342, 3344) || A2(r, 3346, 3386)))) ? $elm$core$Maybe$Just(18) : ((e(3315) || A2(r, 3330, 3331)) ? $elm$core$Maybe$Just(4) : ((A2(r, 3328, 3329) || A2(r, 3387, 3388)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(3534) ? (l(3425) ? ((e(3389) || (e(3406) || (A2(r, 3412, 3414) || A2(r, 3423, 3424)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3390, 3392) || (A2(r, 3398, 3400) || (A2(r, 3402, 3404) || e(3415)))) ? $elm$core$Maybe$Just(4) : ((A2(r, 3393, 3396) || e(3405)) ? $elm$core$Maybe$Just(3) : (e(3407) ? $elm$core$Maybe$Just(29) : (A2(r, 3416, 3422) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (l(3457) ? ((e(3425) || A2(r, 3450, 3455)) ? $elm$core$Maybe$Just(18) : (A2(r, 3426, 3427) ? $elm$core$Maybe$Just(3) : (A2(r, 3430, 3439) ? $elm$core$Maybe$Just(6) : (A2(r, 3440, 3448) ? $elm$core$Maybe$Just(8) : (e(3449) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : ((e(3457) || e(3530)) ? $elm$core$Maybe$Just(3) : (A2(r, 3458, 3459) ? $elm$core$Maybe$Just(4) : ((A2(r, 3461, 3478) || (A2(r, 3482, 3505) || (A2(r, 3507, 3515) || (e(3517) || A2(r, 3520, 3526))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : (l(3653) ? (l(3571) ? ((A2(r, 3535, 3537) || (A2(r, 3544, 3551) || e(3570))) ? $elm$core$Maybe$Just(4) : ((A2(r, 3538, 3540) || e(3542)) ? $elm$core$Maybe$Just(3) : (A2(r, 3558, 3567) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))) : (e(3571) ? $elm$core$Maybe$Just(4) : (e(3572) ? $elm$core$Maybe$Just(25) : ((A2(r, 3585, 3632) || (A2(r, 3634, 3635) || A2(r, 3648, 3652))) ? $elm$core$Maybe$Just(18) : ((e(3633) || A2(r, 3636, 3642)) ? $elm$core$Maybe$Just(3) : (e(3647) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))))) : (l(3715) ? ((e(3653) || A2(r, 3713, 3714)) ? $elm$core$Maybe$Just(18) : (e(3654) ? $elm$core$Maybe$Just(17) : (A2(r, 3655, 3662) ? $elm$core$Maybe$Just(3) : ((e(3663) || A2(r, 3674, 3675)) ? $elm$core$Maybe$Just(25) : (A2(r, 3664, 3673) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : ((e(3716) || (A2(r, 3718, 3722) || (A2(r, 3724, 3747) || (e(3749) || (A2(r, 3751, 3760) || e(3762)))))) ? $elm$core$Maybe$Just(18) : (e(3761) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(4151) ? (l(3898) ? (l(3859) ? ((e(3763) || (e(3773) || (A2(r, 3776, 3780) || (A2(r, 3804, 3807) || e(3840))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3764, 3772) || A2(r, 3784, 3790)) ? $elm$core$Maybe$Just(3) : (e(3782) ? $elm$core$Maybe$Just(17) : (A2(r, 3792, 3801) ? $elm$core$Maybe$Just(6) : (A2(r, 3841, 3843) ? $elm$core$Maybe$Just(29) : (A2(r, 3844, 3858) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(3881) ? ((e(3859) || (A2(r, 3861, 3863) || A2(r, 3866, 3871))) ? $elm$core$Maybe$Just(29) : (e(3860) ? $elm$core$Maybe$Just(25) : (A2(r, 3864, 3865) ? $elm$core$Maybe$Just(3) : (A2(r, 3872, 3880) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : (e(3881) ? $elm$core$Maybe$Just(6) : (A2(r, 3882, 3891) ? $elm$core$Maybe$Just(8) : ((e(3892) || (e(3894) || e(3896))) ? $elm$core$Maybe$Just(29) : ((e(3893) || (e(3895) || e(3897))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(3980) ? (l(3912) ? ((e(3898) || e(3900)) ? $elm$core$Maybe$Just(21) : ((e(3899) || e(3901)) ? $elm$core$Maybe$Just(22) : (A2(r, 3902, 3903) ? $elm$core$Maybe$Just(4) : (A2(r, 3904, 3911) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((A2(r, 3913, 3948) || A2(r, 3976, 3979)) ? $elm$core$Maybe$Just(18) : ((A2(r, 3953, 3966) || (A2(r, 3968, 3972) || A2(r, 3974, 3975))) ? $elm$core$Maybe$Just(3) : (e(3967) ? $elm$core$Maybe$Just(4) : (e(3973) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(4047) ? (e(3980) ? $elm$core$Maybe$Just(18) : ((A2(r, 3981, 3991) || (A2(r, 3993, 4028) || e(4038))) ? $elm$core$Maybe$Just(3) : ((A2(r, 4030, 4037) || (A2(r, 4039, 4044) || e(4046))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : ((e(4047) || A2(r, 4053, 4056)) ? $elm$core$Maybe$Just(29) : ((A2(r, 4048, 4052) || A2(r, 4057, 4058)) ? $elm$core$Maybe$Just(25) : (A2(r, 4096, 4138) ? $elm$core$Maybe$Just(18) : ((A2(r, 4139, 4140) || e(4145)) ? $elm$core$Maybe$Just(4) : ((A2(r, 4141, 4144) || A2(r, 4146, 4150)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))))) : (l(4238) ? (l(4189) ? ((e(4151) || (A2(r, 4153, 4154) || (A2(r, 4157, 4158) || A2(r, 4184, 4185)))) ? $elm$core$Maybe$Just(3) : ((e(4152) || (A2(r, 4155, 4156) || A2(r, 4182, 4183))) ? $elm$core$Maybe$Just(4) : ((e(4159) || (A2(r, 4176, 4181) || A2(r, 4186, 4188))) ? $elm$core$Maybe$Just(18) : (A2(r, 4160, 4169) ? $elm$core$Maybe$Just(6) : (A2(r, 4170, 4175) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(4208) ? ((e(4189) || (e(4193) || (A2(r, 4197, 4198) || A2(r, 4206, 4207)))) ? $elm$core$Maybe$Just(18) : (A2(r, 4190, 4192) ? $elm$core$Maybe$Just(3) : ((A2(r, 4194, 4196) || A2(r, 4199, 4205)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(4208) || A2(r, 4213, 4225)) ? $elm$core$Maybe$Just(18) : ((A2(r, 4209, 4212) || (e(4226) || (A2(r, 4229, 4230) || e(4237)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 4227, 4228) || A2(r, 4231, 4236)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(4351) ? (l(4255) ? (e(4238) ? $elm$core$Maybe$Just(18) : ((e(4239) || A2(r, 4250, 4252)) ? $elm$core$Maybe$Just(4) : (A2(r, 4240, 4249) ? $elm$core$Maybe$Just(6) : (e(4253) ? $elm$core$Maybe$Just(3) : (e(4254) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (e(4255) ? $elm$core$Maybe$Just(29) : ((A2(r, 4256, 4293) || (e(4295) || e(4301))) ? $elm$core$Maybe$Just(0) : ((A2(r, 4304, 4346) || A2(r, 4349, 4350)) ? $elm$core$Maybe$Just(1) : (e(4347) ? $elm$core$Maybe$Just(25) : (e(4348) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(4745) ? (e(4351) ? $elm$core$Maybe$Just(1) : ((A2(r, 4352, 4680) || (A2(r, 4682, 4685) || (A2(r, 4688, 4694) || (e(4696) || (A2(r, 4698, 4701) || A2(r, 4704, 4744)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : ((A2(r, 4746, 4749) || (A2(r, 4752, 4784) || (A2(r, 4786, 4789) || (A2(r, 4792, 4798) || (e(4800) || (A2(r, 4802, 4805) || (A2(r, 4808, 4822) || A2(r, 4824, 4880)))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(6764) ? (l(6143) ? (l(5918) ? (l(5741) ? ((A2(r, 4882, 4885) || (A2(r, 4888, 4954) || (A2(r, 4992, 5007) || A2(r, 5121, 5740)))) ? $elm$core$Maybe$Just(18) : (A2(r, 4957, 4959) ? $elm$core$Maybe$Just(3) : (A2(r, 4960, 4968) ? $elm$core$Maybe$Just(25) : (A2(r, 4969, 4988) ? $elm$core$Maybe$Just(8) : (A2(r, 5008, 5017) ? $elm$core$Maybe$Just(29) : (A2(r, 5024, 5109) ? $elm$core$Maybe$Just(0) : (A2(r, 5112, 5117) ? $elm$core$Maybe$Just(1) : (e(5120) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))))) : (l(5791) ? (e(5741) ? $elm$core$Maybe$Just(29) : (e(5742) ? $elm$core$Maybe$Just(25) : ((A2(r, 5743, 5759) || A2(r, 5761, 5786)) ? $elm$core$Maybe$Just(18) : (e(5760) ? $elm$core$Maybe$Just(9) : (e(5787) ? $elm$core$Maybe$Just(21) : (e(5788) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 5792, 5866) || (A2(r, 5873, 5880) || A2(r, 5888, 5905))) ? $elm$core$Maybe$Just(18) : (A2(r, 5867, 5869) ? $elm$core$Maybe$Just(25) : (A2(r, 5870, 5872) ? $elm$core$Maybe$Just(7) : (A2(r, 5906, 5908) ? $elm$core$Maybe$Just(3) : (e(5909) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))) : (l(6070) ? ((A2(r, 5919, 5937) || (A2(r, 5952, 5969) || (A2(r, 5984, 5996) || (A2(r, 5998, 6000) || A2(r, 6016, 6067))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 5938, 5939) || (A2(r, 5970, 5971) || (A2(r, 6002, 6003) || A2(r, 6068, 6069)))) ? $elm$core$Maybe$Just(3) : (e(5940) ? $elm$core$Maybe$Just(4) : (A2(r, 5941, 5942) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(6102) ? ((e(6070) || (A2(r, 6078, 6085) || A2(r, 6087, 6088))) ? $elm$core$Maybe$Just(4) : ((A2(r, 6071, 6077) || (e(6086) || A2(r, 6089, 6099))) ? $elm$core$Maybe$Just(3) : (A2(r, 6100, 6101) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : ((e(6102) || A2(r, 6104, 6106)) ? $elm$core$Maybe$Just(25) : (e(6103) ? $elm$core$Maybe$Just(17) : (e(6107) ? $elm$core$Maybe$Just(27) : (e(6108) ? $elm$core$Maybe$Just(18) : (e(6109) ? $elm$core$Maybe$Just(3) : (A2(r, 6112, 6121) ? $elm$core$Maybe$Just(6) : (A2(r, 6128, 6137) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))))))))) : (l(6463) ? (l(6278) ? ((A2(r, 6144, 6149) || A2(r, 6151, 6154)) ? $elm$core$Maybe$Just(25) : (e(6150) ? $elm$core$Maybe$Just(20) : ((A2(r, 6155, 6157) || (e(6159) || e(6277))) ? $elm$core$Maybe$Just(3) : (e(6158) ? $elm$core$Maybe$Just(13) : (A2(r, 6160, 6169) ? $elm$core$Maybe$Just(6) : ((A2(r, 6176, 6210) || (A2(r, 6212, 6264) || A2(r, 6272, 6276))) ? $elm$core$Maybe$Just(18) : (e(6211) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(6434) ? ((e(6278) || (e(6313) || A2(r, 6432, 6433))) ? $elm$core$Maybe$Just(3) : ((A2(r, 6279, 6312) || (e(6314) || (A2(r, 6320, 6389) || A2(r, 6400, 6430)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : ((e(6434) || (A2(r, 6439, 6440) || (e(6450) || A2(r, 6457, 6459)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 6435, 6438) || (A2(r, 6441, 6443) || (A2(r, 6448, 6449) || A2(r, 6451, 6456)))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(6680) ? ((e(6464) || A2(r, 6622, 6655)) ? $elm$core$Maybe$Just(29) : (A2(r, 6468, 6469) ? $elm$core$Maybe$Just(25) : ((A2(r, 6470, 6479) || A2(r, 6608, 6617)) ? $elm$core$Maybe$Just(6) : ((A2(r, 6480, 6509) || (A2(r, 6512, 6516) || (A2(r, 6528, 6571) || (A2(r, 6576, 6601) || A2(r, 6656, 6678))))) ? $elm$core$Maybe$Just(18) : (e(6618) ? $elm$core$Maybe$Just(8) : (e(6679) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(6742) ? ((e(6680) || e(6683)) ? $elm$core$Maybe$Just(3) : ((A2(r, 6681, 6682) || e(6741)) ? $elm$core$Maybe$Just(4) : (A2(r, 6686, 6687) ? $elm$core$Maybe$Just(25) : (A2(r, 6688, 6740) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((e(6742) || (A2(r, 6744, 6750) || (e(6752) || (e(6754) || A2(r, 6757, 6763))))) ? $elm$core$Maybe$Just(3) : ((e(6743) || (e(6753) || A2(r, 6755, 6756))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(7167) ? (l(7001) ? (l(6911) ? ((e(6764) || (A2(r, 6771, 6780) || (e(6783) || (A2(r, 6832, 6845) || A2(r, 6847, 6862))))) ? $elm$core$Maybe$Just(3) : (A2(r, 6765, 6770) ? $elm$core$Maybe$Just(4) : ((A2(r, 6784, 6793) || A2(r, 6800, 6809)) ? $elm$core$Maybe$Just(6) : ((A2(r, 6816, 6822) || A2(r, 6824, 6829)) ? $elm$core$Maybe$Just(25) : (e(6823) ? $elm$core$Maybe$Just(17) : (e(6846) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing)))))) : (l(6970) ? ((A2(r, 6912, 6915) || (e(6964) || A2(r, 6966, 6969))) ? $elm$core$Maybe$Just(3) : ((e(6916) || e(6965)) ? $elm$core$Maybe$Just(4) : (A2(r, 6917, 6963) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(6970) || (e(6972) || e(6978))) ? $elm$core$Maybe$Just(3) : ((e(6971) || (A2(r, 6973, 6977) || A2(r, 6979, 6980))) ? $elm$core$Maybe$Just(4) : (A2(r, 6981, 6988) ? $elm$core$Maybe$Just(18) : (A2(r, 6992, 7000) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(7081) ? (l(7039) ? (e(7001) ? $elm$core$Maybe$Just(6) : ((A2(r, 7002, 7008) || A2(r, 7037, 7038)) ? $elm$core$Maybe$Just(25) : ((A2(r, 7009, 7018) || A2(r, 7028, 7036)) ? $elm$core$Maybe$Just(29) : (A2(r, 7019, 7027) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((A2(r, 7040, 7041) || (A2(r, 7074, 7077) || e(7080))) ? $elm$core$Maybe$Just(3) : ((e(7042) || (e(7073) || A2(r, 7078, 7079))) ? $elm$core$Maybe$Just(4) : (A2(r, 7043, 7072) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(7142) ? ((e(7081) || A2(r, 7083, 7085)) ? $elm$core$Maybe$Just(3) : (e(7082) ? $elm$core$Maybe$Just(4) : ((A2(r, 7086, 7087) || A2(r, 7098, 7141)) ? $elm$core$Maybe$Just(18) : (A2(r, 7088, 7097) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(7142) || (A2(r, 7144, 7145) || (e(7149) || A2(r, 7151, 7153)))) ? $elm$core$Maybe$Just(3) : ((e(7143) || (A2(r, 7146, 7148) || (e(7150) || A2(r, 7154, 7155)))) ? $elm$core$Maybe$Just(4) : (A2(r, 7164, 7166) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(7412) ? (l(7293) ? ((e(7167) || A2(r, 7227, 7231)) ? $elm$core$Maybe$Just(25) : ((A2(r, 7168, 7203) || (A2(r, 7245, 7247) || A2(r, 7258, 7287))) ? $elm$core$Maybe$Just(18) : ((A2(r, 7204, 7211) || A2(r, 7220, 7221)) ? $elm$core$Maybe$Just(4) : ((A2(r, 7212, 7219) || A2(r, 7222, 7223)) ? $elm$core$Maybe$Just(3) : ((A2(r, 7232, 7241) || A2(r, 7248, 7257)) ? $elm$core$Maybe$Just(6) : (A2(r, 7288, 7292) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(7378) ? (e(7293) ? $elm$core$Maybe$Just(17) : ((A2(r, 7294, 7295) || A2(r, 7360, 7367)) ? $elm$core$Maybe$Just(25) : (A2(r, 7296, 7304) ? $elm$core$Maybe$Just(1) : ((A2(r, 7312, 7354) || A2(r, 7357, 7359)) ? $elm$core$Maybe$Just(0) : (A2(r, 7376, 7377) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(7378) || (A2(r, 7380, 7392) || (A2(r, 7394, 7400) || e(7405)))) ? $elm$core$Maybe$Just(3) : (e(7379) ? $elm$core$Maybe$Just(25) : (e(7393) ? $elm$core$Maybe$Just(4) : ((A2(r, 7401, 7404) || A2(r, 7406, 7411)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(7680) ? ((e(7412) || (A2(r, 7416, 7417) || A2(r, 7616, 7679))) ? $elm$core$Maybe$Just(3) : ((A2(r, 7413, 7414) || e(7418)) ? $elm$core$Maybe$Just(18) : (e(7415) ? $elm$core$Maybe$Just(4) : ((A2(r, 7424, 7467) || (A2(r, 7531, 7543) || A2(r, 7545, 7578))) ? $elm$core$Maybe$Just(1) : ((A2(r, 7468, 7530) || (e(7544) || A2(r, 7579, 7615))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(7686) ? ((e(7680) || (e(7682) || e(7684))) ? $elm$core$Maybe$Just(0) : ((e(7681) || (e(7683) || e(7685))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7686) || (e(7688) || (e(7690) || (e(7692) || e(7694))))) ? $elm$core$Maybe$Just(0) : ((e(7687) || (e(7689) || (e(7691) || e(7693)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))) : (l(7904) ? (l(7794) ? (l(7743) ? (l(7718) ? (l(7705) ? ((e(7695) || (e(7697) || (e(7699) || (e(7701) || e(7703))))) ? $elm$core$Maybe$Just(1) : ((e(7696) || (e(7698) || (e(7700) || (e(7702) || e(7704))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7710) ? ((e(7705) || (e(7707) || e(7709))) ? $elm$core$Maybe$Just(1) : ((e(7706) || e(7708)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7710) || (e(7712) || (e(7714) || e(7716)))) ? $elm$core$Maybe$Just(0) : ((e(7711) || (e(7713) || (e(7715) || e(7717)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7729) ? ((e(7718) || (e(7720) || (e(7722) || (e(7724) || (e(7726) || e(7728)))))) ? $elm$core$Maybe$Just(0) : ((e(7719) || (e(7721) || (e(7723) || (e(7725) || e(7727))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7735) ? ((e(7729) || (e(7731) || e(7733))) ? $elm$core$Maybe$Just(1) : ((e(7730) || (e(7732) || e(7734))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7735) || (e(7737) || (e(7739) || e(7741)))) ? $elm$core$Maybe$Just(1) : ((e(7736) || (e(7738) || (e(7740) || e(7742)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(7767) ? (l(7754) ? ((e(7743) || (e(7745) || (e(7747) || (e(7749) || (e(7751) || e(7753)))))) ? $elm$core$Maybe$Just(1) : ((e(7744) || (e(7746) || (e(7748) || (e(7750) || e(7752))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7759) ? ((e(7754) || (e(7756) || e(7758))) ? $elm$core$Maybe$Just(0) : ((e(7755) || e(7757)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7759) || (e(7761) || (e(7763) || e(7765)))) ? $elm$core$Maybe$Just(1) : ((e(7760) || (e(7762) || (e(7764) || e(7766)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(7779) ? ((e(7767) || (e(7769) || (e(7771) || (e(7773) || (e(7775) || e(7777)))))) ? $elm$core$Maybe$Just(1) : ((e(7768) || (e(7770) || (e(7772) || (e(7774) || (e(7776) || e(7778)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7785) ? ((e(7779) || (e(7781) || e(7783))) ? $elm$core$Maybe$Just(1) : ((e(7780) || (e(7782) || e(7784))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7785) || (e(7787) || (e(7789) || (e(7791) || e(7793))))) ? $elm$core$Maybe$Just(1) : ((e(7786) || (e(7788) || (e(7790) || e(7792)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(7852) ? (l(7818) ? (l(7805) ? ((e(7794) || (e(7796) || (e(7798) || (e(7800) || (e(7802) || e(7804)))))) ? $elm$core$Maybe$Just(0) : ((e(7795) || (e(7797) || (e(7799) || (e(7801) || e(7803))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7810) ? ((e(7805) || (e(7807) || e(7809))) ? $elm$core$Maybe$Just(1) : ((e(7806) || e(7808)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7810) || (e(7812) || (e(7814) || e(7816)))) ? $elm$core$Maybe$Just(0) : ((e(7811) || (e(7813) || (e(7815) || e(7817)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7838) ? ((e(7818) || (e(7820) || (e(7822) || (e(7824) || (e(7826) || e(7828)))))) ? $elm$core$Maybe$Just(0) : ((e(7819) || (e(7821) || (e(7823) || (e(7825) || (e(7827) || A2(r, 7829, 7837)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7844) ? ((e(7838) || (e(7840) || e(7842))) ? $elm$core$Maybe$Just(0) : ((e(7839) || (e(7841) || e(7843))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7844) || (e(7846) || (e(7848) || e(7850)))) ? $elm$core$Maybe$Just(0) : ((e(7845) || (e(7847) || (e(7849) || e(7851)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(7877) ? (l(7863) ? ((e(7852) || (e(7854) || (e(7856) || (e(7858) || (e(7860) || e(7862)))))) ? $elm$core$Maybe$Just(0) : ((e(7853) || (e(7855) || (e(7857) || (e(7859) || e(7861))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7869) ? ((e(7863) || (e(7865) || e(7867))) ? $elm$core$Maybe$Just(1) : ((e(7864) || (e(7866) || e(7868))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7869) || (e(7871) || (e(7873) || e(7875)))) ? $elm$core$Maybe$Just(1) : ((e(7870) || (e(7872) || (e(7874) || e(7876)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(7889) ? ((e(7877) || (e(7879) || (e(7881) || (e(7883) || (e(7885) || e(7887)))))) ? $elm$core$Maybe$Just(1) : ((e(7878) || (e(7880) || (e(7882) || (e(7884) || (e(7886) || e(7888)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7895) ? ((e(7889) || (e(7891) || e(7893))) ? $elm$core$Maybe$Just(1) : ((e(7890) || (e(7892) || e(7894))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7895) || (e(7897) || (e(7899) || (e(7901) || e(7903))))) ? $elm$core$Maybe$Just(1) : ((e(7896) || (e(7898) || (e(7900) || e(7902)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(8273) ? (l(8103) ? (l(7928) ? (l(7915) ? ((e(7904) || (e(7906) || (e(7908) || (e(7910) || (e(7912) || e(7914)))))) ? $elm$core$Maybe$Just(0) : ((e(7905) || (e(7907) || (e(7909) || (e(7911) || e(7913))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7920) ? ((e(7915) || (e(7917) || e(7919))) ? $elm$core$Maybe$Just(1) : ((e(7916) || e(7918)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7920) || (e(7922) || (e(7924) || e(7926)))) ? $elm$core$Maybe$Just(0) : ((e(7921) || (e(7923) || (e(7925) || e(7927)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7983) ? (l(7933) ? ((e(7928) || (e(7930) || e(7932))) ? $elm$core$Maybe$Just(0) : ((e(7929) || e(7931)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7933) || (A2(r, 7935, 7943) || (A2(r, 7952, 7957) || A2(r, 7968, 7975)))) ? $elm$core$Maybe$Just(1) : ((e(7934) || (A2(r, 7944, 7951) || (A2(r, 7960, 7965) || A2(r, 7976, 7982)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(8039) ? ((e(7983) || (A2(r, 7992, 7999) || (A2(r, 8008, 8013) || ((_Basics_modBy_fn(2, code) === 1) && A2(r, 8025, 8031))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 7984, 7991) || (A2(r, 8000, 8005) || (A2(r, 8016, 8023) || A2(r, 8032, 8038)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(8039) || (A2(r, 8048, 8061) || (A2(r, 8064, 8071) || (A2(r, 8080, 8087) || A2(r, 8096, 8102))))) ? $elm$core$Maybe$Just(1) : (A2(r, 8040, 8047) ? $elm$core$Maybe$Just(0) : ((A2(r, 8072, 8079) || A2(r, 8088, 8095)) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing)))))) : (l(8191) ? (l(8140) ? ((e(8103) || (A2(r, 8112, 8116) || (A2(r, 8118, 8119) || (e(8126) || (A2(r, 8130, 8132) || A2(r, 8134, 8135)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8104, 8111) || e(8124)) ? $elm$core$Maybe$Just(2) : ((A2(r, 8120, 8123) || A2(r, 8136, 8139)) ? $elm$core$Maybe$Just(0) : ((e(8125) || A2(r, 8127, 8129)) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (l(8167) ? (e(8140) ? $elm$core$Maybe$Just(2) : ((A2(r, 8141, 8143) || A2(r, 8157, 8159)) ? $elm$core$Maybe$Just(28) : ((A2(r, 8144, 8147) || (A2(r, 8150, 8151) || A2(r, 8160, 8166))) ? $elm$core$Maybe$Just(1) : (A2(r, 8152, 8155) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : ((e(8167) || (A2(r, 8178, 8180) || A2(r, 8182, 8183))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8168, 8172) || A2(r, 8184, 8187)) ? $elm$core$Maybe$Just(0) : ((A2(r, 8173, 8175) || A2(r, 8189, 8190)) ? $elm$core$Maybe$Just(28) : (e(8188) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing)))))) : (l(8232) ? (A2(r, 8192, 8202) ? $elm$core$Maybe$Just(9) : (A2(r, 8203, 8207) ? $elm$core$Maybe$Just(13) : (A2(r, 8208, 8213) ? $elm$core$Maybe$Just(20) : ((A2(r, 8214, 8215) || A2(r, 8224, 8231)) ? $elm$core$Maybe$Just(25) : ((e(8216) || (A2(r, 8219, 8220) || e(8223))) ? $elm$core$Maybe$Just(23) : ((e(8217) || e(8221)) ? $elm$core$Maybe$Just(24) : ((e(8218) || e(8222)) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))))) : (l(8250) ? (e(8232) ? $elm$core$Maybe$Just(10) : (e(8233) ? $elm$core$Maybe$Just(11) : (A2(r, 8234, 8238) ? $elm$core$Maybe$Just(13) : (e(8239) ? $elm$core$Maybe$Just(9) : (A2(r, 8240, 8248) ? $elm$core$Maybe$Just(25) : (e(8249) ? $elm$core$Maybe$Just(23) : $elm$core$Maybe$Nothing)))))) : (e(8250) ? $elm$core$Maybe$Just(24) : ((A2(r, 8251, 8254) || (A2(r, 8257, 8259) || A2(r, 8263, 8272))) ? $elm$core$Maybe$Just(25) : (A2(r, 8255, 8256) ? $elm$core$Maybe$Just(19) : (e(8260) ? $elm$core$Maybe$Just(26) : (e(8261) ? $elm$core$Maybe$Just(21) : (e(8262) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))))))) : (l(8495) ? (l(8420) ? (l(8316) ? ((e(8273) || (e(8275) || A2(r, 8277, 8286))) ? $elm$core$Maybe$Just(25) : ((e(8274) || A2(r, 8314, 8315)) ? $elm$core$Maybe$Just(26) : (e(8276) ? $elm$core$Maybe$Just(19) : (e(8287) ? $elm$core$Maybe$Just(9) : ((A2(r, 8288, 8292) || A2(r, 8294, 8303)) ? $elm$core$Maybe$Just(13) : ((e(8304) || A2(r, 8308, 8313)) ? $elm$core$Maybe$Just(8) : (e(8305) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(8333) ? ((e(8316) || A2(r, 8330, 8332)) ? $elm$core$Maybe$Just(26) : (e(8317) ? $elm$core$Maybe$Just(21) : (e(8318) ? $elm$core$Maybe$Just(22) : (e(8319) ? $elm$core$Maybe$Just(17) : (A2(r, 8320, 8329) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (e(8333) ? $elm$core$Maybe$Just(21) : (e(8334) ? $elm$core$Maybe$Just(22) : (A2(r, 8336, 8348) ? $elm$core$Maybe$Just(17) : (A2(r, 8352, 8384) ? $elm$core$Maybe$Just(27) : ((A2(r, 8400, 8412) || e(8417)) ? $elm$core$Maybe$Just(3) : ((A2(r, 8413, 8416) || A2(r, 8418, 8419)) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing)))))))) : (l(8468) ? (e(8420) ? $elm$core$Maybe$Just(5) : (A2(r, 8421, 8432) ? $elm$core$Maybe$Just(3) : ((A2(r, 8448, 8449) || (A2(r, 8451, 8454) || A2(r, 8456, 8457))) ? $elm$core$Maybe$Just(29) : ((e(8450) || (e(8455) || (A2(r, 8459, 8461) || A2(r, 8464, 8466)))) ? $elm$core$Maybe$Just(0) : ((e(8458) || (A2(r, 8462, 8463) || e(8467))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(8484) ? ((e(8468) || (A2(r, 8470, 8471) || A2(r, 8478, 8483))) ? $elm$core$Maybe$Just(29) : ((e(8469) || A2(r, 8473, 8477)) ? $elm$core$Maybe$Just(0) : (e(8472) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(8484) || (e(8486) || (e(8488) || A2(r, 8490, 8493)))) ? $elm$core$Maybe$Just(0) : ((e(8485) || (e(8487) || (e(8489) || e(8494)))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (l(8603) ? (l(8523) ? ((e(8495) || (e(8500) || (e(8505) || (A2(r, 8508, 8509) || A2(r, 8518, 8521))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8496, 8499) || (A2(r, 8510, 8511) || e(8517))) ? $elm$core$Maybe$Just(0) : (A2(r, 8501, 8504) ? $elm$core$Maybe$Just(18) : ((A2(r, 8506, 8507) || e(8522)) ? $elm$core$Maybe$Just(29) : (A2(r, 8512, 8516) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))))) : (l(8579) ? (e(8523) ? $elm$core$Maybe$Just(26) : ((A2(r, 8524, 8525) || e(8527)) ? $elm$core$Maybe$Just(29) : (e(8526) ? $elm$core$Maybe$Just(1) : (A2(r, 8528, 8543) ? $elm$core$Maybe$Just(8) : (A2(r, 8544, 8578) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing))))) : (e(8579) ? $elm$core$Maybe$Just(0) : (e(8580) ? $elm$core$Maybe$Just(1) : (A2(r, 8581, 8584) ? $elm$core$Maybe$Just(7) : (e(8585) ? $elm$core$Maybe$Just(8) : ((A2(r, 8586, 8587) || A2(r, 8597, 8601)) ? $elm$core$Maybe$Just(29) : ((A2(r, 8592, 8596) || e(8602)) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)))))))) : (l(8659) ? (l(8613) ? ((e(8603) || (e(8608) || e(8611))) ? $elm$core$Maybe$Just(26) : ((A2(r, 8604, 8607) || (A2(r, 8609, 8610) || e(8612))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)) : ((e(8613) || (A2(r, 8615, 8621) || (A2(r, 8623, 8653) || A2(r, 8656, 8657)))) ? $elm$core$Maybe$Just(29) : ((e(8614) || (e(8622) || (A2(r, 8654, 8655) || e(8658)))) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : (l(8969) ? ((e(8659) || (A2(r, 8661, 8691) || A2(r, 8960, 8967))) ? $elm$core$Maybe$Just(29) : ((e(8660) || A2(r, 8692, 8959)) ? $elm$core$Maybe$Just(26) : (e(8968) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))) : ((e(8969) || (e(8971) || e(9002))) ? $elm$core$Maybe$Just(22) : ((e(8970) || e(9001)) ? $elm$core$Maybe$Just(21) : ((A2(r, 8972, 8991) || (A2(r, 8994, 9000) || A2(r, 9003, 9083))) ? $elm$core$Maybe$Just(29) : (A2(r, 8992, 8993) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)))))))))))) : (l(65103) ? (l(42587) ? (l(11483) ? (l(11370) ? (l(10223) ? (l(10092) ? (l(9654) ? ((e(9084) || (A2(r, 9115, 9139) || A2(r, 9180, 9185))) ? $elm$core$Maybe$Just(26) : ((A2(r, 9085, 9114) || (A2(r, 9140, 9179) || (A2(r, 9186, 9254) || (A2(r, 9280, 9290) || (A2(r, 9372, 9449) || A2(r, 9472, 9653)))))) ? $elm$core$Maybe$Just(29) : ((A2(r, 9312, 9371) || A2(r, 9450, 9471)) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))) : (l(9727) ? ((e(9654) || (A2(r, 9656, 9664) || A2(r, 9666, 9719))) ? $elm$core$Maybe$Just(29) : ((e(9655) || (e(9665) || A2(r, 9720, 9726))) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)) : ((e(9727) || e(9839)) ? $elm$core$Maybe$Just(26) : ((A2(r, 9728, 9838) || A2(r, 9840, 10087)) ? $elm$core$Maybe$Just(29) : ((e(10088) || e(10090)) ? $elm$core$Maybe$Just(21) : ((e(10089) || e(10091)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : (l(10175) ? ((e(10092) || (e(10094) || (e(10096) || (e(10098) || e(10100))))) ? $elm$core$Maybe$Just(21) : ((e(10093) || (e(10095) || (e(10097) || (e(10099) || e(10101))))) ? $elm$core$Maybe$Just(22) : (A2(r, 10102, 10131) ? $elm$core$Maybe$Just(8) : (A2(r, 10132, 10174) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (l(10215) ? (e(10175) ? $elm$core$Maybe$Just(29) : ((A2(r, 10176, 10180) || A2(r, 10183, 10213)) ? $elm$core$Maybe$Just(26) : ((e(10181) || e(10214)) ? $elm$core$Maybe$Just(21) : (e(10182) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))) : ((e(10215) || (e(10217) || (e(10219) || e(10221)))) ? $elm$core$Maybe$Just(22) : ((e(10216) || (e(10218) || (e(10220) || e(10222)))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))) : (l(10647) ? (l(10634) ? ((e(10223) || (e(10628) || (e(10630) || e(10632)))) ? $elm$core$Maybe$Just(22) : ((A2(r, 10224, 10239) || A2(r, 10496, 10626)) ? $elm$core$Maybe$Just(26) : (A2(r, 10240, 10495) ? $elm$core$Maybe$Just(29) : ((e(10627) || (e(10629) || (e(10631) || e(10633)))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))) : (l(10639) ? ((e(10634) || (e(10636) || e(10638))) ? $elm$core$Maybe$Just(22) : ((e(10635) || e(10637)) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)) : ((e(10639) || (e(10641) || (e(10643) || e(10645)))) ? $elm$core$Maybe$Just(21) : ((e(10640) || (e(10642) || (e(10644) || e(10646)))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))) : (l(11076) ? (l(10714) ? ((e(10647) || e(10712)) ? $elm$core$Maybe$Just(21) : ((e(10648) || e(10713)) ? $elm$core$Maybe$Just(22) : (A2(r, 10649, 10711) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(10714) || e(10748)) ? $elm$core$Maybe$Just(21) : ((e(10715) || e(10749)) ? $elm$core$Maybe$Just(22) : ((A2(r, 10716, 10747) || (A2(r, 10750, 11007) || A2(r, 11056, 11075))) ? $elm$core$Maybe$Just(26) : (A2(r, 11008, 11055) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (l(11311) ? ((e(11076) || A2(r, 11079, 11084)) ? $elm$core$Maybe$Just(26) : ((A2(r, 11077, 11078) || (A2(r, 11085, 11123) || (A2(r, 11126, 11157) || A2(r, 11159, 11263)))) ? $elm$core$Maybe$Just(29) : (A2(r, 11264, 11310) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : ((e(11311) || (e(11360) || (A2(r, 11362, 11364) || (e(11367) || e(11369))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 11312, 11359) || (e(11361) || (A2(r, 11365, 11366) || e(11368)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (l(11431) ? (l(11405) ? (l(11392) ? ((e(11370) || (e(11372) || (e(11377) || (A2(r, 11379, 11380) || A2(r, 11382, 11387))))) ? $elm$core$Maybe$Just(1) : ((e(11371) || (A2(r, 11373, 11376) || (e(11378) || (e(11381) || A2(r, 11390, 11391))))) ? $elm$core$Maybe$Just(0) : (A2(r, 11388, 11389) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : (l(11397) ? ((e(11392) || (e(11394) || e(11396))) ? $elm$core$Maybe$Just(0) : ((e(11393) || e(11395)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11397) || (e(11399) || (e(11401) || e(11403)))) ? $elm$core$Maybe$Just(1) : ((e(11398) || (e(11400) || (e(11402) || e(11404)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(11417) ? ((e(11405) || (e(11407) || (e(11409) || (e(11411) || (e(11413) || e(11415)))))) ? $elm$core$Maybe$Just(1) : ((e(11406) || (e(11408) || (e(11410) || (e(11412) || (e(11414) || e(11416)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(11423) ? ((e(11417) || (e(11419) || e(11421))) ? $elm$core$Maybe$Just(1) : ((e(11418) || (e(11420) || e(11422))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(11423) || (e(11425) || (e(11427) || e(11429)))) ? $elm$core$Maybe$Just(1) : ((e(11424) || (e(11426) || (e(11428) || e(11430)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(11456) ? (l(11442) ? ((e(11431) || (e(11433) || (e(11435) || (e(11437) || (e(11439) || e(11441)))))) ? $elm$core$Maybe$Just(1) : ((e(11432) || (e(11434) || (e(11436) || (e(11438) || e(11440))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(11448) ? ((e(11442) || (e(11444) || e(11446))) ? $elm$core$Maybe$Just(0) : ((e(11443) || (e(11445) || e(11447))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11448) || (e(11450) || (e(11452) || e(11454)))) ? $elm$core$Maybe$Just(0) : ((e(11449) || (e(11451) || (e(11453) || e(11455)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(11468) ? ((e(11456) || (e(11458) || (e(11460) || (e(11462) || (e(11464) || e(11466)))))) ? $elm$core$Maybe$Just(0) : ((e(11457) || (e(11459) || (e(11461) || (e(11463) || (e(11465) || e(11467)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(11474) ? ((e(11468) || (e(11470) || e(11472))) ? $elm$core$Maybe$Just(0) : ((e(11469) || (e(11471) || e(11473))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11474) || (e(11476) || (e(11478) || (e(11480) || e(11482))))) ? $elm$core$Maybe$Just(0) : ((e(11475) || (e(11477) || (e(11479) || e(11481)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(12300) ? (l(11799) ? (l(11630) ? (l(11500) ? ((e(11483) || (e(11485) || (e(11487) || (e(11489) || A2(r, 11491, 11492))))) ? $elm$core$Maybe$Just(1) : ((e(11484) || (e(11486) || (e(11488) || (e(11490) || e(11499))))) ? $elm$core$Maybe$Just(0) : (A2(r, 11493, 11498) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(11512) ? ((e(11500) || (e(11502) || e(11507))) ? $elm$core$Maybe$Just(1) : ((e(11501) || e(11506)) ? $elm$core$Maybe$Just(0) : (A2(r, 11503, 11505) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((A2(r, 11513, 11516) || A2(r, 11518, 11519)) ? $elm$core$Maybe$Just(25) : (e(11517) ? $elm$core$Maybe$Just(8) : ((A2(r, 11520, 11557) || (e(11559) || e(11565))) ? $elm$core$Maybe$Just(1) : (A2(r, 11568, 11623) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(11743) ? (e(11631) ? $elm$core$Maybe$Just(17) : (e(11632) ? $elm$core$Maybe$Just(25) : (e(11647) ? $elm$core$Maybe$Just(3) : ((A2(r, 11648, 11670) || (A2(r, 11680, 11686) || (A2(r, 11688, 11694) || (A2(r, 11696, 11702) || (A2(r, 11704, 11710) || (A2(r, 11712, 11718) || (A2(r, 11720, 11726) || (A2(r, 11728, 11734) || A2(r, 11736, 11742))))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(11781) ? (A2(r, 11744, 11775) ? $elm$core$Maybe$Just(3) : (A2(r, 11776, 11777) ? $elm$core$Maybe$Just(25) : ((e(11778) || e(11780)) ? $elm$core$Maybe$Just(23) : (e(11779) ? $elm$core$Maybe$Just(24) : $elm$core$Maybe$Nothing)))) : ((e(11781) || (e(11786) || e(11789))) ? $elm$core$Maybe$Just(24) : ((A2(r, 11782, 11784) || (e(11787) || A2(r, 11790, 11798))) ? $elm$core$Maybe$Just(25) : ((e(11785) || e(11788)) ? $elm$core$Maybe$Just(23) : $elm$core$Maybe$Nothing)))))) : (l(11842) ? (l(11812) ? ((e(11799) || e(11802)) ? $elm$core$Maybe$Just(20) : ((A2(r, 11800, 11801) || (e(11803) || A2(r, 11806, 11807))) ? $elm$core$Maybe$Just(25) : ((e(11804) || e(11808)) ? $elm$core$Maybe$Just(23) : ((e(11805) || e(11809)) ? $elm$core$Maybe$Just(24) : (e(11810) ? $elm$core$Maybe$Just(21) : (e(11811) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : (l(11817) ? ((e(11812) || (e(11814) || e(11816))) ? $elm$core$Maybe$Just(21) : ((e(11813) || e(11815)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)) : (e(11817) ? $elm$core$Maybe$Just(22) : ((A2(r, 11818, 11822) || (A2(r, 11824, 11833) || (A2(r, 11836, 11839) || e(11841)))) ? $elm$core$Maybe$Just(25) : (e(11823) ? $elm$core$Maybe$Just(17) : ((A2(r, 11834, 11835) || e(11840)) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))) : (l(11903) ? (l(11862) ? ((e(11842) || e(11861)) ? $elm$core$Maybe$Just(21) : ((A2(r, 11843, 11855) || A2(r, 11858, 11860)) ? $elm$core$Maybe$Just(25) : (A2(r, 11856, 11857) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : ((e(11862) || (e(11864) || (e(11866) || e(11868)))) ? $elm$core$Maybe$Just(22) : ((e(11863) || (e(11865) || e(11867))) ? $elm$core$Maybe$Just(21) : (e(11869) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))) : (l(12292) ? ((A2(r, 11904, 11929) || (A2(r, 11931, 12019) || (A2(r, 12032, 12245) || A2(r, 12272, 12287)))) ? $elm$core$Maybe$Just(29) : (e(12288) ? $elm$core$Maybe$Just(9) : (A2(r, 12289, 12291) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : (e(12292) ? $elm$core$Maybe$Just(29) : (e(12293) ? $elm$core$Maybe$Just(17) : (e(12294) ? $elm$core$Maybe$Just(18) : (e(12295) ? $elm$core$Maybe$Just(7) : ((e(12296) || e(12298)) ? $elm$core$Maybe$Just(21) : ((e(12297) || e(12299)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))))))) : (l(12841) ? (l(12343) ? (l(12312) ? ((e(12300) || (e(12302) || (e(12304) || (e(12308) || e(12310))))) ? $elm$core$Maybe$Just(21) : ((e(12301) || (e(12303) || (e(12305) || (e(12309) || e(12311))))) ? $elm$core$Maybe$Just(22) : (A2(r, 12306, 12307) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(12319) ? ((e(12312) || (e(12314) || e(12317))) ? $elm$core$Maybe$Just(21) : ((e(12313) || (e(12315) || e(12318))) ? $elm$core$Maybe$Just(22) : (e(12316) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))) : (e(12319) ? $elm$core$Maybe$Just(22) : ((e(12320) || e(12342)) ? $elm$core$Maybe$Just(29) : (A2(r, 12321, 12329) ? $elm$core$Maybe$Just(7) : (A2(r, 12330, 12333) ? $elm$core$Maybe$Just(3) : (A2(r, 12334, 12335) ? $elm$core$Maybe$Just(4) : (e(12336) ? $elm$core$Maybe$Just(20) : (A2(r, 12337, 12341) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))))) : (l(12538) ? (l(12352) ? ((e(12343) || A2(r, 12350, 12351)) ? $elm$core$Maybe$Just(29) : (A2(r, 12344, 12346) ? $elm$core$Maybe$Just(7) : (e(12347) ? $elm$core$Maybe$Just(17) : (e(12348) ? $elm$core$Maybe$Just(18) : (e(12349) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : ((A2(r, 12353, 12438) || (e(12447) || A2(r, 12449, 12537))) ? $elm$core$Maybe$Just(18) : (A2(r, 12441, 12442) ? $elm$core$Maybe$Just(3) : (A2(r, 12443, 12444) ? $elm$core$Maybe$Just(28) : (A2(r, 12445, 12446) ? $elm$core$Maybe$Just(17) : (e(12448) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))) : (l(12689) ? ((e(12538) || (e(12543) || (A2(r, 12549, 12591) || A2(r, 12593, 12686)))) ? $elm$core$Maybe$Just(18) : (e(12539) ? $elm$core$Maybe$Just(25) : (A2(r, 12540, 12542) ? $elm$core$Maybe$Just(17) : (e(12688) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(12689) || (A2(r, 12694, 12703) || (A2(r, 12736, 12771) || (e(12783) || A2(r, 12800, 12830))))) ? $elm$core$Maybe$Just(29) : ((A2(r, 12690, 12693) || A2(r, 12832, 12840)) ? $elm$core$Maybe$Just(8) : ((A2(r, 12704, 12735) || A2(r, 12784, 12799)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(42560) ? (l(19967) ? ((e(12841) || (A2(r, 12872, 12879) || (A2(r, 12881, 12895) || (A2(r, 12928, 12937) || A2(r, 12977, 12991))))) ? $elm$core$Maybe$Just(8) : ((A2(r, 12842, 12871) || (e(12880) || (A2(r, 12896, 12927) || (A2(r, 12938, 12976) || (A2(r, 12992, 13311) || A2(r, 19904, 19966)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 13312, 19903) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : (l(42237) ? ((e(19967) || A2(r, 42128, 42182)) ? $elm$core$Maybe$Just(29) : ((A2(r, 19968, 40980) || (A2(r, 40982, 42124) || A2(r, 42192, 42231))) ? $elm$core$Maybe$Just(18) : ((e(40981) || A2(r, 42232, 42236)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : ((e(42237) || e(42508)) ? $elm$core$Maybe$Just(17) : ((A2(r, 42238, 42239) || A2(r, 42509, 42511)) ? $elm$core$Maybe$Just(25) : ((A2(r, 42240, 42507) || (A2(r, 42512, 42527) || A2(r, 42538, 42539))) ? $elm$core$Maybe$Just(18) : (A2(r, 42528, 42537) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(42572) ? ((e(42560) || (e(42562) || (e(42564) || (e(42566) || (e(42568) || e(42570)))))) ? $elm$core$Maybe$Just(0) : ((e(42561) || (e(42563) || (e(42565) || (e(42567) || (e(42569) || e(42571)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42578) ? ((e(42572) || (e(42574) || e(42576))) ? $elm$core$Maybe$Just(0) : ((e(42573) || (e(42575) || e(42577))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42578) || (e(42580) || (e(42582) || (e(42584) || e(42586))))) ? $elm$core$Maybe$Just(0) : ((e(42579) || (e(42581) || (e(42583) || e(42585)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))) : (l(42945) ? (l(42824) ? (l(42646) ? (l(42621) ? (l(42598) ? ((e(42587) || (e(42589) || (e(42591) || (e(42593) || (e(42595) || e(42597)))))) ? $elm$core$Maybe$Just(1) : ((e(42588) || (e(42590) || (e(42592) || (e(42594) || e(42596))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(42603) ? ((e(42598) || (e(42600) || e(42602))) ? $elm$core$Maybe$Just(0) : ((e(42599) || e(42601)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42603) || e(42605)) ? $elm$core$Maybe$Just(1) : (e(42604) ? $elm$core$Maybe$Just(0) : (e(42606) ? $elm$core$Maybe$Just(18) : ((e(42607) || A2(r, 42612, 42620)) ? $elm$core$Maybe$Just(3) : (A2(r, 42608, 42610) ? $elm$core$Maybe$Just(5) : (e(42611) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))))) : (l(42632) ? (e(42621) ? $elm$core$Maybe$Just(3) : (e(42622) ? $elm$core$Maybe$Just(25) : (e(42623) ? $elm$core$Maybe$Just(17) : ((e(42624) || (e(42626) || (e(42628) || e(42630)))) ? $elm$core$Maybe$Just(0) : ((e(42625) || (e(42627) || (e(42629) || e(42631)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42638) ? ((e(42632) || (e(42634) || e(42636))) ? $elm$core$Maybe$Just(0) : ((e(42633) || (e(42635) || e(42637))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42638) || (e(42640) || (e(42642) || e(42644)))) ? $elm$core$Maybe$Just(0) : ((e(42639) || (e(42641) || (e(42643) || e(42645)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42795) ? (l(42751) ? ((e(42646) || (e(42648) || e(42650))) ? $elm$core$Maybe$Just(0) : ((e(42647) || (e(42649) || e(42651))) ? $elm$core$Maybe$Just(1) : (A2(r, 42652, 42653) ? $elm$core$Maybe$Just(17) : ((A2(r, 42654, 42655) || A2(r, 42736, 42737)) ? $elm$core$Maybe$Just(3) : (A2(r, 42656, 42725) ? $elm$core$Maybe$Just(18) : (A2(r, 42726, 42735) ? $elm$core$Maybe$Just(7) : (A2(r, 42738, 42743) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 42752, 42774) || A2(r, 42784, 42785)) ? $elm$core$Maybe$Just(28) : (A2(r, 42775, 42783) ? $elm$core$Maybe$Just(17) : ((e(42786) || (e(42788) || (e(42790) || (e(42792) || e(42794))))) ? $elm$core$Maybe$Just(0) : ((e(42787) || (e(42789) || (e(42791) || e(42793)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42809) ? ((e(42795) || (e(42797) || (A2(r, 42799, 42801) || (e(42803) || (e(42805) || e(42807)))))) ? $elm$core$Maybe$Just(1) : ((e(42796) || (e(42798) || (e(42802) || (e(42804) || (e(42806) || e(42808)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(42815) ? ((e(42809) || (e(42811) || e(42813))) ? $elm$core$Maybe$Just(1) : ((e(42810) || (e(42812) || e(42814))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(42815) || (e(42817) || (e(42819) || (e(42821) || e(42823))))) ? $elm$core$Maybe$Just(1) : ((e(42816) || (e(42818) || (e(42820) || e(42822)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(42882) ? (l(42848) ? (l(42835) ? ((e(42824) || (e(42826) || (e(42828) || (e(42830) || (e(42832) || e(42834)))))) ? $elm$core$Maybe$Just(0) : ((e(42825) || (e(42827) || (e(42829) || (e(42831) || e(42833))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42840) ? ((e(42835) || (e(42837) || e(42839))) ? $elm$core$Maybe$Just(1) : ((e(42836) || e(42838)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(42840) || (e(42842) || (e(42844) || e(42846)))) ? $elm$core$Maybe$Just(0) : ((e(42841) || (e(42843) || (e(42845) || e(42847)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(42860) ? ((e(42848) || (e(42850) || (e(42852) || (e(42854) || (e(42856) || e(42858)))))) ? $elm$core$Maybe$Just(0) : ((e(42849) || (e(42851) || (e(42853) || (e(42855) || (e(42857) || e(42859)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42873) ? ((e(42860) || e(42862)) ? $elm$core$Maybe$Just(0) : ((e(42861) || (e(42863) || A2(r, 42865, 42872))) ? $elm$core$Maybe$Just(1) : (e(42864) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : ((e(42873) || (e(42875) || (A2(r, 42877, 42878) || e(42880)))) ? $elm$core$Maybe$Just(0) : ((e(42874) || (e(42876) || (e(42879) || e(42881)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42910) ? (l(42894) ? ((e(42882) || (e(42884) || (e(42886) || (e(42891) || e(42893))))) ? $elm$core$Maybe$Just(0) : ((e(42883) || (e(42885) || (e(42887) || e(42892)))) ? $elm$core$Maybe$Just(1) : (e(42888) ? $elm$core$Maybe$Just(17) : (A2(r, 42889, 42890) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (l(42902) ? ((e(42894) || (e(42897) || A2(r, 42899, 42901))) ? $elm$core$Maybe$Just(1) : (e(42895) ? $elm$core$Maybe$Just(18) : ((e(42896) || e(42898)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : ((e(42902) || (e(42904) || (e(42906) || e(42908)))) ? $elm$core$Maybe$Just(0) : ((e(42903) || (e(42905) || (e(42907) || e(42909)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(42926) ? (l(42915) ? ((e(42910) || (e(42912) || e(42914))) ? $elm$core$Maybe$Just(0) : ((e(42911) || e(42913)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42915) || (e(42917) || (e(42919) || e(42921)))) ? $elm$core$Maybe$Just(1) : ((e(42916) || (e(42918) || (e(42920) || A2(r, 42922, 42925)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(42936) ? ((e(42926) || (A2(r, 42928, 42932) || e(42934))) ? $elm$core$Maybe$Just(0) : ((e(42927) || (e(42933) || e(42935))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42936) || (e(42938) || (e(42940) || (e(42942) || e(42944))))) ? $elm$core$Maybe$Just(0) : ((e(42937) || (e(42939) || (e(42941) || e(42943)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(43697) ? (l(43273) ? (l(43042) ? (l(42993) ? ((e(42945) || (e(42947) || (e(42952) || (e(42954) || (e(42967) || (e(42969) || ((_Basics_modBy_fn(2, code) === 1) && A2(r, 42961, 42965)))))))) ? $elm$core$Maybe$Just(1) : ((e(42946) || (A2(r, 42948, 42951) || (e(42953) || (e(42960) || (e(42966) || e(42968)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(43002) ? ((A2(r, 42994, 42996) || A2(r, 43000, 43001)) ? $elm$core$Maybe$Just(17) : (e(42997) ? $elm$core$Maybe$Just(0) : (e(42998) ? $elm$core$Maybe$Just(1) : (e(42999) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (e(43002) ? $elm$core$Maybe$Just(1) : ((A2(r, 43003, 43009) || (A2(r, 43011, 43013) || (A2(r, 43015, 43018) || A2(r, 43020, 43041)))) ? $elm$core$Maybe$Just(18) : ((e(43010) || (e(43014) || e(43019))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : (l(43137) ? (l(43055) ? (e(43042) ? $elm$core$Maybe$Just(18) : ((A2(r, 43043, 43044) || e(43047)) ? $elm$core$Maybe$Just(4) : ((A2(r, 43045, 43046) || e(43052)) ? $elm$core$Maybe$Just(3) : (A2(r, 43048, 43051) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (A2(r, 43056, 43061) ? $elm$core$Maybe$Just(8) : ((A2(r, 43062, 43063) || e(43065)) ? $elm$core$Maybe$Just(29) : (e(43064) ? $elm$core$Maybe$Just(27) : (A2(r, 43072, 43123) ? $elm$core$Maybe$Just(18) : (A2(r, 43124, 43127) ? $elm$core$Maybe$Just(25) : (e(43136) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))) : (l(43249) ? ((e(43137) || A2(r, 43188, 43203)) ? $elm$core$Maybe$Just(4) : (A2(r, 43138, 43187) ? $elm$core$Maybe$Just(18) : ((A2(r, 43204, 43205) || A2(r, 43232, 43248)) ? $elm$core$Maybe$Just(3) : (A2(r, 43214, 43215) ? $elm$core$Maybe$Just(25) : (A2(r, 43216, 43225) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : ((e(43249) || e(43263)) ? $elm$core$Maybe$Just(3) : ((A2(r, 43250, 43255) || (e(43259) || A2(r, 43261, 43262))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43256, 43258) || e(43260)) ? $elm$core$Maybe$Just(25) : (A2(r, 43264, 43272) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(43494) ? (l(43442) ? (e(43273) ? $elm$core$Maybe$Just(6) : ((A2(r, 43274, 43301) || (A2(r, 43312, 43334) || (A2(r, 43360, 43388) || A2(r, 43396, 43441)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43302, 43309) || (A2(r, 43335, 43345) || A2(r, 43392, 43394))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43310, 43311) || e(43359)) ? $elm$core$Maybe$Just(25) : ((A2(r, 43346, 43347) || e(43395)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(43453) ? (e(43442) ? $elm$core$Maybe$Just(18) : ((e(43443) || (A2(r, 43446, 43449) || e(43452))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43444, 43445) || A2(r, 43450, 43451)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(43453) || e(43493)) ? $elm$core$Maybe$Just(3) : (A2(r, 43454, 43456) ? $elm$core$Maybe$Just(4) : ((A2(r, 43457, 43469) || A2(r, 43486, 43487)) ? $elm$core$Maybe$Just(25) : (e(43471) ? $elm$core$Maybe$Just(17) : (A2(r, 43472, 43481) ? $elm$core$Maybe$Just(6) : (A2(r, 43488, 43492) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))))) : (l(43595) ? (l(43566) ? (e(43494) ? $elm$core$Maybe$Just(17) : ((A2(r, 43495, 43503) || (A2(r, 43514, 43518) || A2(r, 43520, 43560))) ? $elm$core$Maybe$Just(18) : (A2(r, 43504, 43513) ? $elm$core$Maybe$Just(6) : (A2(r, 43561, 43565) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((e(43566) || (A2(r, 43569, 43570) || (A2(r, 43573, 43574) || e(43587)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43567, 43568) || A2(r, 43571, 43572)) ? $elm$core$Maybe$Just(4) : ((A2(r, 43584, 43586) || A2(r, 43588, 43594)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(43632) ? ((e(43595) || A2(r, 43616, 43631)) ? $elm$core$Maybe$Just(18) : (e(43596) ? $elm$core$Maybe$Just(3) : (e(43597) ? $elm$core$Maybe$Just(4) : (A2(r, 43600, 43609) ? $elm$core$Maybe$Just(6) : (A2(r, 43612, 43615) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (e(43632) ? $elm$core$Maybe$Just(17) : ((A2(r, 43633, 43638) || (e(43642) || A2(r, 43646, 43695))) ? $elm$core$Maybe$Just(18) : (A2(r, 43639, 43641) ? $elm$core$Maybe$Just(29) : ((e(43643) || e(43645)) ? $elm$core$Maybe$Just(4) : ((e(43644) || e(43696)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))))) : (l(64274) ? (l(43815) ? (l(43743) ? ((e(43697) || (A2(r, 43701, 43702) || (A2(r, 43705, 43709) || (e(43712) || (e(43714) || A2(r, 43739, 43740)))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43698, 43700) || (A2(r, 43703, 43704) || (A2(r, 43710, 43711) || e(43713)))) ? $elm$core$Maybe$Just(3) : (e(43741) ? $elm$core$Maybe$Just(17) : (e(43742) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(43762) ? ((e(43743) || A2(r, 43760, 43761)) ? $elm$core$Maybe$Just(25) : (A2(r, 43744, 43754) ? $elm$core$Maybe$Just(18) : ((e(43755) || A2(r, 43758, 43759)) ? $elm$core$Maybe$Just(4) : (A2(r, 43756, 43757) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((e(43762) || (A2(r, 43777, 43782) || (A2(r, 43785, 43790) || (A2(r, 43793, 43798) || A2(r, 43808, 43814))))) ? $elm$core$Maybe$Just(18) : (A2(r, 43763, 43764) ? $elm$core$Maybe$Just(17) : (e(43765) ? $elm$core$Maybe$Just(4) : (e(43766) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(44008) ? ((A2(r, 43816, 43822) || A2(r, 43968, 44002)) ? $elm$core$Maybe$Just(18) : ((A2(r, 43824, 43866) || (A2(r, 43872, 43880) || A2(r, 43888, 43967))) ? $elm$core$Maybe$Just(1) : ((e(43867) || A2(r, 43882, 43883)) ? $elm$core$Maybe$Just(28) : ((A2(r, 43868, 43871) || e(43881)) ? $elm$core$Maybe$Just(17) : ((A2(r, 44003, 44004) || A2(r, 44006, 44007)) ? $elm$core$Maybe$Just(4) : (e(44005) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(55215) ? ((e(44008) || e(44013)) ? $elm$core$Maybe$Just(3) : ((A2(r, 44009, 44010) || e(44012)) ? $elm$core$Maybe$Just(4) : (e(44011) ? $elm$core$Maybe$Just(25) : (A2(r, 44016, 44025) ? $elm$core$Maybe$Just(6) : (A2(r, 44032, 55203) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((A2(r, 55216, 55238) || (A2(r, 55243, 55291) || (A2(r, 63744, 64109) || A2(r, 64112, 64217)))) ? $elm$core$Maybe$Just(18) : (A2(r, 55296, 57343) ? $elm$core$Maybe$Just(14) : (A2(r, 57344, 63743) ? $elm$core$Maybe$Just(15) : (A2(r, 64256, 64262) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(65048) ? (l(64466) ? (A2(r, 64275, 64279) ? $elm$core$Maybe$Just(1) : ((e(64285) || (A2(r, 64287, 64296) || (A2(r, 64298, 64310) || (A2(r, 64312, 64316) || (e(64318) || (A2(r, 64320, 64321) || (A2(r, 64323, 64324) || A2(r, 64326, 64433)))))))) ? $elm$core$Maybe$Just(18) : (e(64286) ? $elm$core$Maybe$Just(3) : (e(64297) ? $elm$core$Maybe$Just(26) : (A2(r, 64434, 64450) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : (l(64974) ? ((A2(r, 64467, 64829) || (A2(r, 64848, 64911) || A2(r, 64914, 64967))) ? $elm$core$Maybe$Just(18) : (e(64830) ? $elm$core$Maybe$Just(22) : (e(64831) ? $elm$core$Maybe$Just(21) : (A2(r, 64832, 64847) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(64975) || A2(r, 65021, 65023)) ? $elm$core$Maybe$Just(29) : (A2(r, 65008, 65019) ? $elm$core$Maybe$Just(18) : (e(65020) ? $elm$core$Maybe$Just(27) : (A2(r, 65024, 65039) ? $elm$core$Maybe$Just(3) : (A2(r, 65040, 65046) ? $elm$core$Maybe$Just(25) : (e(65047) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))))))) : (l(65083) ? ((e(65048) || (e(65078) || (e(65080) || e(65082)))) ? $elm$core$Maybe$Just(22) : ((e(65049) || e(65072)) ? $elm$core$Maybe$Just(25) : (A2(r, 65056, 65071) ? $elm$core$Maybe$Just(3) : (A2(r, 65073, 65074) ? $elm$core$Maybe$Just(20) : (A2(r, 65075, 65076) ? $elm$core$Maybe$Just(19) : ((e(65077) || (e(65079) || e(65081))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))))) : (l(65089) ? ((e(65083) || (e(65085) || e(65087))) ? $elm$core$Maybe$Just(21) : ((e(65084) || (e(65086) || e(65088))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)) : ((e(65089) || (e(65091) || e(65095))) ? $elm$core$Maybe$Just(21) : ((e(65090) || (e(65092) || e(65096))) ? $elm$core$Maybe$Just(22) : ((A2(r, 65093, 65094) || A2(r, 65097, 65100)) ? $elm$core$Maybe$Just(25) : (A2(r, 65101, 65102) ? $elm$core$Maybe$Just(19) : $elm$core$Maybe$Nothing))))))))))) : (l(71996) ? (l(69404) ? (l(66421) ? (l(65378) ? (l(65288) ? (l(65121) ? (e(65103) ? $elm$core$Maybe$Just(19) : ((A2(r, 65104, 65106) || (A2(r, 65108, 65111) || A2(r, 65119, 65120))) ? $elm$core$Maybe$Just(25) : (e(65112) ? $elm$core$Maybe$Just(20) : ((e(65113) || (e(65115) || e(65117))) ? $elm$core$Maybe$Just(21) : ((e(65114) || (e(65116) || e(65118))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing))))) : (l(65129) ? ((e(65121) || e(65128)) ? $elm$core$Maybe$Just(25) : ((e(65122) || A2(r, 65124, 65126)) ? $elm$core$Maybe$Just(26) : (e(65123) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))) : ((e(65129) || e(65284)) ? $elm$core$Maybe$Just(27) : ((A2(r, 65130, 65131) || (A2(r, 65281, 65283) || A2(r, 65285, 65287))) ? $elm$core$Maybe$Just(25) : ((A2(r, 65136, 65140) || A2(r, 65142, 65276)) ? $elm$core$Maybe$Just(18) : (e(65279) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing)))))) : (l(65339) ? (e(65288) ? $elm$core$Maybe$Just(21) : (e(65289) ? $elm$core$Maybe$Just(22) : ((e(65290) || (e(65292) || (A2(r, 65294, 65295) || (A2(r, 65306, 65307) || A2(r, 65311, 65312))))) ? $elm$core$Maybe$Just(25) : ((e(65291) || A2(r, 65308, 65310)) ? $elm$core$Maybe$Just(26) : (e(65293) ? $elm$core$Maybe$Just(20) : (A2(r, 65296, 65305) ? $elm$core$Maybe$Just(6) : (A2(r, 65313, 65338) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(65370) ? (e(65339) ? $elm$core$Maybe$Just(21) : (e(65340) ? $elm$core$Maybe$Just(25) : (e(65341) ? $elm$core$Maybe$Just(22) : ((e(65342) || e(65344)) ? $elm$core$Maybe$Just(28) : (e(65343) ? $elm$core$Maybe$Just(19) : (A2(r, 65345, 65369) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (e(65370) ? $elm$core$Maybe$Just(1) : ((e(65371) || e(65375)) ? $elm$core$Maybe$Just(21) : ((e(65372) || e(65374)) ? $elm$core$Maybe$Just(26) : ((e(65373) || e(65376)) ? $elm$core$Maybe$Just(22) : (e(65377) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))))) : (l(65598) ? (l(65505) ? (l(65437) ? (e(65378) ? $elm$core$Maybe$Just(21) : (e(65379) ? $elm$core$Maybe$Just(22) : (A2(r, 65380, 65381) ? $elm$core$Maybe$Just(25) : ((A2(r, 65382, 65391) || A2(r, 65393, 65436)) ? $elm$core$Maybe$Just(18) : (e(65392) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : ((e(65437) || (A2(r, 65440, 65470) || (A2(r, 65474, 65479) || (A2(r, 65482, 65487) || (A2(r, 65490, 65495) || A2(r, 65498, 65500)))))) ? $elm$core$Maybe$Just(18) : (A2(r, 65438, 65439) ? $elm$core$Maybe$Just(17) : (e(65504) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))) : (l(65516) ? ((e(65505) || A2(r, 65509, 65510)) ? $elm$core$Maybe$Just(27) : ((e(65506) || A2(r, 65513, 65515)) ? $elm$core$Maybe$Just(26) : (e(65507) ? $elm$core$Maybe$Just(28) : ((e(65508) || e(65512)) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (e(65516) ? $elm$core$Maybe$Just(26) : ((A2(r, 65517, 65518) || A2(r, 65532, 65533)) ? $elm$core$Maybe$Just(29) : (A2(r, 65529, 65531) ? $elm$core$Maybe$Just(13) : ((A2(r, 65536, 65547) || (A2(r, 65549, 65574) || (A2(r, 65576, 65594) || A2(r, 65596, 65597)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(65999) ? (l(65855) ? ((A2(r, 65599, 65613) || (A2(r, 65616, 65629) || A2(r, 65664, 65786))) ? $elm$core$Maybe$Just(18) : (A2(r, 65792, 65794) ? $elm$core$Maybe$Just(25) : (A2(r, 65799, 65843) ? $elm$core$Maybe$Just(8) : (A2(r, 65847, 65854) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(65855) || (A2(r, 65913, 65929) || (A2(r, 65932, 65934) || (A2(r, 65936, 65948) || e(65952))))) ? $elm$core$Maybe$Just(29) : (A2(r, 65856, 65908) ? $elm$core$Maybe$Just(7) : ((A2(r, 65909, 65912) || A2(r, 65930, 65931)) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : (l(66303) ? (A2(r, 66000, 66044) ? $elm$core$Maybe$Just(29) : ((e(66045) || e(66272)) ? $elm$core$Maybe$Just(3) : ((A2(r, 66176, 66204) || A2(r, 66208, 66256)) ? $elm$core$Maybe$Just(18) : (A2(r, 66273, 66299) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66304, 66335) || (A2(r, 66349, 66368) || (A2(r, 66370, 66377) || A2(r, 66384, 66420)))) ? $elm$core$Maybe$Just(18) : (A2(r, 66336, 66339) ? $elm$core$Maybe$Just(8) : ((e(66369) || e(66378)) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing))))))) : (l(67902) ? (l(67071) ? (l(66735) ? ((e(66421) || (A2(r, 66432, 66461) || (A2(r, 66464, 66499) || (A2(r, 66504, 66511) || A2(r, 66640, 66717))))) ? $elm$core$Maybe$Just(18) : (A2(r, 66422, 66426) ? $elm$core$Maybe$Just(3) : ((e(66463) || e(66512)) ? $elm$core$Maybe$Just(25) : (A2(r, 66513, 66517) ? $elm$core$Maybe$Just(7) : (A2(r, 66560, 66599) ? $elm$core$Maybe$Just(0) : (A2(r, 66600, 66639) ? $elm$core$Maybe$Just(1) : (A2(r, 66720, 66729) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(66939) ? ((A2(r, 66736, 66771) || A2(r, 66928, 66938)) ? $elm$core$Maybe$Just(0) : (A2(r, 66776, 66811) ? $elm$core$Maybe$Just(1) : ((A2(r, 66816, 66855) || A2(r, 66864, 66915)) ? $elm$core$Maybe$Just(18) : (e(66927) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66940, 66954) || (A2(r, 66956, 66962) || A2(r, 66964, 66965))) ? $elm$core$Maybe$Just(0) : ((A2(r, 66967, 66977) || (A2(r, 66979, 66993) || (A2(r, 66995, 67001) || A2(r, 67003, 67004)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(67671) ? ((A2(r, 67072, 67382) || (A2(r, 67392, 67413) || (A2(r, 67424, 67431) || (A2(r, 67584, 67589) || (e(67592) || (A2(r, 67594, 67637) || (A2(r, 67639, 67640) || (e(67644) || A2(r, 67647, 67669))))))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 67456, 67461) || (A2(r, 67463, 67504) || A2(r, 67506, 67514))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)) : (l(67807) ? (e(67671) ? $elm$core$Maybe$Just(25) : ((A2(r, 67672, 67679) || (A2(r, 67705, 67711) || A2(r, 67751, 67759))) ? $elm$core$Maybe$Just(8) : ((A2(r, 67680, 67702) || A2(r, 67712, 67742)) ? $elm$core$Maybe$Just(18) : (A2(r, 67703, 67704) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((A2(r, 67808, 67826) || (A2(r, 67828, 67829) || (A2(r, 67840, 67861) || A2(r, 67872, 67897)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 67835, 67839) || A2(r, 67862, 67867)) ? $elm$core$Maybe$Just(8) : (e(67871) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(68324) ? (l(68120) ? (e(67903) ? $elm$core$Maybe$Just(25) : ((A2(r, 67968, 68023) || (A2(r, 68030, 68031) || (e(68096) || (A2(r, 68112, 68115) || A2(r, 68117, 68119))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68028, 68029) || (A2(r, 68032, 68047) || A2(r, 68050, 68095))) ? $elm$core$Maybe$Just(8) : ((A2(r, 68097, 68099) || (A2(r, 68101, 68102) || A2(r, 68108, 68111))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(68220) ? ((A2(r, 68121, 68149) || A2(r, 68192, 68219)) ? $elm$core$Maybe$Just(18) : ((A2(r, 68152, 68154) || e(68159)) ? $elm$core$Maybe$Just(3) : (A2(r, 68160, 68168) ? $elm$core$Maybe$Just(8) : (A2(r, 68176, 68184) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(68220) || (A2(r, 68224, 68252) || (A2(r, 68288, 68295) || A2(r, 68297, 68323)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68221, 68222) || A2(r, 68253, 68255)) ? $elm$core$Maybe$Just(8) : (e(68223) ? $elm$core$Maybe$Just(25) : (e(68296) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))) : (l(68607) ? (l(68415) ? ((e(68324) || A2(r, 68352, 68405)) ? $elm$core$Maybe$Just(18) : (A2(r, 68325, 68326) ? $elm$core$Maybe$Just(3) : (A2(r, 68331, 68335) ? $elm$core$Maybe$Just(8) : ((A2(r, 68336, 68342) || A2(r, 68409, 68414)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(68415) || A2(r, 68505, 68508)) ? $elm$core$Maybe$Just(25) : ((A2(r, 68416, 68437) || (A2(r, 68448, 68466) || A2(r, 68480, 68497))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68440, 68447) || (A2(r, 68472, 68479) || A2(r, 68521, 68527))) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : (l(69215) ? ((A2(r, 68608, 68680) || A2(r, 68864, 68899)) ? $elm$core$Maybe$Just(18) : (A2(r, 68736, 68786) ? $elm$core$Maybe$Just(0) : (A2(r, 68800, 68850) ? $elm$core$Maybe$Just(1) : (A2(r, 68858, 68863) ? $elm$core$Maybe$Just(8) : (A2(r, 68900, 68903) ? $elm$core$Maybe$Just(3) : (A2(r, 68912, 68921) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (A2(r, 69216, 69246) ? $elm$core$Maybe$Just(8) : ((A2(r, 69248, 69289) || (A2(r, 69296, 69297) || A2(r, 69376, 69403))) ? $elm$core$Maybe$Just(18) : ((A2(r, 69291, 69292) || A2(r, 69373, 69375)) ? $elm$core$Maybe$Just(3) : (e(69293) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))))))))) : (l(70452) ? (l(70002) ? (l(69758) ? (l(69599) ? ((e(69404) || (e(69415) || (A2(r, 69424, 69445) || (A2(r, 69488, 69505) || A2(r, 69552, 69572))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 69405, 69414) || (A2(r, 69457, 69460) || A2(r, 69573, 69579))) ? $elm$core$Maybe$Just(8) : ((A2(r, 69446, 69456) || A2(r, 69506, 69509)) ? $elm$core$Maybe$Just(3) : ((A2(r, 69461, 69465) || A2(r, 69510, 69513)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(69702) ? ((A2(r, 69600, 69622) || A2(r, 69635, 69687)) ? $elm$core$Maybe$Just(18) : ((e(69632) || e(69634)) ? $elm$core$Maybe$Just(4) : ((e(69633) || A2(r, 69688, 69701)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(69702) || (e(69744) || A2(r, 69747, 69748))) ? $elm$core$Maybe$Just(3) : (A2(r, 69703, 69709) ? $elm$core$Maybe$Just(25) : (A2(r, 69714, 69733) ? $elm$core$Maybe$Just(8) : (A2(r, 69734, 69743) ? $elm$core$Maybe$Just(6) : ((A2(r, 69745, 69746) || e(69749)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(69839) ? ((A2(r, 69759, 69761) || (A2(r, 69811, 69814) || (A2(r, 69817, 69818) || e(69826)))) ? $elm$core$Maybe$Just(3) : ((e(69762) || (A2(r, 69808, 69810) || A2(r, 69815, 69816))) ? $elm$core$Maybe$Just(4) : (A2(r, 69763, 69807) ? $elm$core$Maybe$Just(18) : ((A2(r, 69819, 69820) || A2(r, 69822, 69825)) ? $elm$core$Maybe$Just(25) : ((e(69821) || e(69837)) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))) : (l(69932) ? ((A2(r, 69840, 69864) || A2(r, 69891, 69926)) ? $elm$core$Maybe$Just(18) : (A2(r, 69872, 69881) ? $elm$core$Maybe$Just(6) : ((A2(r, 69888, 69890) || A2(r, 69927, 69931)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(69932) || A2(r, 69957, 69958)) ? $elm$core$Maybe$Just(4) : (A2(r, 69933, 69940) ? $elm$core$Maybe$Just(3) : (A2(r, 69942, 69951) ? $elm$core$Maybe$Just(6) : (A2(r, 69952, 69955) ? $elm$core$Maybe$Just(25) : ((e(69956) || (e(69959) || A2(r, 69968, 70001))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))))) : (l(70193) ? (l(70092) ? (l(70018) ? ((e(70002) || e(70006)) ? $elm$core$Maybe$Just(18) : ((e(70003) || A2(r, 70016, 70017)) ? $elm$core$Maybe$Just(3) : (A2(r, 70004, 70005) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : ((e(70018) || (A2(r, 70067, 70069) || A2(r, 70079, 70080))) ? $elm$core$Maybe$Just(4) : ((A2(r, 70019, 70066) || A2(r, 70081, 70084)) ? $elm$core$Maybe$Just(18) : ((A2(r, 70070, 70078) || A2(r, 70089, 70091)) ? $elm$core$Maybe$Just(3) : (A2(r, 70085, 70088) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(70107) ? ((e(70092) || e(70095)) ? $elm$core$Maybe$Just(3) : (e(70093) ? $elm$core$Maybe$Just(25) : (e(70094) ? $elm$core$Maybe$Just(4) : (A2(r, 70096, 70105) ? $elm$core$Maybe$Just(6) : (e(70106) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((e(70107) || A2(r, 70109, 70111)) ? $elm$core$Maybe$Just(25) : ((e(70108) || (A2(r, 70144, 70161) || A2(r, 70163, 70187))) ? $elm$core$Maybe$Just(18) : (A2(r, 70113, 70132) ? $elm$core$Maybe$Just(8) : (A2(r, 70188, 70190) ? $elm$core$Maybe$Just(4) : (A2(r, 70191, 70192) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(70302) ? (l(70205) ? ((e(70193) || (e(70196) || A2(r, 70198, 70199))) ? $elm$core$Maybe$Just(3) : ((A2(r, 70194, 70195) || e(70197)) ? $elm$core$Maybe$Just(4) : (A2(r, 70200, 70204) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : (e(70205) ? $elm$core$Maybe$Just(25) : ((e(70206) || e(70209)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70207, 70208) || (A2(r, 70272, 70278) || (e(70280) || (A2(r, 70282, 70285) || A2(r, 70287, 70301))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(70399) ? ((A2(r, 70303, 70312) || A2(r, 70320, 70366)) ? $elm$core$Maybe$Just(18) : (e(70313) ? $elm$core$Maybe$Just(25) : ((e(70367) || A2(r, 70371, 70378)) ? $elm$core$Maybe$Just(3) : (A2(r, 70368, 70370) ? $elm$core$Maybe$Just(4) : (A2(r, 70384, 70393) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (A2(r, 70400, 70401) ? $elm$core$Maybe$Just(3) : (A2(r, 70402, 70403) ? $elm$core$Maybe$Just(4) : ((A2(r, 70405, 70412) || (A2(r, 70415, 70416) || (A2(r, 70419, 70440) || (A2(r, 70442, 70448) || A2(r, 70450, 70451))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71167) ? (l(70748) ? (l(70501) ? ((A2(r, 70453, 70457) || (e(70461) || (e(70480) || A2(r, 70493, 70497)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 70459, 70460) || e(70464)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70462, 70463) || (A2(r, 70465, 70468) || (A2(r, 70471, 70472) || (A2(r, 70475, 70477) || (e(70487) || A2(r, 70498, 70499)))))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : (l(70721) ? ((A2(r, 70502, 70508) || (A2(r, 70512, 70516) || A2(r, 70712, 70719))) ? $elm$core$Maybe$Just(3) : (A2(r, 70656, 70708) ? $elm$core$Maybe$Just(18) : ((A2(r, 70709, 70711) || e(70720)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(70721) || e(70725)) ? $elm$core$Maybe$Just(4) : ((A2(r, 70722, 70724) || e(70726)) ? $elm$core$Maybe$Just(3) : (A2(r, 70727, 70730) ? $elm$core$Maybe$Just(18) : ((A2(r, 70731, 70735) || A2(r, 70746, 70747)) ? $elm$core$Maybe$Just(25) : (A2(r, 70736, 70745) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(70853) ? (l(70840) ? (e(70749) ? $elm$core$Maybe$Just(25) : ((e(70750) || A2(r, 70835, 70839)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70751, 70753) || A2(r, 70784, 70831)) ? $elm$core$Maybe$Just(18) : (A2(r, 70832, 70834) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : ((e(70840) || (e(70842) || (A2(r, 70847, 70848) || A2(r, 70850, 70851)))) ? $elm$core$Maybe$Just(3) : ((e(70841) || (A2(r, 70843, 70846) || e(70849))) ? $elm$core$Maybe$Just(4) : (e(70852) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(71095) ? ((e(70853) || (e(70855) || A2(r, 71040, 71086))) ? $elm$core$Maybe$Just(18) : (e(70854) ? $elm$core$Maybe$Just(25) : (A2(r, 70864, 70873) ? $elm$core$Maybe$Just(6) : (A2(r, 71087, 71089) ? $elm$core$Maybe$Just(4) : (A2(r, 71090, 71093) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((A2(r, 71096, 71099) || e(71102)) ? $elm$core$Maybe$Just(4) : ((A2(r, 71100, 71101) || (A2(r, 71103, 71104) || A2(r, 71132, 71133))) ? $elm$core$Maybe$Just(3) : (A2(r, 71105, 71127) ? $elm$core$Maybe$Just(25) : (A2(r, 71128, 71131) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71457) ? (l(71338) ? ((A2(r, 71168, 71215) || (e(71236) || A2(r, 71296, 71337))) ? $elm$core$Maybe$Just(18) : ((A2(r, 71216, 71218) || (A2(r, 71227, 71228) || e(71230))) ? $elm$core$Maybe$Just(4) : ((A2(r, 71219, 71226) || (e(71229) || A2(r, 71231, 71232))) ? $elm$core$Maybe$Just(3) : ((A2(r, 71233, 71235) || A2(r, 71264, 71276)) ? $elm$core$Maybe$Just(25) : (A2(r, 71248, 71257) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(71350) ? (e(71338) ? $elm$core$Maybe$Just(18) : ((e(71339) || (e(71341) || A2(r, 71344, 71349))) ? $elm$core$Maybe$Just(3) : ((e(71340) || A2(r, 71342, 71343)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(71350) || e(71456)) ? $elm$core$Maybe$Just(4) : ((e(71351) || A2(r, 71453, 71455)) ? $elm$core$Maybe$Just(3) : ((e(71352) || A2(r, 71424, 71450)) ? $elm$core$Maybe$Just(18) : (e(71353) ? $elm$core$Maybe$Just(25) : (A2(r, 71360, 71369) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(71736) ? ((e(71457) || (e(71462) || A2(r, 71724, 71726))) ? $elm$core$Maybe$Just(4) : ((A2(r, 71458, 71461) || (A2(r, 71463, 71467) || A2(r, 71727, 71735))) ? $elm$core$Maybe$Just(3) : (A2(r, 71472, 71481) ? $elm$core$Maybe$Just(6) : (A2(r, 71482, 71483) ? $elm$core$Maybe$Just(8) : (A2(r, 71484, 71486) ? $elm$core$Maybe$Just(25) : (e(71487) ? $elm$core$Maybe$Just(29) : ((A2(r, 71488, 71494) || A2(r, 71680, 71723)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71934) ? (e(71736) ? $elm$core$Maybe$Just(4) : (A2(r, 71737, 71738) ? $elm$core$Maybe$Just(3) : (e(71739) ? $elm$core$Maybe$Just(25) : (A2(r, 71840, 71871) ? $elm$core$Maybe$Just(0) : (A2(r, 71872, 71903) ? $elm$core$Maybe$Just(1) : (A2(r, 71904, 71913) ? $elm$core$Maybe$Just(6) : (A2(r, 71914, 71922) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 71935, 71942) || (e(71945) || (A2(r, 71948, 71955) || (A2(r, 71957, 71958) || A2(r, 71960, 71983))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 71984, 71989) || A2(r, 71991, 71992)) ? $elm$core$Maybe$Just(4) : (e(71995) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))))) : (l(119893) ? (l(73647) ? (l(72767) ? (l(72242) ? (l(72144) ? ((e(71996) || (e(71998) || e(72003))) ? $elm$core$Maybe$Just(3) : ((e(71997) || (e(72000) || e(72002))) ? $elm$core$Maybe$Just(4) : ((e(71999) || (e(72001) || (A2(r, 72096, 72103) || A2(r, 72106, 72143)))) ? $elm$core$Maybe$Just(18) : (A2(r, 72004, 72006) ? $elm$core$Maybe$Just(25) : (A2(r, 72016, 72025) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(72160) ? (e(72144) ? $elm$core$Maybe$Just(18) : ((A2(r, 72145, 72147) || A2(r, 72156, 72159)) ? $elm$core$Maybe$Just(4) : ((A2(r, 72148, 72151) || A2(r, 72154, 72155)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(72160) || A2(r, 72193, 72202)) ? $elm$core$Maybe$Just(3) : ((e(72161) || (e(72163) || (e(72192) || A2(r, 72203, 72241)))) ? $elm$core$Maybe$Just(18) : (e(72162) ? $elm$core$Maybe$Just(25) : (e(72164) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(72342) ? (l(72262) ? ((e(72242) || e(72250)) ? $elm$core$Maybe$Just(18) : ((A2(r, 72243, 72248) || A2(r, 72251, 72254)) ? $elm$core$Maybe$Just(3) : (e(72249) ? $elm$core$Maybe$Just(4) : (A2(r, 72255, 72261) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (e(72262) ? $elm$core$Maybe$Just(25) : ((e(72263) || (A2(r, 72273, 72278) || (A2(r, 72281, 72283) || A2(r, 72330, 72341)))) ? $elm$core$Maybe$Just(3) : ((e(72272) || A2(r, 72284, 72329)) ? $elm$core$Maybe$Just(18) : (A2(r, 72279, 72280) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(72447) ? ((e(72342) || A2(r, 72344, 72345)) ? $elm$core$Maybe$Just(3) : (e(72343) ? $elm$core$Maybe$Just(4) : ((A2(r, 72346, 72348) || A2(r, 72350, 72354)) ? $elm$core$Maybe$Just(25) : ((e(72349) || A2(r, 72368, 72440)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (A2(r, 72448, 72457) ? $elm$core$Maybe$Just(25) : ((A2(r, 72704, 72712) || A2(r, 72714, 72750)) ? $elm$core$Maybe$Just(18) : ((e(72751) || e(72766)) ? $elm$core$Maybe$Just(4) : ((A2(r, 72752, 72758) || A2(r, 72760, 72765)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(73065) ? (l(72884) ? ((e(72767) || (A2(r, 72850, 72871) || (A2(r, 72874, 72880) || A2(r, 72882, 72883)))) ? $elm$core$Maybe$Just(3) : ((e(72768) || A2(r, 72818, 72847)) ? $elm$core$Maybe$Just(18) : ((A2(r, 72769, 72773) || A2(r, 72816, 72817)) ? $elm$core$Maybe$Just(25) : (A2(r, 72784, 72793) ? $elm$core$Maybe$Just(6) : (A2(r, 72794, 72812) ? $elm$core$Maybe$Just(8) : ((e(72873) || e(72881)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(73019) ? (e(72884) ? $elm$core$Maybe$Just(4) : ((A2(r, 72885, 72886) || (A2(r, 73009, 73014) || e(73018))) ? $elm$core$Maybe$Just(3) : ((A2(r, 72960, 72966) || (A2(r, 72968, 72969) || A2(r, 72971, 73008))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((A2(r, 73020, 73021) || (A2(r, 73023, 73029) || e(73031))) ? $elm$core$Maybe$Just(3) : ((e(73030) || (A2(r, 73056, 73061) || A2(r, 73063, 73064))) ? $elm$core$Maybe$Just(18) : (A2(r, 73040, 73049) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(73471) ? (l(73110) ? (A2(r, 73066, 73097) ? $elm$core$Maybe$Just(18) : ((A2(r, 73098, 73102) || A2(r, 73107, 73108)) ? $elm$core$Maybe$Just(4) : ((A2(r, 73104, 73105) || e(73109)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(73110) || A2(r, 73461, 73462)) ? $elm$core$Maybe$Just(4) : ((e(73111) || A2(r, 73459, 73460)) ? $elm$core$Maybe$Just(3) : ((e(73112) || A2(r, 73440, 73458)) ? $elm$core$Maybe$Just(18) : (A2(r, 73120, 73129) ? $elm$core$Maybe$Just(6) : (A2(r, 73463, 73464) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(73525) ? (A2(r, 73472, 73473) ? $elm$core$Maybe$Just(3) : ((e(73474) || (A2(r, 73476, 73488) || A2(r, 73490, 73523))) ? $elm$core$Maybe$Just(18) : ((e(73475) || e(73524)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(73525) || (A2(r, 73534, 73535) || e(73537))) ? $elm$core$Maybe$Just(4) : ((A2(r, 73526, 73530) || (e(73536) || e(73538))) ? $elm$core$Maybe$Just(3) : (A2(r, 73539, 73551) ? $elm$core$Maybe$Just(25) : (A2(r, 73552, 73561) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))))) : (l(94178) ? (l(92879) ? (l(77823) ? ((e(73648) || (A2(r, 73728, 74649) || (A2(r, 74880, 75075) || A2(r, 77712, 77808)))) ? $elm$core$Maybe$Just(18) : (A2(r, 73664, 73684) ? $elm$core$Maybe$Just(8) : ((A2(r, 73685, 73692) || A2(r, 73697, 73713)) ? $elm$core$Maybe$Just(29) : (A2(r, 73693, 73696) ? $elm$core$Maybe$Just(27) : ((e(73727) || (A2(r, 74864, 74868) || A2(r, 77809, 77810))) ? $elm$core$Maybe$Just(25) : (A2(r, 74752, 74862) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 77824, 78895) || (A2(r, 78913, 78918) || (A2(r, 82944, 83526) || (A2(r, 92160, 92728) || (A2(r, 92736, 92766) || A2(r, 92784, 92862)))))) ? $elm$core$Maybe$Just(18) : (A2(r, 78896, 78911) ? $elm$core$Maybe$Just(13) : ((e(78912) || A2(r, 78919, 78933)) ? $elm$core$Maybe$Just(3) : ((A2(r, 92768, 92777) || A2(r, 92864, 92873)) ? $elm$core$Maybe$Just(6) : (A2(r, 92782, 92783) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(93026) ? ((A2(r, 92880, 92909) || A2(r, 92928, 92975)) ? $elm$core$Maybe$Just(18) : ((A2(r, 92912, 92916) || A2(r, 92976, 92982)) ? $elm$core$Maybe$Just(3) : ((e(92917) || (A2(r, 92983, 92987) || e(92996))) ? $elm$core$Maybe$Just(25) : ((A2(r, 92988, 92991) || e(92997)) ? $elm$core$Maybe$Just(29) : (A2(r, 92992, 92995) ? $elm$core$Maybe$Just(17) : (A2(r, 93008, 93017) ? $elm$core$Maybe$Just(6) : (A2(r, 93019, 93025) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : (l(93951) ? ((A2(r, 93027, 93047) || A2(r, 93053, 93071)) ? $elm$core$Maybe$Just(18) : (A2(r, 93760, 93791) ? $elm$core$Maybe$Just(0) : (A2(r, 93792, 93823) ? $elm$core$Maybe$Just(1) : (A2(r, 93824, 93846) ? $elm$core$Maybe$Just(8) : (A2(r, 93847, 93850) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : ((A2(r, 93952, 94026) || e(94032)) ? $elm$core$Maybe$Just(18) : ((e(94031) || A2(r, 94095, 94098)) ? $elm$core$Maybe$Just(3) : (A2(r, 94033, 94087) ? $elm$core$Maybe$Just(4) : ((A2(r, 94099, 94111) || A2(r, 94176, 94177)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(118607) ? (l(110932) ? (l(101631) ? (e(94178) ? $elm$core$Maybe$Just(25) : (e(94179) ? $elm$core$Maybe$Just(17) : (e(94180) ? $elm$core$Maybe$Just(3) : (A2(r, 94192, 94193) ? $elm$core$Maybe$Just(4) : ((A2(r, 94208, 100343) || A2(r, 100352, 101589)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((A2(r, 101632, 101640) || (A2(r, 110592, 110882) || (e(110898) || A2(r, 110928, 110930)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 110576, 110579) || (A2(r, 110581, 110587) || A2(r, 110589, 110590))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : (l(113807) ? ((e(110933) || (A2(r, 110948, 110951) || (A2(r, 110960, 111355) || (A2(r, 113664, 113770) || (A2(r, 113776, 113788) || A2(r, 113792, 113800)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : (A2(r, 113808, 113817) ? $elm$core$Maybe$Just(18) : (e(113820) ? $elm$core$Maybe$Just(29) : ((A2(r, 113821, 113822) || (A2(r, 118528, 118573) || A2(r, 118576, 118598))) ? $elm$core$Maybe$Just(3) : (e(113823) ? $elm$core$Maybe$Just(25) : (A2(r, 113824, 113827) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))))) : (l(119209) ? (l(119145) ? ((A2(r, 118608, 118723) || (A2(r, 118784, 119029) || (A2(r, 119040, 119078) || A2(r, 119081, 119140)))) ? $elm$core$Maybe$Just(29) : (A2(r, 119141, 119142) ? $elm$core$Maybe$Just(4) : (A2(r, 119143, 119144) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(119145) || (A2(r, 119163, 119170) || A2(r, 119173, 119179))) ? $elm$core$Maybe$Just(3) : ((A2(r, 119146, 119148) || (A2(r, 119171, 119172) || A2(r, 119180, 119208))) ? $elm$core$Maybe$Just(29) : (A2(r, 119149, 119154) ? $elm$core$Maybe$Just(4) : (A2(r, 119155, 119162) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))) : (l(119519) ? ((e(119209) || (A2(r, 119214, 119274) || (A2(r, 119296, 119361) || e(119365)))) ? $elm$core$Maybe$Just(29) : ((A2(r, 119210, 119213) || A2(r, 119362, 119364)) ? $elm$core$Maybe$Just(3) : (A2(r, 119488, 119507) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))) : ((A2(r, 119520, 119539) || A2(r, 119648, 119672)) ? $elm$core$Maybe$Just(8) : (A2(r, 119552, 119638) ? $elm$core$Maybe$Just(29) : ((A2(r, 119808, 119833) || A2(r, 119860, 119885)) ? $elm$core$Maybe$Just(0) : ((A2(r, 119834, 119859) || A2(r, 119886, 119892)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))))) : (l(124111) ? (l(120629) ? (l(120137) ? (l(120004) ? ((A2(r, 119894, 119911) || (A2(r, 119938, 119963) || (A2(r, 119990, 119993) || (e(119995) || A2(r, 119997, 120003))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 119912, 119937) || (e(119964) || (A2(r, 119966, 119967) || (e(119970) || (A2(r, 119973, 119974) || (A2(r, 119977, 119980) || A2(r, 119982, 119989))))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((A2(r, 120005, 120015) || (A2(r, 120042, 120067) || A2(r, 120094, 120119))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120016, 120041) || (A2(r, 120068, 120069) || (A2(r, 120071, 120074) || (A2(r, 120077, 120084) || (A2(r, 120086, 120092) || (A2(r, 120120, 120121) || (A2(r, 120123, 120126) || (A2(r, 120128, 120132) || e(120134))))))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(120431) ? ((A2(r, 120138, 120144) || (A2(r, 120172, 120197) || (A2(r, 120224, 120249) || (A2(r, 120276, 120301) || (A2(r, 120328, 120353) || A2(r, 120380, 120405)))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 120146, 120171) || (A2(r, 120198, 120223) || (A2(r, 120250, 120275) || (A2(r, 120302, 120327) || (A2(r, 120354, 120379) || A2(r, 120406, 120430)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(120539) ? ((e(120431) || (A2(r, 120458, 120485) || A2(r, 120514, 120538))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120432, 120457) || A2(r, 120488, 120512)) ? $elm$core$Maybe$Just(0) : (e(120513) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(120539) || (e(120571) || e(120597))) ? $elm$core$Maybe$Just(26) : ((A2(r, 120540, 120545) || (A2(r, 120572, 120596) || A2(r, 120598, 120603))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120546, 120570) || A2(r, 120604, 120628)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(121478) ? (l(120771) ? ((e(120629) || (e(120655) || (e(120687) || (e(120713) || e(120745))))) ? $elm$core$Maybe$Just(26) : ((A2(r, 120630, 120654) || (A2(r, 120656, 120661) || (A2(r, 120688, 120712) || (A2(r, 120714, 120719) || A2(r, 120746, 120770))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120662, 120686) || A2(r, 120720, 120744)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(121398) ? (e(120771) ? $elm$core$Maybe$Just(26) : ((A2(r, 120772, 120777) || e(120779)) ? $elm$core$Maybe$Just(1) : (e(120778) ? $elm$core$Maybe$Just(0) : (A2(r, 120782, 120831) ? $elm$core$Maybe$Just(6) : (A2(r, 120832, 121343) ? $elm$core$Maybe$Just(29) : (A2(r, 121344, 121397) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : ((e(121398) || (A2(r, 121403, 121452) || (e(121461) || e(121476)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 121399, 121402) || (A2(r, 121453, 121460) || (A2(r, 121462, 121475) || e(121477)))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (l(122927) ? (l(122634) ? (e(121478) ? $elm$core$Maybe$Just(29) : (A2(r, 121479, 121483) ? $elm$core$Maybe$Just(25) : ((A2(r, 121499, 121503) || A2(r, 121505, 121519)) ? $elm$core$Maybe$Just(3) : (A2(r, 122624, 122633) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (e(122634) ? $elm$core$Maybe$Just(18) : ((A2(r, 122635, 122654) || A2(r, 122661, 122666)) ? $elm$core$Maybe$Just(1) : ((A2(r, 122880, 122886) || (A2(r, 122888, 122904) || (A2(r, 122907, 122913) || (A2(r, 122915, 122916) || A2(r, 122918, 122922))))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(123214) ? ((A2(r, 122928, 122989) || A2(r, 123191, 123197)) ? $elm$core$Maybe$Just(17) : ((e(123023) || A2(r, 123184, 123190)) ? $elm$core$Maybe$Just(3) : (A2(r, 123136, 123180) ? $elm$core$Maybe$Just(18) : (A2(r, 123200, 123209) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(123214) || (A2(r, 123536, 123565) || A2(r, 123584, 123627))) ? $elm$core$Maybe$Just(18) : (e(123215) ? $elm$core$Maybe$Just(29) : ((e(123566) || A2(r, 123628, 123631)) ? $elm$core$Maybe$Just(3) : (A2(r, 123632, 123641) ? $elm$core$Maybe$Just(6) : (e(123647) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing))))))))) : (l(127135) ? (l(126463) ? (l(125217) ? ((A2(r, 124112, 124138) || (A2(r, 124896, 124902) || (A2(r, 124904, 124907) || (A2(r, 124909, 124910) || (A2(r, 124912, 124926) || A2(r, 124928, 125124)))))) ? $elm$core$Maybe$Just(18) : (e(124139) ? $elm$core$Maybe$Just(17) : ((A2(r, 124140, 124143) || A2(r, 125136, 125142)) ? $elm$core$Maybe$Just(3) : (A2(r, 124144, 124153) ? $elm$core$Maybe$Just(6) : (A2(r, 125127, 125135) ? $elm$core$Maybe$Just(8) : (A2(r, 125184, 125216) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(126123) ? (e(125217) ? $elm$core$Maybe$Just(0) : (A2(r, 125218, 125251) ? $elm$core$Maybe$Just(1) : (A2(r, 125252, 125258) ? $elm$core$Maybe$Just(3) : (e(125259) ? $elm$core$Maybe$Just(17) : (A2(r, 125264, 125273) ? $elm$core$Maybe$Just(6) : (A2(r, 125278, 125279) ? $elm$core$Maybe$Just(25) : (A2(r, 126065, 126122) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : ((e(126123) || (A2(r, 126125, 126127) || (A2(r, 126129, 126132) || (A2(r, 126209, 126253) || A2(r, 126255, 126269))))) ? $elm$core$Maybe$Just(8) : ((e(126124) || e(126254)) ? $elm$core$Maybe$Just(29) : (e(126128) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing))))) : (l(126566) ? (l(126515) ? ((A2(r, 126464, 126467) || (A2(r, 126469, 126495) || (A2(r, 126497, 126498) || (e(126500) || (e(126503) || A2(r, 126505, 126514)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 126516, 126519) || (e(126530) || (A2(r, 126541, 126543) || (A2(r, 126545, 126546) || (e(126548) || (A2(r, 126561, 126562) || (e(126564) || ((_Basics_modBy_fn(2, code) === 1) && (A2(r, 126521, 126523) || (A2(r, 126535, 126539) || A2(r, 126551, 126559))))))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : (l(126602) ? ((A2(r, 126567, 126570) || (A2(r, 126572, 126578) || (A2(r, 126580, 126583) || (A2(r, 126585, 126588) || (e(126590) || A2(r, 126592, 126601)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 126603, 126619) || (A2(r, 126625, 126627) || (A2(r, 126629, 126633) || A2(r, 126635, 126651)))) ? $elm$core$Maybe$Just(18) : (A2(r, 126704, 126705) ? $elm$core$Maybe$Just(26) : ((A2(r, 126976, 127019) || A2(r, 127024, 127123)) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))) : (l(129199) ? (l(127994) ? ((A2(r, 127136, 127150) || (A2(r, 127153, 127167) || (A2(r, 127169, 127183) || (A2(r, 127185, 127221) || (A2(r, 127245, 127405) || (A2(r, 127462, 127490) || (A2(r, 127504, 127547) || (A2(r, 127552, 127560) || (A2(r, 127568, 127569) || (A2(r, 127584, 127589) || A2(r, 127744, 127993))))))))))) ? $elm$core$Maybe$Just(29) : (A2(r, 127232, 127244) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)) : (l(128991) ? ((e(127994) || (A2(r, 128000, 128727) || (A2(r, 128732, 128748) || (A2(r, 128752, 128764) || (A2(r, 128768, 128886) || A2(r, 128891, 128985)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 127995, 127999) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)) : ((A2(r, 128992, 129003) || (e(129008) || (A2(r, 129024, 129035) || (A2(r, 129040, 129095) || (A2(r, 129104, 129113) || (A2(r, 129120, 129159) || A2(r, 129168, 129197))))))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(131071) ? (l(129726) ? ((A2(r, 129200, 129201) || (A2(r, 129280, 129619) || (A2(r, 129632, 129645) || (A2(r, 129648, 129660) || (A2(r, 129664, 129672) || A2(r, 129680, 129725)))))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing) : ((A2(r, 129727, 129733) || (A2(r, 129742, 129755) || (A2(r, 129760, 129768) || (A2(r, 129776, 129784) || (A2(r, 129792, 129938) || A2(r, 129940, 129994)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 130032, 130041) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))) : (l(194559) ? ((A2(r, 131072, 173791) || (A2(r, 173824, 177977) || (A2(r, 177984, 178205) || (A2(r, 178208, 183969) || (A2(r, 183984, 191456) || A2(r, 191472, 192093)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 194560, 195101) || (A2(r, 196608, 201546) || A2(r, 201552, 205743))) ? $elm$core$Maybe$Just(18) : ((e(917505) || A2(r, 917536, 917631)) ? $elm$core$Maybe$Just(13) : (A2(r, 917760, 917999) ? $elm$core$Maybe$Just(3) : (A2(r, 983040, 1114109) ? $elm$core$Maybe$Just(15) : $elm$core$Maybe$Nothing)))))))))))));
    };
    var $author$project$GrenPrintDefunctionalized$characterIsNotPrint = function (character) {
        if ($author$project$Char$Extra$isLatinAlphaNumOrUnderscoreFast(character) || ((character === " ") || ((character === ".") || ((character === "!") || ((character === "?") || ((character === "-") || (character === ":"))))))) {
            return false;
        }
        else {
            var _v0 = $miniBill$elm_unicode$Unicode$getCategory(character);
            if (_v0.$ === 1) {
                return true;
            }
            else {
                var category = _v0.a;
                switch (category) {
                    case 10:
                        return true;
                    case 11:
                        return true;
                    case 12:
                        return true;
                    case 13:
                        return true;
                    case 14:
                        return true;
                    case 15:
                        return true;
                    case 16:
                        return true;
                    case 0:
                        return false;
                    case 1:
                        return false;
                    case 2:
                        return false;
                    case 3:
                        return false;
                    case 4:
                        return false;
                    case 5:
                        return false;
                    case 6:
                        return false;
                    case 7:
                        return false;
                    case 8:
                        return false;
                    case 9:
                        return true;
                    case 17:
                        return false;
                    case 18:
                        return false;
                    case 19:
                        return false;
                    case 20:
                        return false;
                    case 21:
                        return false;
                    case 22:
                        return false;
                    case 23:
                        return false;
                    case 24:
                        return false;
                    case 25:
                        return false;
                    case 26:
                        return false;
                    case 27:
                        return false;
                    case 28:
                        return false;
                    default:
                        return false;
                }
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$quotedCharToEscaped = function (character) {
        switch (character) {
            case "'":
                return "\\'";
            case "\\":
                return "\\\\";
            case "\t":
                return "\\t";
            case "\n":
                return "\\n";
            case "\r":
                return "\\u{000D}";
            default:
                var otherCharacter = character;
                return $author$project$GrenPrintDefunctionalized$characterIsNotPrint(otherCharacter) ? ("\\u{" + ($author$project$GrenPrintDefunctionalized$characterHex(otherCharacter) + "}")) : $elm$core$String$fromChar(otherCharacter);
        }
    };
    var $author$project$GrenPrintDefunctionalized$charLiteral = function (charContent) {
        return "'" + ($author$project$GrenPrintDefunctionalized$quotedCharToEscaped(charContent) + "'");
    };
    var $author$project$GrenPrintDefunctionalized$declarationSignature_fn = function (syntaxComments, signature) {
        var typePrint = $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, signature.D);
        var rangeBetweenNameAndType = {
            c: $author$project$GrenSyntax$nodeRange(signature.D).d,
            d: $author$project$GrenSyntax$nodeRange(signature.q).c
        };
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(typePrint, function () {
            var _v0 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(rangeBetweenNameAndType, syntaxComments);
            if (!_v0.b) {
                return $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(typePrint));
            }
            else {
                var comment0 = _v0.a;
                var comment1Up = _v0.b;
                return $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented));
            }
        }())), $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(signature.q) + " :"));
    }, $author$project$GrenPrintDefunctionalized$declarationSignature = F2($author$project$GrenPrintDefunctionalized$declarationSignature_fn);
    var $author$project$GrenPrintDefunctionalized$expressionGlsl = function (glslContent) {
        return $author$project$Print$FollowedBy_fn($author$project$Print$exactly("|]"), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$Print$exactly, $author$project$Print$linebreak, $elm$core$String$lines(glslContent)), $author$project$Print$exactly("[glsl|")));
    };
    var $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized = function (_v0) {
        var fullRange = _v0.a;
        var syntaxExpression = _v0.b;
        switch (syntaxExpression.$) {
            case 14:
                var inParens = syntaxExpression.a;
                return $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(inParens);
            case 13:
                var parts = syntaxExpression.a;
                if (!parts.b) {
                    return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$UnitExpr);
                }
                else {
                    if (!parts.b.b) {
                        var inParens = parts.a;
                        return $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(inParens);
                    }
                    else {
                        if (!parts.b.b.b) {
                            var part0 = parts.a;
                            var _v3 = parts.b;
                            var part1 = _v3.a;
                            return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$TupledExpression(_List_fromArray([part0, part1])));
                        }
                        else {
                            if (!parts.b.b.b.b) {
                                var part0 = parts.a;
                                var _v4 = parts.b;
                                var part1 = _v4.a;
                                var _v5 = _v4.b;
                                var part2 = _v5.a;
                                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$TupledExpression(_List_fromArray([part0, part1, part2])));
                            }
                            else {
                                var part0 = parts.a;
                                var _v6 = parts.b;
                                var part1 = _v6.a;
                                var _v7 = _v6.b;
                                var part2 = _v7.a;
                                var _v8 = _v7.b;
                                var part3 = _v8.a;
                                var part4Up = _v8.b;
                                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$TupledExpression(_List_Cons(part0, _List_Cons(part1, _List_Cons(part2, _List_Cons(part3, part4Up))))));
                            }
                        }
                    }
                }
            default:
                var syntaxExpressionNotParenthesized = syntaxExpression;
                return $author$project$GrenSyntax$Node_fn(fullRange, syntaxExpressionNotParenthesized);
        }
    };
    var $author$project$GrenPrintDefunctionalized$expressionIsBase10Zero = function (expression) {
        expressionIsBase10Zero: while (true) {
            var _v0 = $author$project$GrenSyntax$nodeValue($author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(expression));
            _v0$2: while (true) {
                switch (_v0.$) {
                    case 7:
                        if (!_v0.a) {
                            return true;
                        }
                        else {
                            break _v0$2;
                        }
                    case 10:
                        var doublyNegated = _v0.a;
                        var $temp$expression = doublyNegated;
                        expression = $temp$expression;
                        continue expressionIsBase10Zero;
                    default:
                        break _v0$2;
                }
            }
            return false;
        }
    };
    var $author$project$GrenPrintDefunctionalized$expressionIsBase16Zero = function (expression) {
        expressionIsBase16Zero: while (true) {
            var _v0 = $author$project$GrenSyntax$nodeValue($author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(expression));
            _v0$2: while (true) {
                switch (_v0.$) {
                    case 8:
                        if (!_v0.a) {
                            return true;
                        }
                        else {
                            break _v0$2;
                        }
                    case 10:
                        var doublyNegated = _v0.a;
                        var $temp$expression = doublyNegated;
                        expression = $temp$expression;
                        continue expressionIsBase16Zero;
                    default:
                        break _v0$2;
                }
            }
            return false;
        }
    };
    var $author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparated = function (syntaxExpression) {
        expressionIsSpaceSeparated: while (true) {
            switch (syntaxExpression.$) {
                case 0:
                    return false;
                case 1:
                    var application = syntaxExpression.a;
                    if (!application.b) {
                        return false;
                    }
                    else {
                        if (!application.b.b) {
                            var _v2 = application.a;
                            var notActuallyApplied = _v2.b;
                            var $temp$syntaxExpression = notActuallyApplied;
                            syntaxExpression = $temp$syntaxExpression;
                            continue expressionIsSpaceSeparated;
                        }
                        else {
                            var _v3 = application.b;
                            return true;
                        }
                    }
                case 2:
                    return true;
                case 3:
                    return false;
                case 4:
                    return true;
                case 5:
                    return false;
                case 6:
                    return false;
                case 7:
                    return false;
                case 8:
                    return false;
                case 9:
                    return false;
                case 10:
                    return false;
                case 11:
                    return false;
                case 12:
                    return false;
                case 13:
                    var parts = syntaxExpression.a;
                    if (!parts.b) {
                        return false;
                    }
                    else {
                        if (!parts.b.b) {
                            var _v5 = parts.a;
                            var inParens = _v5.b;
                            var $temp$syntaxExpression = inParens;
                            syntaxExpression = $temp$syntaxExpression;
                            continue expressionIsSpaceSeparated;
                        }
                        else {
                            if (!parts.b.b.b) {
                                var _v6 = parts.b;
                                return false;
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var _v7 = parts.b;
                                    var _v8 = _v7.b;
                                    return false;
                                }
                                else {
                                    var _v9 = parts.b;
                                    var _v10 = _v9.b;
                                    var _v11 = _v10.b;
                                    return false;
                                }
                            }
                        }
                    }
                case 14:
                    var _v12 = syntaxExpression.a;
                    var inParens = _v12.b;
                    var $temp$syntaxExpression = inParens;
                    syntaxExpression = $temp$syntaxExpression;
                    continue expressionIsSpaceSeparated;
                case 15:
                    return true;
                case 16:
                    return true;
                case 17:
                    return true;
                case 18:
                    return false;
                case 19:
                    return false;
                case 20:
                    return false;
                case 21:
                    return false;
                case 22:
                    return false;
                default:
                    return false;
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparatedExceptApplication = function (expressionNode) {
        if ($author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparated($author$project$GrenSyntax$nodeValue(expressionNode))) {
            var _v0 = $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(expressionNode);
            if (_v0.b.$ === 1) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    };
    var $author$project$GrenPrintDefunctionalized$expressionOperationExpand_fn = function (left, operator, right) {
        var rightExpanded = function () {
            if (right.b.$ === 2) {
                var _v3 = right.b;
                var rightOperator = _v3.a;
                var rightLeft = _v3.b;
                var rightRight = _v3.c;
                var rightOperationExpanded = $author$project$GrenPrintDefunctionalized$expressionOperationExpand_fn(rightLeft, rightOperator, rightRight);
                return {
                    aD: _List_Cons({ I: rightOperationExpanded.bq, eA: operator }, rightOperationExpanded.aD),
                    am: rightOperationExpanded.am,
                    aK: rightOperationExpanded.aK
                };
            }
            else {
                var rightNotOperation = right;
                return { aD: _List_Nil, am: rightNotOperation, aK: operator };
            }
        }();
        if (left.b.$ === 2) {
            var _v1 = left.b;
            var leftOperator = _v1.a;
            var leftLeft = _v1.b;
            var leftRight = _v1.c;
            var leftOperationExpanded = $author$project$GrenPrintDefunctionalized$expressionOperationExpand_fn(leftLeft, leftOperator, leftRight);
            return {
                aD: _Utils_ap(leftOperationExpanded.aD, _List_Cons({ I: leftOperationExpanded.am, eA: leftOperationExpanded.aK }, rightExpanded.aD)),
                bq: leftOperationExpanded.bq,
                am: rightExpanded.am,
                aK: rightExpanded.aK
            };
        }
        else {
            var leftNotOperation = left;
            return { aD: rightExpanded.aD, bq: leftNotOperation, am: rightExpanded.am, aK: rightExpanded.aK };
        }
    }, $author$project$GrenPrintDefunctionalized$expressionOperationExpand = F3($author$project$GrenPrintDefunctionalized$expressionOperationExpand_fn);
    var $elm$core$String$fromFloat = _String_fromNumber;
    var $elm$core$Basics$truncate = _Basics_truncate;
    var $author$project$GrenPrintDefunctionalized$floatLiteral = function (_float) {
        return (_float | 0) === _float ? ($elm$core$String$fromFloat(_float) + ".0") : $elm$core$String$fromFloat(_float);
    };
    var $elm$core$Basics$abs = function (n) {
        return (n < 0) ? (-n) : n;
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $elm$core$String$repeatHelp_fn = function (n, chunk, result) {
        return (n <= 0) ? result : $elm$core$String$repeatHelp_fn(n >> 1, _Utils_ap(chunk, chunk), (!(n & 1)) ? result : _Utils_ap(result, chunk));
    }, $elm$core$String$repeatHelp = F3($elm$core$String$repeatHelp_fn);
    var $elm$core$String$repeat_fn = function (n, chunk) {
        return $elm$core$String$repeatHelp_fn(n, chunk, "");
    }, $elm$core$String$repeat = F2($elm$core$String$repeat_fn);
    var $author$project$GrenPrintDefunctionalized$stringResizePadLeftWith0s_fn = function (length, unpaddedString) {
        return (_Utils_cmp(length, $elm$core$String$length(unpaddedString)) < 0) ? $elm$core$String$left_fn(length, unpaddedString) : ($elm$core$String$repeat_fn(length - $elm$core$String$length(unpaddedString), "0") + (unpaddedString + ""));
    }, $author$project$GrenPrintDefunctionalized$stringResizePadLeftWith0s = F2($author$project$GrenPrintDefunctionalized$stringResizePadLeftWith0s_fn);
    var $author$project$GrenPrintDefunctionalized$hexLiteral = function (_int) {
        var maybeSignPrint = (_int < 0) ? "-" : "";
        var intAbs = $elm$core$Basics$abs(_int);
        var digitCountToPrint = (intAbs <= 255) ? 2 : ((intAbs <= 65535) ? 4 : ((intAbs <= 4294967295) ? 8 : 16));
        return maybeSignPrint + ("0x" + $author$project$GrenPrintDefunctionalized$stringResizePadLeftWith0s_fn(digitCountToPrint, $author$project$GrenPrintDefunctionalized$intToHexString(_int)));
    };
    var $author$project$GrenPrintDefunctionalized$intLiteral = $elm$core$String$fromInt;
    var $author$project$GrenPrintDefunctionalized$lineSpreadBetweenNodes_fn = function (_v0, _v1) {
        var earlierRange = _v0.a;
        var laterRange = _v1.a;
        return (!(laterRange.c.n - earlierRange.d.n)) ? 0 : 1;
    }, $author$project$GrenPrintDefunctionalized$lineSpreadBetweenNodes = F2($author$project$GrenPrintDefunctionalized$lineSpreadBetweenNodes_fn);
    var $author$project$GrenPrintDefunctionalized$lineSpreadBetweenRanges_fn = function (earlierRange, laterRange) {
        return (!(laterRange.c.n - earlierRange.d.n)) ? 0 : 1;
    }, $author$project$GrenPrintDefunctionalized$lineSpreadBetweenRanges = F2($author$project$GrenPrintDefunctionalized$lineSpreadBetweenRanges_fn);
    var $author$project$GrenPrintDefunctionalized$lineSpreadInNode = function (_v0) {
        var range = _v0.a;
        return $author$project$GrenPrintDefunctionalized$lineSpreadInRange(range);
    };
    var $author$project$Print$listReverseAndIntersperseAndFlatten_fn = function (inBetweenPrint, prints) {
        if (!prints.b) {
            return $author$project$Print$empty;
        }
        else {
            var head = prints.a;
            var tail = prints.b;
            return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
                return $author$project$Print$FollowedBy_fn(soFar, $author$project$Print$FollowedBy_fn(inBetweenPrint, next));
            }, head, tail);
        }
    }, $author$project$Print$listReverseAndIntersperseAndFlatten = F2($author$project$Print$listReverseAndIntersperseAndFlatten_fn);
    var $author$project$GrenPrintDefunctionalized$maybeLineSpread_fn = function (valueToLineSpread, maybe) {
        if (maybe.$ === 1) {
            return 0;
        }
        else {
            var value = maybe.a;
            return valueToLineSpread(value);
        }
    }, $author$project$GrenPrintDefunctionalized$maybeLineSpread = F2($author$project$GrenPrintDefunctionalized$maybeLineSpread_fn);
    var $author$project$GrenPrintDefunctionalized$patternConsExpand = function (_v0) {
        var fulRange = _v0.a;
        var syntaxPattern = _v0.b;
        switch (syntaxPattern.$) {
            case 8:
                var headPattern = syntaxPattern.a;
                var tailPattern = syntaxPattern.b;
                return _List_Cons(headPattern, $author$project$GrenPrintDefunctionalized$patternConsExpand(tailPattern));
            case 0:
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternIgnored)
                ]);
            case 1:
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternUnit)
                ]);
            case 2:
                var _char = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternChar(_char))
                ]);
            case 3:
                var string = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternString(string))
                ]);
            case 4:
                var _int = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternInt(_int))
                ]);
            case 5:
                var _int = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternHex(_int))
                ]);
            case 6:
                var parts = syntaxPattern.a;
                if (!parts.b) {
                    return _List_fromArray([
                        $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternUnit)
                    ]);
                }
                else {
                    if (!parts.b.b) {
                        var inParens = parts.a;
                        return _List_fromArray([
                            $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternTuple(_List_fromArray([inParens])))
                        ]);
                    }
                    else {
                        if (!parts.b.b.b) {
                            var part0 = parts.a;
                            var _v3 = parts.b;
                            var part1 = _v3.a;
                            return _List_fromArray([
                                $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternTuple(_List_fromArray([part0, part1])))
                            ]);
                        }
                        else {
                            if (!parts.b.b.b.b) {
                                var part0 = parts.a;
                                var _v4 = parts.b;
                                var part1 = _v4.a;
                                var _v5 = _v4.b;
                                var part2 = _v5.a;
                                return _List_fromArray([
                                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternTuple(_List_fromArray([part0, part1, part2])))
                                ]);
                            }
                            else {
                                var part0 = parts.a;
                                var _v6 = parts.b;
                                var part1 = _v6.a;
                                var _v7 = _v6.b;
                                var part2 = _v7.a;
                                var _v8 = _v7.b;
                                var part3 = _v8.a;
                                var part4Up = _v8.b;
                                return _List_fromArray([
                                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternTuple(_List_Cons(part0, _List_Cons(part1, _List_Cons(part2, _List_Cons(part3, part4Up))))))
                                ]);
                            }
                        }
                    }
                }
            case 7:
                var fields = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternRecord(fields))
                ]);
            case 9:
                var elements = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternListExact(elements))
                ]);
            case 10:
                var variableName = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternVariable(variableName))
                ]);
            case 11:
                var reference = syntaxPattern.a;
                var parameters = syntaxPattern.b;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternVariant_fn(reference, parameters))
                ]);
            case 12:
                var aliasedPattern = syntaxPattern.a;
                var aliasName = syntaxPattern.b;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternAs_fn(aliasedPattern, aliasName))
                ]);
            default:
                var inParens = syntaxPattern.a;
                return _List_fromArray([
                    $author$project$GrenSyntax$Node_fn(fulRange, $author$project$GrenSyntax$PatternParenthesized(inParens))
                ]);
        }
    };
    var $author$project$GrenPrintDefunctionalized$patternIsSpaceSeparated = function (syntaxPattern) {
        patternIsSpaceSeparated: while (true) {
            switch (syntaxPattern.$) {
                case 0:
                    return false;
                case 1:
                    return false;
                case 10:
                    return false;
                case 2:
                    return false;
                case 3:
                    return false;
                case 4:
                    return false;
                case 5:
                    return false;
                case 13:
                    var _v1 = syntaxPattern.a;
                    var inParens = _v1.b;
                    var $temp$syntaxPattern = inParens;
                    syntaxPattern = $temp$syntaxPattern;
                    continue patternIsSpaceSeparated;
                case 6:
                    var parts = syntaxPattern.a;
                    if (!parts.b) {
                        return false;
                    }
                    else {
                        if (!parts.b.b) {
                            var _v3 = parts.a;
                            var inParens = _v3.b;
                            var $temp$syntaxPattern = inParens;
                            syntaxPattern = $temp$syntaxPattern;
                            continue patternIsSpaceSeparated;
                        }
                        else {
                            if (!parts.b.b.b) {
                                var _v4 = parts.b;
                                return false;
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var _v5 = parts.b;
                                    var _v6 = _v5.b;
                                    return false;
                                }
                                else {
                                    var _v7 = parts.b;
                                    var _v8 = _v7.b;
                                    var _v9 = _v8.b;
                                    return false;
                                }
                            }
                        }
                    }
                case 7:
                    return false;
                case 8:
                    return true;
                case 9:
                    return false;
                case 11:
                    var argumentPatterns = syntaxPattern.b;
                    if (!argumentPatterns.b) {
                        return false;
                    }
                    else {
                        return true;
                    }
                default:
                    return true;
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$patternRecord_fn = function (syntaxComments, syntaxRecord) {
        var _v0 = syntaxRecord.aE;
        if (!_v0.b) {
            return $author$project$Print$FollowedBy_fn(function () {
                var _v1 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(syntaxRecord.i, syntaxComments);
                if (!_v1.b) {
                    return $author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing;
                }
                else {
                    var comment0 = _v1.a;
                    var comment1Up = _v1.b;
                    var commentsCollapsed = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(commentsCollapsed.l), $author$project$Print$WithIndentIncreasedBy_fn(1, commentsCollapsed.m)));
                }
            }(), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpening);
        }
        else {
            var field0 = _v0.a;
            var field1Up = _v0.b;
            var fieldPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (_v5, soFar) {
                var elementRange = _v5.a;
                var fieldName = _v5.b;
                return {
                    j: elementRange.c,
                    h: _List_Cons(function () {
                        var _v6 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: elementRange.d, d: soFar.j }, syntaxComments);
                        if (!_v6.b) {
                            return $author$project$Print$exactly(fieldName);
                        }
                        else {
                            var comment0 = _v6.a;
                            var comment1Up = _v6.b;
                            var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                            return $author$project$Print$FollowedBy_fn($author$project$Print$exactly(fieldName), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsBefore.l), commentsBefore.m));
                        }
                    }(), soFar.h)
                };
            }, { j: syntaxRecord.i.d, h: _List_Nil }, _List_Cons(field0, field1Up));
            var maybeCommentsAfterFields = function () {
                var _v4 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxRecord.i.c, d: fieldPrintsWithCommentsBefore.j }, syntaxComments);
                if (!_v4.b) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var comment0 = _v4.a;
                    var comment1Up = _v4.b;
                    return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                }
            }();
            var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v3) {
                return $author$project$GrenPrintDefunctionalized$maybeLineSpread_fn(function ($) {
                    return $.l;
                }, maybeCommentsAfterFields);
            }, $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, fieldPrintsWithCommentsBefore.h));
            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn(function () {
                if (maybeCommentsAfterFields.$ === 1) {
                    return $author$project$Print$spaceOrLinebreakIndented(lineSpread);
                }
                else {
                    var commentsAfterFields = maybeCommentsAfterFields.a;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn(commentsAfterFields.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread))));
                }
            }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (fieldPrintWithComments) {
                return $author$project$Print$WithIndentIncreasedBy_fn(2, fieldPrintWithComments);
            }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), fieldPrintsWithCommentsBefore.h), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningSpace)));
        }
    }, $author$project$GrenPrintDefunctionalized$patternRecord = F2($author$project$GrenPrintDefunctionalized$patternRecord_fn);
    var $author$project$GrenPrintDefunctionalized$patternToNotParenthesized = function (_v0) {
        var fullRange = _v0.a;
        var syntaxPattern = _v0.b;
        switch (syntaxPattern.$) {
            case 13:
                var inParens = syntaxPattern.a;
                return $author$project$GrenPrintDefunctionalized$patternToNotParenthesized(inParens);
            case 6:
                var parts = syntaxPattern.a;
                if (!parts.b) {
                    return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternUnit);
                }
                else {
                    if (!parts.b.b) {
                        var inParens = parts.a;
                        return $author$project$GrenPrintDefunctionalized$patternToNotParenthesized(inParens);
                    }
                    else {
                        if (!parts.b.b.b) {
                            var part0 = parts.a;
                            var _v3 = parts.b;
                            var part1 = _v3.a;
                            return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternTuple(_List_fromArray([part0, part1])));
                        }
                        else {
                            if (!parts.b.b.b.b) {
                                var part0 = parts.a;
                                var _v4 = parts.b;
                                var part1 = _v4.a;
                                var _v5 = _v4.b;
                                var part2 = _v5.a;
                                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternTuple(_List_fromArray([part0, part1, part2])));
                            }
                            else {
                                var part0 = parts.a;
                                var _v6 = parts.b;
                                var part1 = _v6.a;
                                var _v7 = _v6.b;
                                var part2 = _v7.a;
                                var _v8 = _v7.b;
                                var part3 = _v8.a;
                                var part4Up = _v8.b;
                                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternTuple(_List_Cons(part0, _List_Cons(part1, _List_Cons(part2, _List_Cons(part3, part4Up))))));
                            }
                        }
                    }
                }
            case 0:
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternIgnored);
            case 1:
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternUnit);
            case 10:
                var name = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternVariable(name));
            case 2:
                var _char = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternChar(_char));
            case 3:
                var string = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternString(string));
            case 4:
                var _int = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternInt(_int));
            case 5:
                var _int = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternHex(_int));
            case 7:
                var fields = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternRecord(fields));
            case 8:
                var headPattern = syntaxPattern.a;
                var tailPattern = syntaxPattern.b;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternListCons_fn(headPattern, tailPattern));
            case 9:
                var elementPatterns = syntaxPattern.a;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternListExact(elementPatterns));
            case 11:
                var syntaxQualifiedNameRef = syntaxPattern.a;
                var argumentPatterns = syntaxPattern.b;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternVariant_fn(syntaxQualifiedNameRef, argumentPatterns));
            default:
                var aliasedPattern = syntaxPattern.a;
                var aliasNameNode = syntaxPattern.b;
                return $author$project$GrenSyntax$Node_fn(fullRange, $author$project$GrenSyntax$PatternAs_fn(aliasedPattern, aliasNameNode));
        }
    };
    var $author$project$GrenPrintDefunctionalized$printExactlyAs = $author$project$Print$exactly("as");
    var $author$project$GrenPrintDefunctionalized$printExactlyColonColonSpace = $author$project$Print$exactly(":: ");
    var $author$project$GrenPrintDefunctionalized$printExactlySquareClosing = $author$project$Print$exactly("]");
    var $author$project$GrenPrintDefunctionalized$printExactlySquareOpening = $author$project$Print$exactly("[");
    var $author$project$GrenPrintDefunctionalized$printExactlySquareOpeningSpace = $author$project$Print$exactly("[ ");
    var $author$project$GrenPrintDefunctionalized$printExactlyUnderscore = $author$project$Print$exactly("_");
    var $author$project$GrenPrintDefunctionalized$printExactlyDoubleQuoteDoubleQuoteDoubleQuote = $author$project$Print$exactly("\"\"\"");
    var $author$project$GrenPrintDefunctionalized$singleDoubleQuotedStringCharToEscaped = function (character) {
        switch (character) {
            case "\"":
                return "\\\"";
            case "\\":
                return "\\\\";
            case "\t":
                return "\\t";
            case "\n":
                return "\\n";
            case "\r":
                return "\\u{000D}";
            default:
                var otherCharacter = character;
                return $author$project$GrenPrintDefunctionalized$characterIsNotPrint(otherCharacter) ? ("\\u{" + ($author$project$GrenPrintDefunctionalized$characterHex(otherCharacter) + "}")) : $elm$core$String$fromChar(otherCharacter);
        }
    };
    var $author$project$GrenPrintDefunctionalized$stringUnicodeLength = function (string) {
        return _String_foldl_fn_unwrapped(function (_v0, soFar) {
            return soFar + 1;
        }, 0, string);
    };
    var $author$project$GrenPrintDefunctionalized$tripleDoubleQuotedStringCharToEscaped = function (character) {
        switch (character) {
            case "\"":
                return "\"";
            case "\\":
                return "\\\\";
            case "\t":
                return "\\t";
            case "\n":
                return "\n";
            case "\r":
                return "\r";
            default:
                var otherCharacter = character;
                return $author$project$GrenPrintDefunctionalized$characterIsNotPrint(otherCharacter) ? ("\\u{" + ($author$project$GrenPrintDefunctionalized$characterHex(otherCharacter) + "}")) : $elm$core$String$fromChar(otherCharacter);
        }
    };
    var $author$project$GrenPrintDefunctionalized$tripleDoubleQuotedStringEscapeDoubleQuotes = function (string) {
        var beforeLastCharEscaped = _String_foldl_fn_unwrapped(function (_char, soFar) {
            if ("\"" === _char) {
                return { bn: soFar.bn + 1, co: soFar.co };
            }
            else {
                var firstCharNotDoubleQuote = _char;
                return {
                    bn: 0,
                    co: soFar.co + (function () {
                        var _v1 = soFar.bn;
                        switch (_v1) {
                            case 0:
                                return "";
                            case 1:
                                return "\"";
                            case 2:
                                return "\"\"";
                            default:
                                var atLeast3ConsecutiveDoubleQuoteCount = _v1;
                                return $elm$core$String$repeat_fn(atLeast3ConsecutiveDoubleQuoteCount, "\\\"");
                        }
                    }() + ($elm$core$String$fromChar(firstCharNotDoubleQuote) + ""))
                };
            }
        }, { bn: 0, co: "" }, string);
        return beforeLastCharEscaped.co + ($elm$core$String$repeat_fn(beforeLastCharEscaped.bn, "\\\"") + "");
    };
    var $author$project$GrenPrintDefunctionalized$stringLiteral = function (_v0) {
        var range = _v0.a;
        var stringContent = _v0.b;
        var singleDoubleQuotedStringContentEscaped = _String_foldl_fn_unwrapped(function (contentChar, soFar) {
            return soFar + ($author$project$GrenPrintDefunctionalized$singleDoubleQuotedStringCharToEscaped(contentChar) + "");
        }, "", stringContent);
        var wasProbablyTripleDoubleQuoteOriginally = (!_Utils_eq(range.d.n, range.c.n)) || (((range.c.o - range.d.o) - $author$project$GrenPrintDefunctionalized$stringUnicodeLength(singleDoubleQuotedStringContentEscaped)) !== 2);
        return wasProbablyTripleDoubleQuoteOriginally ? $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyDoubleQuoteDoubleQuoteDoubleQuote, $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$Print$exactly, $author$project$Print$linebreak, $elm$core$String$lines($author$project$GrenPrintDefunctionalized$tripleDoubleQuotedStringEscapeDoubleQuotes(_String_foldl_fn_unwrapped(function (contentChar, soFar) {
            return soFar + ($author$project$GrenPrintDefunctionalized$tripleDoubleQuotedStringCharToEscaped(contentChar) + "");
        }, "", stringContent)))), $author$project$GrenPrintDefunctionalized$printExactlyDoubleQuoteDoubleQuoteDoubleQuote)) : $author$project$Print$exactly("\"" + (singleDoubleQuotedStringContentEscaped + "\""));
    };
    var $author$project$GrenPrintDefunctionalized$patternAs_fn = function (syntaxComments, syntaxAs) {
        var namePrint = $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(syntaxAs.cr));
        var commentsBeforeAliasName = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxAs.cr).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxAs.cs).c
        }, syntaxComments);
        var commentsCollapsibleBeforeAliasName = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeAliasName);
        var aliasedPatternPrint = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, syntaxAs.cs);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v24) {
            return $author$project$Print$lineSpread(aliasedPatternPrint);
        }, commentsCollapsibleBeforeAliasName.l);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeAliasName.b) {
                return namePrint;
            }
            else {
                return $author$project$Print$FollowedBy_fn(namePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsCollapsibleBeforeAliasName.l), commentsCollapsibleBeforeAliasName.m));
            }
        }(), $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyAs, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), aliasedPatternPrint)));
    }, $author$project$GrenPrintDefunctionalized$patternAs = F2($author$project$GrenPrintDefunctionalized$patternAs_fn);
    var $author$project$GrenPrintDefunctionalized$patternCons_fn = function (syntaxComments, syntaxCons) {
        var tailPatterns = $author$project$GrenPrintDefunctionalized$patternConsExpand(syntaxCons.dF);
        var tailPatternPrintsAndCommentsBeforeReverse = $elm$core$List$foldl_fn_unwrapped(function (tailPatternNode, soFar) {
            var print = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, tailPatternNode);
            var _v20 = tailPatternNode;
            var tailPatternRange = _v20.a;
            return {
                j: tailPatternRange.c,
                h: _List_Cons(function () {
                    var _v21 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: tailPatternRange.d, d: soFar.j }, syntaxComments);
                    if (!_v21.b) {
                        return print;
                    }
                    else {
                        var comment0 = _v21.a;
                        var comment1Up = _v21.b;
                        var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v22) {
                            return $author$project$Print$lineSpread(print);
                        }, commentsBefore.l)), commentsBefore.m));
                    }
                }(), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxCons.cz).c,
            h: _List_Nil
        }, tailPatterns).h;
        var headPrint = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, syntaxCons.cz);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v19) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, tailPatternPrintsAndCommentsBeforeReverse);
        }, $author$project$Print$lineSpread(headPrint));
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (tailPatternElementPrintWithCommentsBefore) {
            return $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(3, tailPatternElementPrintWithCommentsBefore), $author$project$GrenPrintDefunctionalized$printExactlyColonColonSpace);
        }, $author$project$Print$spaceOrLinebreakIndented(lineSpread), tailPatternPrintsAndCommentsBeforeReverse), $author$project$Print$spaceOrLinebreakIndented(lineSpread))), headPrint);
    }, $author$project$GrenPrintDefunctionalized$patternCons = F2($author$project$GrenPrintDefunctionalized$patternCons_fn);
    var $author$project$GrenPrintDefunctionalized$patternList_fn = function (syntaxComments, syntaxList) {
        var _v11 = syntaxList.b3;
        if (!_v11.b) {
            return $author$project$Print$FollowedBy_fn(function () {
                var _v12 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(syntaxList.i, syntaxComments);
                if (!_v12.b) {
                    return $author$project$GrenPrintDefunctionalized$printExactlySquareClosing;
                }
                else {
                    var comment0 = _v12.a;
                    var comment1Up = _v12.b;
                    var commentsCollapsed = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlySquareClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(commentsCollapsed.l), $author$project$Print$WithIndentIncreasedBy_fn(1, commentsCollapsed.m)));
                }
            }(), $author$project$GrenPrintDefunctionalized$printExactlySquareOpening);
        }
        else {
            var element0 = _v11.a;
            var element1Up = _v11.b;
            var elementPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (elementNode, soFar) {
                var elementPrint = $author$project$GrenPrintDefunctionalized$patternNotParenthesized_fn(syntaxComments, elementNode);
                var _v16 = elementNode;
                var elementRange = _v16.a;
                return {
                    j: elementRange.c,
                    h: _List_Cons(function () {
                        var _v17 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: elementRange.d, d: soFar.j }, syntaxComments);
                        if (!_v17.b) {
                            return elementPrint;
                        }
                        else {
                            var comment0 = _v17.a;
                            var comment1Up = _v17.b;
                            var commentsBeforeElement = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                            return $author$project$Print$FollowedBy_fn(elementPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v18) {
                                return $author$project$Print$lineSpread(elementPrint);
                            }, commentsBeforeElement.l)), commentsBeforeElement.m));
                        }
                    }(), soFar.h)
                };
            }, { j: syntaxList.i.d, h: _List_Nil }, _List_Cons(element0, element1Up));
            var commentsAfterElements = function () {
                var _v15 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxList.i.c, d: elementPrintsWithCommentsBefore.j }, syntaxComments);
                if (!_v15.b) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var comment0 = _v15.a;
                    var comment1Up = _v15.b;
                    return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                }
            }();
            var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v14) {
                return $author$project$GrenPrintDefunctionalized$maybeLineSpread_fn(function ($) {
                    return $.l;
                }, commentsAfterElements);
            }, $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, elementPrintsWithCommentsBefore.h));
            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlySquareClosing, $author$project$Print$FollowedBy_fn(function () {
                if (commentsAfterElements.$ === 1) {
                    return $author$project$Print$spaceOrLinebreakIndented(lineSpread);
                }
                else {
                    var commentsCollapsibleAfterElements = commentsAfterElements.a;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn(commentsCollapsibleAfterElements.m, $author$project$Print$spaceOrLinebreakIndented(lineSpread))));
                }
            }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (elementPrintWithCommentsBefore) {
                return $author$project$Print$WithIndentIncreasedBy_fn(2, elementPrintWithCommentsBefore);
            }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), elementPrintsWithCommentsBefore.h), $author$project$GrenPrintDefunctionalized$printExactlySquareOpeningSpace)));
        }
    }, $author$project$GrenPrintDefunctionalized$patternList = F2($author$project$GrenPrintDefunctionalized$patternList_fn);
    var $author$project$GrenPrintDefunctionalized$patternNotParenthesized_fn = function (syntaxComments, _v0) {
        patternNotParenthesized: while (true) {
            var fullRange = _v0.a;
            var syntaxPattern = _v0.b;
            switch (syntaxPattern.$) {
                case 0:
                    return $author$project$GrenPrintDefunctionalized$printExactlyUnderscore;
                case 1:
                    return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                case 10:
                    var name = syntaxPattern.a;
                    return $author$project$Print$exactly(name);
                case 2:
                    var _char = syntaxPattern.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$charLiteral(_char));
                case 3:
                    var string = syntaxPattern.a;
                    return $author$project$GrenPrintDefunctionalized$stringLiteral($author$project$GrenSyntax$Node_fn(fullRange, string));
                case 4:
                    var _int = syntaxPattern.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$intLiteral(_int));
                case 5:
                    var _int = syntaxPattern.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$hexLiteral(_int));
                case 13:
                    var inParens = syntaxPattern.a;
                    var commentsBeforeInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: $author$project$GrenSyntax$nodeRange(inParens).d,
                        d: fullRange.d
                    }, syntaxComments);
                    var commentsAfterInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: fullRange.c,
                        d: $author$project$GrenSyntax$nodeRange(inParens).c
                    }, syntaxComments);
                    var _v2 = _Utils_Tuple2(commentsBeforeInParens, commentsAfterInParens);
                    if ((!_v2.a.b) && (!_v2.b.b)) {
                        var $temp$syntaxComments = syntaxComments, $temp$_v0 = inParens;
                        syntaxComments = $temp$syntaxComments;
                        _v0 = $temp$_v0;
                        continue patternNotParenthesized;
                    }
                    else {
                        return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$patternNotParenthesized, {
                            i: fullRange,
                            ah: $author$project$GrenPrintDefunctionalized$patternToNotParenthesized(inParens)
                        }, syntaxComments);
                    }
                case 6:
                    var parts = syntaxPattern.a;
                    if (!parts.b) {
                        return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                    }
                    else {
                        if (!parts.b.b) {
                            var inParens = parts.a;
                            var commentsBeforeInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: $author$project$GrenSyntax$nodeRange(inParens).d,
                                d: fullRange.d
                            }, syntaxComments);
                            var commentsAfterInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: fullRange.c,
                                d: $author$project$GrenSyntax$nodeRange(inParens).c
                            }, syntaxComments);
                            var _v7 = _Utils_Tuple2(commentsBeforeInParens, commentsAfterInParens);
                            if ((!_v7.a.b) && (!_v7.b.b)) {
                                var $temp$syntaxComments = syntaxComments, $temp$_v0 = inParens;
                                syntaxComments = $temp$syntaxComments;
                                _v0 = $temp$_v0;
                                continue patternNotParenthesized;
                            }
                            else {
                                return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$patternNotParenthesized, {
                                    i: fullRange,
                                    ah: $author$project$GrenPrintDefunctionalized$patternToNotParenthesized(inParens)
                                }, syntaxComments);
                            }
                        }
                        else {
                            if (!parts.b.b.b) {
                                var part0 = parts.a;
                                var _v4 = parts.b;
                                var part1 = _v4.a;
                                return $author$project$GrenPrintDefunctionalized$tuple_fn({ _: 0, ak: $author$project$GrenPrintDefunctionalized$patternNotParenthesized }, syntaxComments, { i: fullRange, P: part0, Q: part1 });
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var part0 = parts.a;
                                    var _v5 = parts.b;
                                    var part1 = _v5.a;
                                    var _v6 = _v5.b;
                                    var part2 = _v6.a;
                                    return $author$project$GrenPrintDefunctionalized$triple_fn({ _: 0, ak: $author$project$GrenPrintDefunctionalized$patternNotParenthesized }, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2 });
                                }
                                else {
                                    var part0 = parts.a;
                                    var _v8 = parts.b;
                                    var part1 = _v8.a;
                                    var _v9 = _v8.b;
                                    var part2 = _v9.a;
                                    var _v10 = _v9.b;
                                    var part3 = _v10.a;
                                    var part4Up = _v10.b;
                                    return $author$project$GrenPrintDefunctionalized$invalidNTuple_fn($author$project$GrenPrintDefunctionalized$patternNotParenthesized, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2, ch: part3, ci: part4Up });
                                }
                            }
                        }
                    }
                case 7:
                    var fields = syntaxPattern.a;
                    return $author$project$GrenPrintDefunctionalized$patternRecord_fn(syntaxComments, { aE: fields, i: fullRange });
                case 8:
                    var headPattern = syntaxPattern.a;
                    var tailPattern = syntaxPattern.b;
                    return $author$project$GrenPrintDefunctionalized$patternCons_fn(syntaxComments, { cz: headPattern, dF: tailPattern });
                case 9:
                    var elementPatterns = syntaxPattern.a;
                    return $author$project$GrenPrintDefunctionalized$patternList_fn(syntaxComments, { b3: elementPatterns, i: fullRange });
                case 11:
                    var syntaxQualifiedNameRef = syntaxPattern.a;
                    var argumentPatterns = syntaxPattern.b;
                    return $author$project$GrenPrintDefunctionalized$construct_fn({ _: 0, ck: $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated }, syntaxComments, {
                        W: argumentPatterns,
                        i: fullRange,
                        d: $author$project$GrenPrintDefunctionalized$qualifiedReference({ cl: syntaxQualifiedNameRef.ag, bR: syntaxQualifiedNameRef.q })
                    });
                default:
                    var aliasedPattern = syntaxPattern.a;
                    var aliasNameNode = syntaxPattern.b;
                    return $author$project$GrenPrintDefunctionalized$patternAs_fn(syntaxComments, { cr: aliasNameNode, cs: aliasedPattern });
            }
        }
    }, $author$project$GrenPrintDefunctionalized$patternNotParenthesized = F2($author$project$GrenPrintDefunctionalized$patternNotParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$patternParenthesized_fn = function (syntaxComments, patternNode) {
        return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$patternNotParenthesized, {
            i: $author$project$GrenSyntax$nodeRange(patternNode),
            ah: $author$project$GrenPrintDefunctionalized$patternToNotParenthesized(patternNode)
        }, syntaxComments);
    }, $author$project$GrenPrintDefunctionalized$patternParenthesized = F2($author$project$GrenPrintDefunctionalized$patternParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn = function (syntaxComments, syntaxPattern) {
        return $author$project$GrenPrintDefunctionalized$patternIsSpaceSeparated($author$project$GrenSyntax$nodeValue(syntaxPattern)) ? $author$project$GrenPrintDefunctionalized$patternParenthesized_fn(syntaxComments, syntaxPattern) : $author$project$GrenPrintDefunctionalized$patternNotParenthesized_fn(syntaxComments, syntaxPattern);
    }, $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated = F2($author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyEquals = $author$project$Print$exactly("=");
    var $author$project$GrenPrintDefunctionalized$printEqualsLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$printExactlyEquals);
    var $author$project$GrenPrintDefunctionalized$printExactlyBackSlash = $author$project$Print$exactly("\\");
    var $author$project$GrenPrintDefunctionalized$printExactlyCase = $author$project$Print$exactly("case");
    var $author$project$GrenPrintDefunctionalized$printExactlyElse = $author$project$Print$exactly("else");
    var $author$project$GrenPrintDefunctionalized$printExactlyIf = $author$project$Print$exactly("if");
    var $author$project$GrenPrintDefunctionalized$printExactlyLessThanVerticalBar = $author$project$Print$exactly("<|");
    var $author$project$GrenPrintDefunctionalized$printExactlyLet = $author$project$Print$exactly("let");
    var $author$project$GrenPrintDefunctionalized$printExactlyMinus = $author$project$Print$exactly("-");
    var $author$project$GrenPrintDefunctionalized$printExactlyOf = $author$project$Print$exactly("of");
    var $author$project$GrenPrintDefunctionalized$printExactlyThen = $author$project$Print$exactly("then");
    var $author$project$GrenPrintDefunctionalized$printExactlyZero = $author$project$Print$exactly("0");
    var $author$project$GrenPrintDefunctionalized$printExactlyZeroXZeroZero = $author$project$Print$exactly("0x00");
    var $author$project$GrenPrintDefunctionalized$printExactlyIn = $author$project$Print$exactly("in");
    var $author$project$GrenPrintDefunctionalized$printLinebreakIndentedInLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyIn, $author$project$Print$linebreakIndented));
    var $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$linebreak);
    var $elm$core$String$replace_fn = function (before, after, string) {
        return $elm$core$String$join_fn(after, $elm$core$String$split_fn(before, string));
    }, $elm$core$String$replace = F3($elm$core$String$replace_fn);
    var $author$project$GrenPrintDefunctionalized$case__fn = function (syntaxComments, _v92) {
        var casePattern = _v92.a;
        var caseResult = _v92.b;
        var patternPrint = $author$project$GrenPrintDefunctionalized$patternNotParenthesized_fn(syntaxComments, casePattern);
        var commentsBeforeExpression = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(caseResult).d,
            d: $author$project$GrenSyntax$nodeRange(casePattern).c
        }, syntaxComments);
        var caseResultPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, caseResult);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeExpression.b) {
                return caseResultPrint;
            }
            else {
                var comment0 = commentsBeforeExpression.a;
                var comment1Up = commentsBeforeExpression.b;
                return $author$project$Print$FollowedBy_fn(caseResultPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyMinusGreaterThan, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(patternPrint)), patternPrint)));
    }, $author$project$GrenPrintDefunctionalized$case_ = F2($author$project$GrenPrintDefunctionalized$case__fn);
    var $author$project$GrenPrintDefunctionalized$declarationExpressionImplementation_fn = function (syntaxComments, implementation) {
        var parameterPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (parameterPattern, soFar) {
            var parameterRange = $author$project$GrenSyntax$nodeRange(parameterPattern);
            var parameterPrint = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, parameterPattern);
            return {
                j: parameterRange.c,
                h: _List_Cons(function () {
                    var _v90 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: parameterRange.d, d: soFar.j }, syntaxComments);
                    if (!_v90.b) {
                        return parameterPrint;
                    }
                    else {
                        var comment0 = _v90.a;
                        var comment1Up = _v90.b;
                        var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(parameterPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v91) {
                            return $author$project$Print$lineSpread(parameterPrint);
                        }, commentsBefore.l)), commentsBefore.m));
                    }
                }(), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(implementation.q).c,
            h: _List_Nil
        }, implementation.W);
        var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrintsWithCommentsBefore.h);
        var expressionPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, implementation.I);
        var commentsBetweenParametersAndResult = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(implementation.I).d,
            d: parameterPrintsWithCommentsBefore.j
        }, syntaxComments);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn(function () {
            if (!commentsBetweenParametersAndResult.b) {
                return expressionPrint;
            }
            else {
                var comment0 = commentsBetweenParametersAndResult.a;
                var comment1Up = commentsBetweenParametersAndResult.b;
                return $author$project$Print$FollowedBy_fn(expressionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyEquals, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$Print$listReverseAndMapAndFlatten_fn(function (parameterPrintWithCommentsBefore) {
            return $author$project$Print$FollowedBy_fn(parameterPrintWithCommentsBefore, $author$project$Print$spaceOrLinebreakIndented(parametersLineSpread));
        }, parameterPrintsWithCommentsBefore.h))))), $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(implementation.q)));
    }, $author$project$GrenPrintDefunctionalized$declarationExpressionImplementation = F2($author$project$GrenPrintDefunctionalized$declarationExpressionImplementation_fn);
    var $author$project$GrenPrintDefunctionalized$expressionCall_fn = function (syntaxComments, syntaxCall) {
        var commentsBeforeArgument0 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxCall.bD).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxCall.bS).c
        }, syntaxComments);
        var collapsibleCommentsBeforeArgument0 = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeArgument0);
        var argument1UpPrintsWithCommentsBeforeReverse = $elm$core$List$foldl_fn_unwrapped(function (argument, soFar) {
            var print = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn(syntaxComments, argument);
            return {
                j: $author$project$GrenSyntax$nodeRange(argument).c,
                h: _List_Cons(function () {
                    var _v87 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: $author$project$GrenSyntax$nodeRange(argument).d,
                        d: soFar.j
                    }, syntaxComments);
                    if (!_v87.b) {
                        return print;
                    }
                    else {
                        var comment0 = _v87.a;
                        var comment1Up = _v87.b;
                        var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v88) {
                            return $author$project$Print$lineSpread(print);
                        }, commentsBefore.l)), commentsBefore.m));
                    }
                }(), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxCall.bD).c,
            h: _List_Nil
        }, syntaxCall.cP).h;
        var argument0Print = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn(syntaxComments, syntaxCall.bD);
        var appliedPrint = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn(syntaxComments, syntaxCall.bS);
        var argument0LineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v86) {
            return $author$project$Print$lineSpread(argument0Print);
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(collapsibleCommentsBeforeArgument0.l, $author$project$Print$lineSpreadMergeWith_fn(function (_v85) {
            return $author$project$GrenPrintDefunctionalized$lineSpreadBetweenNodes_fn(syntaxCall.bS, syntaxCall.bD);
        }, $author$project$Print$lineSpread(appliedPrint))));
        var argument1UpLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v84) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, argument1UpPrintsWithCommentsBeforeReverse);
        }, $author$project$Print$lineSpreadMergeWithStrict_fn(argument0LineSpread, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxCall.i)));
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndFlatten_fn(function (argumentPrintWithCommentsBefore) {
            return $author$project$Print$FollowedBy_fn(argumentPrintWithCommentsBefore, $author$project$Print$spaceOrLinebreakIndented(argument1UpLineSpread));
        }, argument1UpPrintsWithCommentsBeforeReverse), $author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeArgument0.b) {
                return argument0Print;
            }
            else {
                return $author$project$Print$FollowedBy_fn(argument0Print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v83) {
                    return $author$project$Print$lineSpread(argument0Print);
                }, collapsibleCommentsBeforeArgument0.l)), collapsibleCommentsBeforeArgument0.m));
            }
        }(), $author$project$Print$spaceOrLinebreakIndented(argument0LineSpread)))), appliedPrint);
    }, $author$project$GrenPrintDefunctionalized$expressionCall = F2($author$project$GrenPrintDefunctionalized$expressionCall_fn);
    var $author$project$GrenPrintDefunctionalized$expressionCaseOf_fn = function (syntaxComments, syntaxCaseOf) {
        var commentsBeforeCasedExpression = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxCaseOf.I).d,
            d: syntaxCaseOf.i.d
        }, syntaxComments);
        var casedExpressionPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxCaseOf.I);
        var casedExpressionLineSpread = function () {
            if (commentsBeforeCasedExpression.b) {
                return 1;
            }
            else {
                return $author$project$GrenPrintDefunctionalized$lineSpreadInNode(syntaxCaseOf.I);
            }
        }();
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndIntersperseAndFlatten_fn($author$project$GrenPrintDefunctionalized$printLinebreakLinebreakIndented, $elm$core$List$foldl_fn_unwrapped(function (_v79, soFar) {
            var casePattern = _v79.a;
            var caseResult = _v79.b;
            var commentsBeforeCasePattern = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                c: $author$project$GrenSyntax$nodeRange(casePattern).d,
                d: soFar.j
            }, syntaxComments);
            var casePrint = $author$project$GrenPrintDefunctionalized$case__fn(syntaxComments, _Utils_Tuple2(casePattern, caseResult));
            var commentsAndCasePrint = function () {
                if (!commentsBeforeCasePattern.b) {
                    return casePrint;
                }
                else {
                    var comment0 = commentsBeforeCasePattern.a;
                    var comment1Up = commentsBeforeCasePattern.b;
                    return $author$project$Print$FollowedBy_fn(casePrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
                }
            }();
            return {
                j: $author$project$GrenSyntax$nodeRange(caseResult).c,
                h: _List_Cons(commentsAndCasePrint, soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxCaseOf.I).c,
            h: _List_Nil
        }, syntaxCaseOf.bX).h), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyOf, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(casedExpressionLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeCasedExpression.b) {
                return casedExpressionPrint;
            }
            else {
                var comment0 = commentsBeforeCasedExpression.a;
                var comment1Up = commentsBeforeCasedExpression.b;
                return $author$project$Print$FollowedBy_fn(casedExpressionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$spaceOrLinebreakIndented(casedExpressionLineSpread))), $author$project$GrenPrintDefunctionalized$printExactlyCase))));
    }, $author$project$GrenPrintDefunctionalized$expressionCaseOf = F2($author$project$GrenPrintDefunctionalized$expressionCaseOf_fn);
    var $author$project$GrenPrintDefunctionalized$expressionIfThenElse_fn = function (syntaxComments, syntaxIfThenElse) {
        var onTruePrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxIfThenElse.bw);
        var onFalseNotParenthesized = $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(syntaxIfThenElse.ba);
        var conditionPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxIfThenElse.bm);
        var commentsBeforeOnTrue = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.bw).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.bm).c
        }, syntaxComments);
        var commentsBeforeOnFalseNotParenthesizedInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(onFalseNotParenthesized).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.ba).d
        }, syntaxComments);
        var commentsBeforeOnFalse = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.ba).d,
            d: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.bw).c
        }, syntaxComments);
        var commentsBeforeCondition = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxIfThenElse.bm).d,
            d: syntaxIfThenElse.i.d
        }, syntaxComments);
        var conditionLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v76) {
            if (commentsBeforeCondition.b) {
                return 1;
            }
            else {
                return 0;
            }
        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v75) {
            return $author$project$Print$lineSpread(conditionPrint);
        }, syntaxIfThenElse.b$));
        return $author$project$Print$FollowedBy_fn(function () {
            var _v70 = _Utils_Tuple2(commentsBeforeOnFalseNotParenthesizedInParens, onFalseNotParenthesized);
            if ((!_v70.a.b) && (_v70.b.b.$ === 4)) {
                var _v71 = _v70.b;
                var onFalseNotParenthesizedRange = _v71.a;
                var _v72 = _v71.b;
                var onFalseCondition = _v72.a;
                var onFalseOnTrue = _v72.b;
                var onFalseOnFalse = _v72.c;
                if (!commentsBeforeOnFalse.b) {
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$expressionIfThenElse_fn(syntaxComments, { bm: onFalseCondition, b$: 0, i: onFalseNotParenthesizedRange, ba: onFalseOnFalse, bw: onFalseOnTrue }), $author$project$GrenPrintDefunctionalized$printExactlySpace);
                }
                else {
                    var comment0 = commentsBeforeOnFalse.a;
                    var comment1Up = commentsBeforeOnFalse.b;
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$expressionIfThenElse_fn(syntaxComments, { bm: onFalseCondition, b$: 1, i: onFalseNotParenthesizedRange, ba: onFalseOnFalse, bw: onFalseOnTrue }), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented)));
                }
            }
            else {
                var onFalsePrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxIfThenElse.ba);
                return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
                    if (!commentsBeforeOnFalse.b) {
                        return onFalsePrint;
                    }
                    else {
                        var comment0 = commentsBeforeOnFalse.a;
                        var comment1Up = commentsBeforeOnFalse.b;
                        return $author$project$Print$FollowedBy_fn(onFalsePrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
                    }
                }(), $author$project$Print$linebreakIndented));
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyElse, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeOnTrue.b) {
                return onTruePrint;
            }
            else {
                var comment0 = commentsBeforeOnTrue.a;
                var comment1Up = commentsBeforeOnTrue.b;
                return $author$project$Print$FollowedBy_fn(onTruePrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$linebreakIndented))), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyThen, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(conditionLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeCondition.b) {
                return conditionPrint;
            }
            else {
                var comment0 = commentsBeforeCondition.a;
                var comment1Up = commentsBeforeCondition.b;
                return $author$project$Print$FollowedBy_fn(conditionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$spaceOrLinebreakIndented(conditionLineSpread))), $author$project$GrenPrintDefunctionalized$printExactlyIf)))))));
    }, $author$project$GrenPrintDefunctionalized$expressionIfThenElse = F2($author$project$GrenPrintDefunctionalized$expressionIfThenElse_fn);
    var $author$project$GrenPrintDefunctionalized$expressionLambda_fn = function (syntaxComments, _v62) {
        var fullRange = _v62.a;
        var syntaxLambda = _v62.b;
        var resultPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxLambda.I);
        var parameterPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (parameterPattern, soFar) {
            var print = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, parameterPattern);
            var parameterRange = $author$project$GrenSyntax$nodeRange(parameterPattern);
            return {
                j: parameterRange.c,
                h: _List_Cons(function () {
                    var _v66 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: parameterRange.d, d: soFar.j }, syntaxComments);
                    if (!_v66.b) {
                        return print;
                    }
                    else {
                        var comment0 = _v66.a;
                        var comment1Up = _v66.b;
                        var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v67) {
                            return $author$project$Print$lineSpread(print);
                        }, commentsBefore.l)), commentsBefore.m));
                    }
                }(), soFar.h)
            };
        }, { j: fullRange.d, h: _List_Nil }, syntaxLambda.dW);
        var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrintsWithCommentsBefore.h);
        var commentsBeforeResult = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxLambda.I).d,
            d: parameterPrintsWithCommentsBefore.j
        }, syntaxComments);
        return $author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(resultPrint, function () {
            if (!commentsBeforeResult.b) {
                return $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v65) {
                    return $author$project$Print$lineSpread(resultPrint);
                }, $author$project$Print$lineSpreadMergeWith_fn(function (_v64) {
                    return $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange);
                }, parametersLineSpread)));
            }
            else {
                var comment0 = commentsBeforeResult.a;
                var comment1Up = commentsBeforeResult.b;
                return $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented));
            }
        }())), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyMinusGreaterThan, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$Print$WithIndentIncreasedBy_fn(1, $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndIntersperseAndFlatten_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), parameterPrintsWithCommentsBefore.h), $author$project$Print$emptyOrLinebreakIndented(parametersLineSpread)))))), $author$project$GrenPrintDefunctionalized$printExactlyBackSlash);
    }, $author$project$GrenPrintDefunctionalized$expressionLambda = F2($author$project$GrenPrintDefunctionalized$expressionLambda_fn);
    var $author$project$GrenPrintDefunctionalized$expressionLetDeclaration_fn = function (syntaxComments, letDeclaration) {
        if (!letDeclaration.$) {
            var letDeclarationExpression = letDeclaration.a;
            var implementationPrint = $author$project$GrenPrintDefunctionalized$declarationExpressionImplementation_fn(syntaxComments, $author$project$GrenSyntax$nodeValue(letDeclarationExpression.R));
            var _v58 = letDeclarationExpression.V;
            if (_v58.$ === 1) {
                return implementationPrint;
            }
            else {
                var _v59 = _v58.a;
                var signatureRange = _v59.a;
                var signature = _v59.b;
                var commentsBetweenSignatureAndImplementationName = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(letDeclarationExpression.R).d,
                    d: signatureRange.c
                }, syntaxComments);
                return $author$project$Print$FollowedBy_fn(implementationPrint, $author$project$Print$FollowedBy_fn(function () {
                    if (!commentsBetweenSignatureAndImplementationName.b) {
                        return $author$project$Print$linebreakIndented;
                    }
                    else {
                        var comment0 = commentsBetweenSignatureAndImplementationName.a;
                        var comment1Up = commentsBetweenSignatureAndImplementationName.b;
                        return $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented));
                    }
                }(), $author$project$GrenPrintDefunctionalized$declarationSignature_fn(syntaxComments, signature)));
            }
        }
        else {
            var destructuringPattern = letDeclaration.a;
            var destructuredExpression = letDeclaration.b;
            var destructuringPatternPrint = $author$project$GrenPrintDefunctionalized$patternParenthesizedIfSpaceSeparated_fn(syntaxComments, destructuringPattern);
            var destructuredExpressionPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, destructuredExpression);
            var commentsBeforeDestructuredExpression = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                c: $author$project$GrenSyntax$nodeRange(destructuredExpression).d,
                d: $author$project$GrenSyntax$nodeRange(destructuringPattern).c
            }, syntaxComments);
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
                if (!commentsBeforeDestructuredExpression.b) {
                    return destructuredExpressionPrint;
                }
                else {
                    var comment0 = commentsBeforeDestructuredExpression.a;
                    var comment1Up = commentsBeforeDestructuredExpression.b;
                    return $author$project$Print$FollowedBy_fn(destructuredExpressionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
                }
            }(), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printEqualsLinebreakIndented, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(destructuringPatternPrint))))), destructuringPatternPrint);
        }
    }, $author$project$GrenPrintDefunctionalized$expressionLetDeclaration = F2($author$project$GrenPrintDefunctionalized$expressionLetDeclaration_fn);
    var $author$project$GrenPrintDefunctionalized$expressionLetIn_fn = function (syntaxComments, syntaxLetIn) {
        var letInResultPrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, syntaxLetIn.co);
        var letDeclarationPrints = $elm$core$List$foldl_fn_unwrapped(function (_v55, soFar) {
            var letDeclarationRange = _v55.a;
            var letDeclaration = _v55.b;
            var letDeclarationPrint = $author$project$GrenPrintDefunctionalized$expressionLetDeclaration_fn(syntaxComments, letDeclaration);
            var commentsBefore = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: letDeclarationRange.d, d: soFar.j }, syntaxComments);
            var letDeclarationWithCommentsBeforePrint = function () {
                if (!commentsBefore.b) {
                    return letDeclarationPrint;
                }
                else {
                    var comment0 = commentsBefore.a;
                    var comment1Up = commentsBefore.b;
                    return $author$project$Print$FollowedBy_fn(letDeclarationPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
                }
            }();
            return {
                j: letDeclarationRange.c,
                h: _List_Cons(letDeclarationWithCommentsBeforePrint, soFar.h)
            };
        }, { j: syntaxLetIn.i.d, h: _List_Nil }, _List_Cons(syntaxLetIn.df, syntaxLetIn.dg));
        var commentsBeforeResult = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(syntaxLetIn.co).d,
            d: letDeclarationPrints.j
        }, syntaxComments);
        return $author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeResult.b) {
                return letInResultPrint;
            }
            else {
                var comment0 = commentsBeforeResult.a;
                var comment1Up = commentsBeforeResult.b;
                return $author$project$Print$FollowedBy_fn(letInResultPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printLinebreakIndentedInLinebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndIntersperseAndFlatten_fn($author$project$GrenPrintDefunctionalized$printLinebreakLinebreakIndented, letDeclarationPrints.h), $author$project$Print$linebreakIndented)), $author$project$GrenPrintDefunctionalized$printExactlyLet)));
    }, $author$project$GrenPrintDefunctionalized$expressionLetIn = F2($author$project$GrenPrintDefunctionalized$expressionLetIn_fn);
    var $author$project$GrenPrintDefunctionalized$expressionList_fn = function (syntaxComments, syntaxList) {
        var _v45 = syntaxList.b3;
        if (!_v45.b) {
            return $author$project$Print$FollowedBy_fn(function () {
                var _v46 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(syntaxList.i, syntaxComments);
                if (!_v46.b) {
                    return $author$project$GrenPrintDefunctionalized$printExactlySquareClosing;
                }
                else {
                    var comment0 = _v46.a;
                    var comment1Up = _v46.b;
                    var commentsCollapsed = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlySquareClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(commentsCollapsed.l), $author$project$Print$WithIndentIncreasedBy_fn(1, commentsCollapsed.m)));
                }
            }(), $author$project$GrenPrintDefunctionalized$printExactlySquareOpening);
        }
        else {
            var element0 = _v45.a;
            var element1Up = _v45.b;
            var elementPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (elementNode, soFar) {
                var print = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, elementNode);
                var _v51 = elementNode;
                var elementRange = _v51.a;
                return {
                    j: elementRange.c,
                    h: _List_Cons(function () {
                        var _v52 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: elementRange.d, d: soFar.j }, syntaxComments);
                        if (!_v52.b) {
                            return print;
                        }
                        else {
                            var comment0 = _v52.a;
                            var comment1Up = _v52.b;
                            var commentsBefore = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                            return $author$project$Print$FollowedBy_fn(print, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v53) {
                                return $author$project$Print$lineSpread(print);
                            }, commentsBefore.l)), commentsBefore.m));
                        }
                    }(), soFar.h)
                };
            }, { j: syntaxList.i.d, h: _List_Nil }, _List_Cons(element0, element1Up));
            var commentsAfterElements = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxList.i.c, d: elementPrintsWithCommentsBefore.j }, syntaxComments);
            var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v49) {
                if (!commentsAfterElements.b) {
                    return 0;
                }
                else {
                    return 1;
                }
            }, $author$project$Print$lineSpreadMergeWith_fn(function (_v48) {
                return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, elementPrintsWithCommentsBefore.h);
            }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxList.i)));
            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlySquareClosing, $author$project$Print$FollowedBy_fn(function () {
                if (!commentsAfterElements.b) {
                    return $author$project$Print$spaceOrLinebreakIndented(lineSpread);
                }
                else {
                    var comment0 = commentsAfterElements.a;
                    var comment1Up = commentsAfterElements.b;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$linebreak)));
                }
            }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndMapAndIntersperseAndFlatten_fn(function (elementPrintWithCommentsBefore) {
                return $author$project$Print$WithIndentIncreasedBy_fn(2, elementPrintWithCommentsBefore);
            }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), elementPrintsWithCommentsBefore.h), $author$project$GrenPrintDefunctionalized$printExactlySquareOpeningSpace)));
        }
    }, $author$project$GrenPrintDefunctionalized$expressionList = F2($author$project$GrenPrintDefunctionalized$expressionList_fn);
    var $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn = function (syntaxComments, _v30) {
        expressionNotParenthesized: while (true) {
            var fullRange = _v30.a;
            var syntaxExpression = _v30.b;
            switch (syntaxExpression.$) {
                case 0:
                    return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                case 1:
                    var application = syntaxExpression.a;
                    if (!application.b) {
                        return $author$project$Print$empty;
                    }
                    else {
                        if (!application.b.b) {
                            var notAppliedAfterAll = application.a;
                            var $temp$syntaxComments = syntaxComments, $temp$_v30 = notAppliedAfterAll;
                            syntaxComments = $temp$syntaxComments;
                            _v30 = $temp$_v30;
                            continue expressionNotParenthesized;
                        }
                        else {
                            var applied = application.a;
                            var _v33 = application.b;
                            var argument0 = _v33.a;
                            var argument1Up = _v33.b;
                            return $author$project$GrenPrintDefunctionalized$expressionCall_fn(syntaxComments, { bS: applied, bD: argument0, cP: argument1Up, i: fullRange });
                        }
                    }
                case 2:
                    var operator = syntaxExpression.a;
                    var left = syntaxExpression.b;
                    var right = syntaxExpression.c;
                    return $author$project$GrenPrintDefunctionalized$expressionOperation_fn(syntaxComments, { i: fullRange, de: left, eA: operator, dv: right });
                case 3:
                    var qualification = syntaxExpression.a;
                    var unqualified = syntaxExpression.b;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$qualifiedReference({ cl: qualification, bR: unqualified }));
                case 4:
                    var condition = syntaxExpression.a;
                    var onTrue = syntaxExpression.b;
                    var onFalse = syntaxExpression.c;
                    return $author$project$GrenPrintDefunctionalized$expressionIfThenElse_fn(syntaxComments, { bm: condition, b$: 0, i: fullRange, ba: onFalse, bw: onTrue });
                case 5:
                    var operatorSymbol = syntaxExpression.a;
                    return $author$project$Print$exactly("(" + (operatorSymbol + ")"));
                case 6:
                    var operatorSymbol = syntaxExpression.a;
                    return $author$project$Print$exactly(operatorSymbol);
                case 7:
                    var _int = syntaxExpression.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$intLiteral(_int));
                case 8:
                    var _int = syntaxExpression.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$hexLiteral(_int));
                case 9:
                    var _float = syntaxExpression.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$floatLiteral(_float));
                case 10:
                    var negated = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$printExpressionNegation_fn(syntaxComments, negated);
                case 11:
                    var string = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$stringLiteral($author$project$GrenSyntax$Node_fn(fullRange, string));
                case 12:
                    var _char = syntaxExpression.a;
                    return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$charLiteral(_char));
                case 13:
                    var parts = syntaxExpression.a;
                    if (!parts.b) {
                        return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
                    }
                    else {
                        if (!parts.b.b) {
                            var inParens = parts.a;
                            var commentsBeforeInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: $author$project$GrenSyntax$nodeRange(inParens).d,
                                d: fullRange.d
                            }, syntaxComments);
                            var commentsAfterInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                                c: fullRange.c,
                                d: $author$project$GrenSyntax$nodeRange(inParens).c
                            }, syntaxComments);
                            var _v35 = _Utils_Tuple2(commentsBeforeInParens, commentsAfterInParens);
                            if ((!_v35.a.b) && (!_v35.b.b)) {
                                var $temp$syntaxComments = syntaxComments, $temp$_v30 = inParens;
                                syntaxComments = $temp$syntaxComments;
                                _v30 = $temp$_v30;
                                continue expressionNotParenthesized;
                            }
                            else {
                                return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$expressionNotParenthesized, {
                                    i: fullRange,
                                    ah: $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(inParens)
                                }, syntaxComments);
                            }
                        }
                        else {
                            if (!parts.b.b.b) {
                                var part0 = parts.a;
                                var _v36 = parts.b;
                                var part1 = _v36.a;
                                return $author$project$GrenPrintDefunctionalized$tuple_fn({
                                    _: $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange),
                                    ak: $author$project$GrenPrintDefunctionalized$expressionNotParenthesized
                                }, syntaxComments, { i: fullRange, P: part0, Q: part1 });
                            }
                            else {
                                if (!parts.b.b.b.b) {
                                    var part0 = parts.a;
                                    var _v37 = parts.b;
                                    var part1 = _v37.a;
                                    var _v38 = _v37.b;
                                    var part2 = _v38.a;
                                    return $author$project$GrenPrintDefunctionalized$triple_fn({
                                        _: $author$project$GrenPrintDefunctionalized$lineSpreadInRange(fullRange),
                                        ak: $author$project$GrenPrintDefunctionalized$expressionNotParenthesized
                                    }, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2 });
                                }
                                else {
                                    var part0 = parts.a;
                                    var _v39 = parts.b;
                                    var part1 = _v39.a;
                                    var _v40 = _v39.b;
                                    var part2 = _v40.a;
                                    var _v41 = _v40.b;
                                    var part3 = _v41.a;
                                    var part4Up = _v41.b;
                                    return $author$project$GrenPrintDefunctionalized$invalidNTuple_fn($author$project$GrenPrintDefunctionalized$expressionNotParenthesized, syntaxComments, { i: fullRange, P: part0, Q: part1, av: part2, ch: part3, ci: part4Up });
                                }
                            }
                        }
                    }
                case 14:
                    var inParens = syntaxExpression.a;
                    var commentsBeforeInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: $author$project$GrenSyntax$nodeRange(inParens).d,
                        d: fullRange.d
                    }, syntaxComments);
                    var commentsAfterInParens = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: fullRange.c,
                        d: $author$project$GrenSyntax$nodeRange(inParens).c
                    }, syntaxComments);
                    var _v42 = _Utils_Tuple2(commentsBeforeInParens, commentsAfterInParens);
                    if ((!_v42.a.b) && (!_v42.b.b)) {
                        var $temp$syntaxComments = syntaxComments, $temp$_v30 = inParens;
                        syntaxComments = $temp$syntaxComments;
                        _v30 = $temp$_v30;
                        continue expressionNotParenthesized;
                    }
                    else {
                        return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$expressionNotParenthesized, {
                            i: fullRange,
                            ah: $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(inParens)
                        }, syntaxComments);
                    }
                case 15:
                    var syntaxLetIn = syntaxExpression.a;
                    var _v43 = syntaxLetIn.b1;
                    if (!_v43.b) {
                        var $temp$syntaxComments = syntaxComments, $temp$_v30 = syntaxLetIn.I;
                        syntaxComments = $temp$syntaxComments;
                        _v30 = $temp$_v30;
                        continue expressionNotParenthesized;
                    }
                    else {
                        var letDeclaration0 = _v43.a;
                        var letDeclaration1Up = _v43.b;
                        return $author$project$GrenPrintDefunctionalized$expressionLetIn_fn(syntaxComments, { i: fullRange, df: letDeclaration0, dg: letDeclaration1Up, co: syntaxLetIn.I });
                    }
                case 16:
                    var syntaxCaseOf = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$expressionCaseOf_fn(syntaxComments, { bX: syntaxCaseOf.bX, I: syntaxCaseOf.I, i: fullRange });
                case 17:
                    var syntaxLambda = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$expressionLambda_fn(syntaxComments, $author$project$GrenSyntax$Node_fn(fullRange, syntaxLambda));
                case 18:
                    var fields = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$recordLiteral_fn({ cB: "=", cE: $author$project$GrenPrintDefunctionalized$expressionNotParenthesized }, syntaxComments, { aE: fields, i: fullRange });
                case 19:
                    var elements = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$expressionList_fn(syntaxComments, { b3: elements, i: fullRange });
                case 20:
                    var syntaxRecord = syntaxExpression.a;
                    var _v44 = syntaxExpression.b;
                    var accessedFieldName = _v44.b;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$exactly("." + accessedFieldName), $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn(syntaxComments, syntaxRecord));
                case 21:
                    var dotFieldName = syntaxExpression.a;
                    return $author$project$Print$exactly("." + $elm$core$String$replace_fn(".", "", dotFieldName));
                case 22:
                    var recordVariableNode = syntaxExpression.a;
                    var fields = syntaxExpression.b;
                    return $author$project$GrenPrintDefunctionalized$expressionRecordUpdate_fn(syntaxComments, { aE: fields, i: fullRange, a0: recordVariableNode });
                default:
                    var glsl = syntaxExpression.a;
                    return $author$project$GrenPrintDefunctionalized$expressionGlsl(glsl);
            }
        }
    }, $author$project$GrenPrintDefunctionalized$expressionNotParenthesized = F2($author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$expressionOperation_fn = function (syntaxComments, syntaxOperation) {
        var operationExpanded = $author$project$GrenPrintDefunctionalized$expressionOperationExpand_fn(syntaxOperation.de, syntaxOperation.eA, syntaxOperation.dv);
        var leftestPrint = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication_fn(syntaxComments, operationExpanded.bq);
        var beforeRightestPrintsAndComments = $elm$core$List$foldl_fn_unwrapped(function (operatorAndExpressionBeforeRightest, soFar) {
            var expressionRange = $author$project$GrenSyntax$nodeRange(operatorAndExpressionBeforeRightest.I);
            var commentsBefore = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: expressionRange.d, d: soFar.j }, syntaxComments);
            return {
                j: expressionRange.c,
                h: _List_Cons({
                    I: operatorAndExpressionBeforeRightest.I,
                    bs: function () {
                        if (!commentsBefore.b) {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var comment0 = commentsBefore.a;
                            var comment1Up = commentsBefore.b;
                            return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
                        }
                    }(),
                    eA: operatorAndExpressionBeforeRightest.eA
                }, soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(operationExpanded.bq).c,
            h: _List_Nil
        }, operationExpanded.aD);
        var commentsBeforeRightestExpression = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
            c: $author$project$GrenSyntax$nodeRange(operationExpanded.am).d,
            d: beforeRightestPrintsAndComments.j
        }, syntaxComments);
        var commentsCollapsibleBeforeRightestExpression = $author$project$GrenPrintDefunctionalized$collapsibleComments(commentsBeforeRightestExpression);
        var lineSpread = $author$project$Print$lineSpreadMergeWithStrict_fn(commentsCollapsibleBeforeRightestExpression.l, $author$project$Print$lineSpreadMergeWith_fn(function (_v28) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn(function (c) {
                return $author$project$GrenPrintDefunctionalized$maybeLineSpread_fn(function ($) {
                    return $.l;
                }, c.bs);
            }, beforeRightestPrintsAndComments.h);
        }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxOperation.i)));
        var beforeRightestOperatorExpressionChainWithPreviousLineSpread = $elm$core$List$foldr_fn(F2(function (operatorExpression, soFar) {
            var expressionPrint = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication_fn(syntaxComments, operatorExpression.I);
            return {
                by: $author$project$Print$lineSpread(expressionPrint),
                cp: _List_Cons({ I: operatorExpression.I, a6: expressionPrint, bs: operatorExpression.bs, eA: operatorExpression.eA, by: soFar.by }, soFar.cp)
            };
        }), {
            by: $author$project$Print$lineSpread(leftestPrint),
            cp: _List_Nil
        }, beforeRightestPrintsAndComments.h);
        var rightestOperatorExpressionPrint = function () {
            var _v23 = operationExpanded.aK;
            if (_v23 === "<|") {
                var expressionPrint = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda_fn(syntaxComments, operationExpanded.am);
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
                    if (!commentsBeforeRightestExpression.b) {
                        return expressionPrint;
                    }
                    else {
                        return $author$project$Print$FollowedBy_fn(expressionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v25) {
                            return $author$project$Print$lineSpread(expressionPrint);
                        }, commentsCollapsibleBeforeRightestExpression.l)), commentsCollapsibleBeforeRightestExpression.m));
                    }
                }(), $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyLessThanVerticalBar, $author$project$Print$spaceOrLinebreakIndented(beforeRightestOperatorExpressionChainWithPreviousLineSpread.by)));
            }
            else {
                var nonApLOperator = _v23;
                var expressionPrint = $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication_fn(syntaxComments, operationExpanded.am);
                return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn($elm$core$String$length(nonApLOperator) + 1, function () {
                    if (!commentsBeforeRightestExpression.b) {
                        return expressionPrint;
                    }
                    else {
                        return $author$project$Print$FollowedBy_fn(expressionPrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v27) {
                            return $author$project$Print$lineSpread(expressionPrint);
                        }, commentsCollapsibleBeforeRightestExpression.l)), commentsCollapsibleBeforeRightestExpression.m));
                    }
                }()), $author$project$Print$FollowedBy_fn($author$project$Print$exactly(nonApLOperator + " "), $author$project$Print$spaceOrLinebreakIndented(lineSpread))));
            }
        }();
        return $author$project$Print$FollowedBy_fn($elm$core$List$foldl_fn_unwrapped(function (operatorExpression, chainRightPrint) {
            var _v18 = operatorExpression.eA;
            if (_v18 === "<|") {
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(chainRightPrint, $author$project$Print$FollowedBy_fn(function () {
                    var _v19 = operatorExpression.bs;
                    if (_v19.$ === 1) {
                        return operatorExpression.a6;
                    }
                    else {
                        var commentsBeforeExpression = _v19.a;
                        return $author$project$Print$FollowedBy_fn(operatorExpression.a6, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v20) {
                            return $author$project$Print$lineSpread(operatorExpression.a6);
                        }, commentsBeforeExpression.l)), commentsBeforeExpression.m));
                    }
                }(), $author$project$Print$spaceOrLinebreakIndented(lineSpread)))), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyLessThanVerticalBar, $author$project$Print$spaceOrLinebreakIndented(operatorExpression.by)));
            }
            else {
                var nonApLOperator = _v18;
                return $author$project$Print$FollowedBy_fn(chainRightPrint, $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn($elm$core$String$length(nonApLOperator) + 1, function () {
                    var _v21 = operatorExpression.bs;
                    if (_v21.$ === 1) {
                        return operatorExpression.a6;
                    }
                    else {
                        var commentsBeforeExpression = _v21.a;
                        return $author$project$Print$FollowedBy_fn(operatorExpression.a6, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v22) {
                            return $author$project$Print$lineSpread(operatorExpression.a6);
                        }, commentsBeforeExpression.l)), commentsBeforeExpression.m));
                    }
                }()), $author$project$Print$FollowedBy_fn($author$project$Print$exactly(nonApLOperator + " "), $author$project$Print$spaceOrLinebreakIndented(lineSpread)))));
            }
        }, rightestOperatorExpressionPrint, beforeRightestOperatorExpressionChainWithPreviousLineSpread.cp), leftestPrint);
    }, $author$project$GrenPrintDefunctionalized$expressionOperation = F2($author$project$GrenPrintDefunctionalized$expressionOperation_fn);
    var $author$project$GrenPrintDefunctionalized$expressionParenthesized_fn = function (syntaxComments, expressionNode) {
        return $author$project$GrenPrintDefunctionalized$parenthesized_fn($author$project$GrenPrintDefunctionalized$expressionNotParenthesized, {
            i: $author$project$GrenSyntax$nodeRange(expressionNode),
            ah: $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(expressionNode)
        }, syntaxComments);
    }, $author$project$GrenPrintDefunctionalized$expressionParenthesized = F2($author$project$GrenPrintDefunctionalized$expressionParenthesized_fn);
    var $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn = function (syntaxComments, expressionNode) {
        return $author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparated($author$project$GrenSyntax$nodeValue(expressionNode)) ? $author$project$GrenPrintDefunctionalized$expressionParenthesized_fn(syntaxComments, expressionNode) : $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, expressionNode);
    }, $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated = F2($author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn);
    var $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication_fn = function (syntaxComments, expressionNode) {
        return $author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparatedExceptApplication(expressionNode) ? $author$project$GrenPrintDefunctionalized$expressionParenthesized_fn(syntaxComments, expressionNode) : $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, expressionNode);
    }, $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication = F2($author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplication_fn);
    var $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda_fn = function (syntaxComments, expressionNode) {
        if ($author$project$GrenPrintDefunctionalized$expressionIsSpaceSeparated($author$project$GrenSyntax$nodeValue(expressionNode))) {
            var _v17 = $author$project$GrenSyntax$nodeValue($author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(expressionNode));
            switch (_v17.$) {
                case 1:
                    return $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, expressionNode);
                case 17:
                    return $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, expressionNode);
                default:
                    return $author$project$GrenPrintDefunctionalized$expressionParenthesized_fn(syntaxComments, expressionNode);
            }
        }
        else {
            return $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, expressionNode);
        }
    }, $author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda = F2($author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda_fn);
    var $author$project$GrenPrintDefunctionalized$expressionRecordUpdate_fn = function (syntaxComments, syntaxRecordUpdate) {
        var recordVariablePrint = $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(syntaxRecordUpdate.a0));
        var maybeCommentsBeforeRecordVariable = function () {
            var _v16 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                c: $author$project$GrenSyntax$nodeRange(syntaxRecordUpdate.a0).d,
                d: syntaxRecordUpdate.i.d
            }, syntaxComments);
            if (!_v16.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var comment0 = _v16.a;
                var comment1Up = _v16.b;
                return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up)));
            }
        }();
        var fieldPrintsWithCommentsBefore = $elm$core$List$foldl_fn_unwrapped(function (_v7, soFar) {
            var fieldSyntax = _v7.b;
            var _v8 = fieldSyntax;
            var _v9 = _v8.a;
            var fieldNameRange = _v9.a;
            var fieldName = _v9.b;
            var fieldValueNode = _v8.b;
            var _v10 = fieldValueNode;
            var fieldValueRange = _v10.a;
            var valuePrint = $author$project$GrenPrintDefunctionalized$expressionNotParenthesized_fn(syntaxComments, fieldValueNode);
            return {
                j: fieldValueRange.c,
                h: _List_Cons($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(valuePrint, function () {
                    var _v12 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldValueRange.d, d: fieldNameRange.d }, syntaxComments);
                    if (!_v12.b) {
                        return $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v13) {
                            return $author$project$Print$lineSpread(valuePrint);
                        }, $author$project$GrenPrintDefunctionalized$lineSpreadBetweenRanges_fn(fieldNameRange, $author$project$GrenSyntax$nodeRange(fieldValueNode))));
                    }
                    else {
                        var comment0 = _v12.a;
                        var comment1Up = _v12.b;
                        var commentsBeforeValue = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        var layout = $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpreadMergeWith_fn(function (_v15) {
                            return $author$project$Print$lineSpread(valuePrint);
                        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v14) {
                            return $author$project$GrenPrintDefunctionalized$lineSpreadBetweenRanges_fn(fieldNameRange, $author$project$GrenSyntax$nodeRange(fieldValueNode));
                        }, commentsBeforeValue.l)));
                        return $author$project$Print$FollowedBy_fn(layout, $author$project$Print$FollowedBy_fn(commentsBeforeValue.m, layout));
                    }
                }())), $author$project$Print$WithIndentIncreasedBy_fn(2, function () {
                    var _v11 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: fieldNameRange.d, d: soFar.j }, syntaxComments);
                    if (!_v11.b) {
                        return $author$project$Print$exactly(fieldName + " =");
                    }
                    else {
                        var comment0 = _v11.a;
                        var comment1Up = _v11.b;
                        var commentsBeforeName = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn($author$project$Print$exactly(fieldName + " ="), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsBeforeName.l), commentsBeforeName.m));
                    }
                }())), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxRecordUpdate.a0).c,
            h: _List_Nil
        }, syntaxRecordUpdate.aE);
        var commentsAfterFields = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: syntaxRecordUpdate.i.c, d: fieldPrintsWithCommentsBefore.j }, syntaxComments);
        var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v6) {
            return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, fieldPrintsWithCommentsBefore.h);
        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v4) {
            if (!commentsAfterFields.b) {
                return 0;
            }
            else {
                return 1;
            }
        }, $author$project$Print$lineSpreadMergeWith_fn(function (_v3) {
            return $author$project$GrenPrintDefunctionalized$maybeLineSpread_fn(function ($) {
                return $.l;
            }, maybeCommentsBeforeRecordVariable);
        }, $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxRecordUpdate.i))));
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(function () {
            if (!commentsAfterFields.b) {
                return $author$project$Print$empty;
            }
            else {
                var comment0 = commentsAfterFields.a;
                var comment1Up = commentsAfterFields.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$linebreak));
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$Print$listReverseAndIntersperseAndFlatten_fn($author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), fieldPrintsWithCommentsBefore.h), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyVerticalBarSpace, $author$project$Print$spaceOrLinebreakIndented(lineSpread))))), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, function () {
            if (maybeCommentsBeforeRecordVariable.$ === 1) {
                return recordVariablePrint;
            }
            else {
                var commentsCollapsibleBeforeRecordVariable = maybeCommentsBeforeRecordVariable.a;
                return $author$project$Print$FollowedBy_fn(recordVariablePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsCollapsibleBeforeRecordVariable.l), commentsCollapsibleBeforeRecordVariable.m));
            }
        }()), $author$project$GrenPrintDefunctionalized$printExactlyCurlyOpeningSpace))));
    }, $author$project$GrenPrintDefunctionalized$expressionRecordUpdate = F2($author$project$GrenPrintDefunctionalized$expressionRecordUpdate_fn);
    var $author$project$GrenPrintDefunctionalized$printExpressionNegation_fn = function (syntaxComments, negated) {
        if ($author$project$GrenPrintDefunctionalized$expressionIsBase10Zero(negated)) {
            return $author$project$GrenPrintDefunctionalized$printExactlyZero;
        }
        else {
            if ($author$project$GrenPrintDefunctionalized$expressionIsBase16Zero(negated)) {
                return $author$project$GrenPrintDefunctionalized$printExactlyZeroXZeroZero;
            }
            else {
                var _v0 = $author$project$GrenPrintDefunctionalized$expressionToNotParenthesized(negated);
                if (_v0.b.$ === 10) {
                    var doublyNegatedRange = _v0.a;
                    var doublyNegated = _v0.b.a;
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$expressionParenthesized_fn(syntaxComments, $author$project$GrenSyntax$Node_fn(doublyNegatedRange, $author$project$GrenSyntax$Negation(doublyNegated))), $author$project$GrenPrintDefunctionalized$printExactlyMinus);
                }
                else {
                    var negatedNotNegationOrIntegerZero = _v0;
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$expressionParenthesizedIfSpaceSeparated_fn(syntaxComments, negatedNotNegationOrIntegerZero), $author$project$GrenPrintDefunctionalized$printExactlyMinus);
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$printExpressionNegation = F2($author$project$GrenPrintDefunctionalized$printExpressionNegation_fn);
    var $author$project$GrenPrintDefunctionalized$declarationExpression_fn = function (syntaxComments, syntaxExpressionDeclaration) {
        var implementationPrint = $author$project$GrenPrintDefunctionalized$declarationExpressionImplementation_fn(syntaxComments, $author$project$GrenSyntax$nodeValue(syntaxExpressionDeclaration.R));
        var withoutDocumentationPrint = function () {
            var _v4 = syntaxExpressionDeclaration.V;
            if (_v4.$ === 1) {
                return implementationPrint;
            }
            else {
                var _v5 = _v4.a;
                var signatureRange = _v5.a;
                var signature = _v5.b;
                var commentsBetweenSignatureAndImplementationName = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(syntaxExpressionDeclaration.R).d,
                    d: signatureRange.c
                }, syntaxComments);
                return $author$project$Print$FollowedBy_fn(function () {
                    if (!commentsBetweenSignatureAndImplementationName.b) {
                        return implementationPrint;
                    }
                    else {
                        var comment0 = commentsBetweenSignatureAndImplementationName.a;
                        var comment1Up = commentsBetweenSignatureAndImplementationName.b;
                        return $author$project$Print$FollowedBy_fn(implementationPrint, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printLinebreakLinebreak, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(comment0, comment1Up)), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak)));
                    }
                }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$GrenPrintDefunctionalized$declarationSignature_fn(syntaxComments, signature)));
            }
        }();
        var _v0 = syntaxExpressionDeclaration.Z;
        if (_v0.$ === 1) {
            return withoutDocumentationPrint;
        }
        else {
            var _v1 = _v0.a;
            var documentationRange = _v1.a;
            var documentation = _v1.b;
            return $author$project$Print$FollowedBy_fn(withoutDocumentationPrint, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$commentsBetweenDocumentationAndDeclaration($author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                c: function () {
                    var _v2 = syntaxExpressionDeclaration.V;
                    if (_v2.$ === 1) {
                        return $author$project$GrenSyntax$nodeRange(syntaxExpressionDeclaration.R).d;
                    }
                    else {
                        var _v3 = _v2.a;
                        var signatureRange = _v3.a;
                        return signatureRange.d;
                    }
                }(),
                d: documentationRange.d
            }, syntaxComments)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$exactly(documentation))));
        }
    }, $author$project$GrenPrintDefunctionalized$declarationExpression = F2($author$project$GrenPrintDefunctionalized$declarationExpression_fn);
    var $author$project$GrenPrintDefunctionalized$infixDirection = function (syntaxInfixDirection) {
        switch (syntaxInfixDirection) {
            case 0:
                return "left ";
            case 1:
                return "right";
            default:
                return "non  ";
        }
    };
    var $author$project$GrenPrintDefunctionalized$declarationInfix = function (syntaxInfixDeclaration) {
        return $author$project$Print$exactly("infix " + ($author$project$GrenPrintDefunctionalized$infixDirection($author$project$GrenSyntax$nodeValue(syntaxInfixDeclaration.bo)) + (" " + ($elm$core$String$fromInt($author$project$GrenSyntax$nodeValue(syntaxInfixDeclaration.eC)) + (" (" + ($author$project$GrenSyntax$nodeValue(syntaxInfixDeclaration.eA) + (") = " + $author$project$GrenSyntax$nodeValue(syntaxInfixDeclaration.d8))))))));
    };
    var $author$project$GrenPrintDefunctionalized$printExactlyPortSpace = $author$project$Print$exactly("port ");
    var $author$project$GrenPrintDefunctionalized$declarationPort_fn = function (syntaxComments, signature) {
        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationSignature_fn(syntaxComments.b, signature), function () {
            var _v0 = syntaxComments.cx;
            if (_v0.$ === 1) {
                return $author$project$GrenPrintDefunctionalized$printExactlyPortSpace;
            }
            else {
                var _v1 = _v0.a;
                var documentationRange = _v1.a;
                var documentation = _v1.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyPortSpace, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$commentsBetweenDocumentationAndDeclaration($author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(signature.q).d,
                    d: documentationRange.d
                }, syntaxComments.b)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$exactly(documentation))));
            }
        }());
    }, $author$project$GrenPrintDefunctionalized$declarationPort = F2($author$project$GrenPrintDefunctionalized$declarationPort_fn);
    var $author$project$GrenPrintDefunctionalized$listFilledLast_fn = function (head, tail) {
        listFilledLast: while (true) {
            if (!tail.b) {
                return head;
            }
            else {
                var tailHead = tail.a;
                var tailTail = tail.b;
                var $temp$head = tailHead, $temp$tail = tailTail;
                head = $temp$head;
                tail = $temp$tail;
                continue listFilledLast;
            }
        }
    }, $author$project$GrenPrintDefunctionalized$listFilledLast = F2($author$project$GrenPrintDefunctionalized$listFilledLast_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyTypeSpaceAlias = $author$project$Print$exactly("type alias");
    var $author$project$GrenPrintDefunctionalized$declarationTypeAlias_fn = function (syntaxComments, syntaxTypeAliasDeclaration) {
        var rangeBetweenParametersAndType = function () {
            var _v4 = syntaxTypeAliasDeclaration.ca;
            if (!_v4.b) {
                return {
                    c: $author$project$GrenSyntax$nodeRange(syntaxTypeAliasDeclaration.D).d,
                    d: $author$project$GrenSyntax$nodeRange(syntaxTypeAliasDeclaration.q).c
                };
            }
            else {
                var parameter0 = _v4.a;
                var parameter1Up = _v4.b;
                return {
                    c: $author$project$GrenSyntax$nodeRange(syntaxTypeAliasDeclaration.D).d,
                    d: $author$project$GrenSyntax$nodeRange($author$project$GrenPrintDefunctionalized$listFilledLast_fn(parameter0, parameter1Up)).c
                };
            }
        }();
        var parameterPrintsWithCommentsBeforeReverse = $elm$core$List$foldl_fn_unwrapped(function (parameterName, soFar) {
            var parameterPrintedRange = $author$project$GrenSyntax$nodeRange(parameterName);
            var parameterNamePrint = $author$project$Print$exactly($author$project$GrenSyntax$nodeValue(parameterName));
            return {
                j: parameterPrintedRange.c,
                h: _List_Cons(function () {
                    var _v3 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: parameterPrintedRange.d, d: soFar.j }, syntaxComments);
                    if (!_v3.b) {
                        return parameterNamePrint;
                    }
                    else {
                        var comment0 = _v3.a;
                        var comment1Up = _v3.b;
                        var commentsCollapsible = $author$project$GrenPrintDefunctionalized$collapsibleComments(_List_Cons(comment0, comment1Up));
                        return $author$project$Print$FollowedBy_fn(parameterNamePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(commentsCollapsible.l), commentsCollapsible.m));
                    }
                }(), soFar.h)
            };
        }, {
            j: $author$project$GrenSyntax$nodeRange(syntaxTypeAliasDeclaration.q).c,
            h: _List_Nil
        }, syntaxTypeAliasDeclaration.ca).h;
        var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrintsWithCommentsBeforeReverse);
        var aliasedTypePrint = $author$project$GrenPrintDefunctionalized$typeNotParenthesized_fn(syntaxComments, syntaxTypeAliasDeclaration.D);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn(function () {
            var _v2 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(rangeBetweenParametersAndType, syntaxComments);
            if (!_v2.b) {
                return aliasedTypePrint;
            }
            else {
                var comment0 = _v2.a;
                var comment1Up = _v2.b;
                return $author$project$Print$FollowedBy_fn(aliasedTypePrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyEquals, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$listReverseAndMapAndFlatten_fn(function (parameterPrint) {
            return $author$project$Print$FollowedBy_fn(parameterPrint, $author$project$Print$spaceOrLinebreakIndented(parametersLineSpread));
        }, parameterPrintsWithCommentsBeforeReverse)), $author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenSyntax$nodeValue(syntaxTypeAliasDeclaration.q)), $author$project$Print$spaceOrLinebreakIndented(parametersLineSpread))))))), function () {
            var _v0 = syntaxTypeAliasDeclaration.Z;
            if (_v0.$ === 1) {
                return $author$project$GrenPrintDefunctionalized$printExactlyTypeSpaceAlias;
            }
            else {
                var _v1 = _v0.a;
                var documentationRange = _v1.a;
                var documentation = _v1.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyTypeSpaceAlias, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$commentsBetweenDocumentationAndDeclaration($author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                    c: $author$project$GrenSyntax$nodeRange(syntaxTypeAliasDeclaration.q).d,
                    d: documentationRange.d
                }, syntaxComments)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$exactly(documentation))));
            }
        }());
    }, $author$project$GrenPrintDefunctionalized$declarationTypeAlias = F2($author$project$GrenPrintDefunctionalized$declarationTypeAlias_fn);
    var $author$project$GrenPrintDefunctionalized$declaration_fn = function (syntaxComments, syntaxDeclaration) {
        switch (syntaxDeclaration.$) {
            case 0:
                var syntaxExpressionDeclaration = syntaxDeclaration.a;
                return $author$project$GrenPrintDefunctionalized$declarationExpression_fn(syntaxComments.b, syntaxExpressionDeclaration);
            case 1:
                var syntaxTypeAliasDeclaration = syntaxDeclaration.a;
                return $author$project$GrenPrintDefunctionalized$declarationTypeAlias_fn(syntaxComments.b, syntaxTypeAliasDeclaration);
            case 2:
                var syntaxChoiceTypeDeclaration = syntaxDeclaration.a;
                return $author$project$GrenPrintDefunctionalized$declarationChoiceType_fn(syntaxComments.b, syntaxChoiceTypeDeclaration);
            case 3:
                var signature = syntaxDeclaration.a;
                return $author$project$GrenPrintDefunctionalized$declarationPort_fn({ b: syntaxComments.b, cx: syntaxComments.bM }, signature);
            default:
                var syntaxInfixDeclaration = syntaxDeclaration.a;
                return $author$project$GrenPrintDefunctionalized$declarationInfix(syntaxInfixDeclaration);
        }
    }, $author$project$GrenPrintDefunctionalized$declaration = F2($author$project$GrenPrintDefunctionalized$declaration_fn);
    var $author$project$GrenPrintDefunctionalized$firstCommentInRange_fn = function (range, sortedComments) {
        firstCommentInRange: while (true) {
            if (!sortedComments.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v1 = sortedComments.a;
                var headCommentRange = _v1.a;
                var headComment = _v1.b;
                var tailComments = sortedComments.b;
                var _v2 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.d, range.d);
                switch (_v2) {
                    case 0:
                        var $temp$range = range, $temp$sortedComments = tailComments;
                        range = $temp$range;
                        sortedComments = $temp$sortedComments;
                        continue firstCommentInRange;
                    case 1:
                        return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(headCommentRange, headComment));
                    default:
                        var _v3 = $author$project$GrenPrintDefunctionalized$locationCompareFast_fn(headCommentRange.c, range.c);
                        switch (_v3) {
                            case 2:
                                return $elm$core$Maybe$Nothing;
                            case 0:
                                return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(headCommentRange, headComment));
                            default:
                                return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(headCommentRange, headComment));
                        }
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$firstCommentInRange = F2($author$project$GrenPrintDefunctionalized$firstCommentInRange_fn);
    var $author$project$GrenPrintDefunctionalized$linebreaksFollowedByDeclaration_fn = function (syntaxComments, syntaxDeclaration) {
        switch (syntaxDeclaration.$) {
            case 0:
                var syntaxExpressionDeclaration = syntaxDeclaration.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationExpression_fn(syntaxComments.b, syntaxExpressionDeclaration), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak);
            case 1:
                var syntaxTypeAliasDeclaration = syntaxDeclaration.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationTypeAlias_fn(syntaxComments.b, syntaxTypeAliasDeclaration), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak);
            case 2:
                var syntaxChoiceTypeDeclaration = syntaxDeclaration.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationChoiceType_fn(syntaxComments.b, syntaxChoiceTypeDeclaration), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak);
            case 3:
                var signature = syntaxDeclaration.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationPort_fn({ b: syntaxComments.b, cx: syntaxComments.bM }, signature), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak);
            default:
                var syntaxInfixDeclaration = syntaxDeclaration.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarationInfix(syntaxInfixDeclaration), $author$project$Print$linebreak);
        }
    }, $author$project$GrenPrintDefunctionalized$linebreaksFollowedByDeclaration = F2($author$project$GrenPrintDefunctionalized$linebreaksFollowedByDeclaration_fn);
    var $author$project$GrenPrintDefunctionalized$moduleLevelCommentsBeforeDeclaration = function (syntaxComments) {
        return $author$project$Print$FollowedBy_fn(function () {
            var _v0 = $author$project$GrenPrintDefunctionalized$listFilledLast_fn(syntaxComments.bY, syntaxComments.bZ);
            if (_v0 === "{--}") {
                return $author$project$Print$empty;
            }
            else {
                return $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak;
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(syntaxComments.bY, syntaxComments.bZ)), $author$project$Print$linebreak));
    };
    var $author$project$GrenPrintDefunctionalized$declarations_fn = function (context, syntaxDeclarations) {
        if (!syntaxDeclarations.b) {
            return $author$project$Print$empty;
        }
        else {
            var _v1 = syntaxDeclarations.a;
            var declaration0Range = _v1.a;
            var declaration0 = _v1.b;
            var declarations1Up = syntaxDeclarations.b;
            return $author$project$Print$FollowedBy_fn($elm$core$List$foldl_fn_unwrapped(function (_v3, soFar) {
                var declarationRange = _v3.a;
                var syntaxDeclaration = _v3.b;
                var maybeDeclarationPortDocumentationComment = function () {
                    switch (syntaxDeclaration.$) {
                        case 3:
                            return $author$project$GrenPrintDefunctionalized$firstCommentInRange_fn({ c: declarationRange.d, d: soFar.cj.c }, context.aI);
                        case 0:
                            return $elm$core$Maybe$Nothing;
                        case 1:
                            return $elm$core$Maybe$Nothing;
                        case 2:
                            return $elm$core$Maybe$Nothing;
                        default:
                            return $elm$core$Maybe$Nothing;
                    }
                }();
                return {
                    cj: declarationRange,
                    m: $author$project$Print$FollowedBy_fn(function () {
                        var _v4 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: declarationRange.d, d: soFar.cj.c }, context.b);
                        if (_v4.b) {
                            var comment0 = _v4.a;
                            var comment1Up = _v4.b;
                            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declaration_fn({
                                b: $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn(declarationRange, context.b),
                                bM: maybeDeclarationPortDocumentationComment
                            }, syntaxDeclaration), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelCommentsBeforeDeclaration({ bY: comment0, bZ: comment1Up }), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak));
                        }
                        else {
                            return $author$project$GrenPrintDefunctionalized$linebreaksFollowedByDeclaration_fn({
                                b: $author$project$GrenPrintDefunctionalized$commentNodesInRange_fn(declarationRange, context.b),
                                bM: maybeDeclarationPortDocumentationComment
                            }, syntaxDeclaration);
                        }
                    }(), soFar.m)
                };
            }, { cj: declaration0Range, m: $author$project$Print$empty }, declarations1Up).m, $author$project$GrenPrintDefunctionalized$declaration_fn({
                b: context.b,
                bM: function () {
                    switch (declaration0.$) {
                        case 3:
                            return $author$project$GrenPrintDefunctionalized$firstCommentInRange_fn({ c: declaration0Range.d, d: context.$7 }, context.aI);
                        case 0:
                            return $elm$core$Maybe$Nothing;
                        case 1:
                            return $elm$core$Maybe$Nothing;
                        case 2:
                            return $elm$core$Maybe$Nothing;
                        default:
                            return $elm$core$Maybe$Nothing;
                    }
                }()
            }, declaration0));
        }
    }, $author$project$GrenPrintDefunctionalized$declarations = F2($author$project$GrenPrintDefunctionalized$declarations_fn);
    var $author$project$GrenPrintDefunctionalized$expose = function (syntaxExpose) {
        switch (syntaxExpose.$) {
            case 0:
                var operatorSymbol = syntaxExpose.a;
                return "(" + (operatorSymbol + ")");
            case 1:
                var name = syntaxExpose.a;
                return name;
            case 2:
                var name = syntaxExpose.a;
                return name;
            default:
                var syntaxExposeType = syntaxExpose.a;
                var _v1 = syntaxExposeType.ez;
                if (_v1.$ === 1) {
                    return syntaxExposeType.q;
                }
                else {
                    return syntaxExposeType.q + "(..)";
                }
        }
    };
    var $author$project$GrenPrintDefunctionalized$exposingMulti_fn = function (syntaxComments, syntaxExposing) {
        var containedComments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(syntaxExposing.i, syntaxComments);
        var lineSpread = function () {
            if (containedComments.b) {
                return 1;
            }
            else {
                return $author$project$GrenPrintDefunctionalized$lineSpreadInRange(syntaxExposing.i);
            }
        }();
        return $author$project$Print$FollowedBy_fn(function () {
            if (!containedComments.b) {
                return $author$project$GrenPrintDefunctionalized$printExactlyParensClosing;
            }
            else {
                var comment0 = containedComments.a;
                var comment1Up = containedComments.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v1) {
            var syntaxExpose = _v1.b;
            return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$expose(syntaxExpose));
        }, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), _List_Cons(syntaxExposing.b6, syntaxExposing.b7)), function () {
            if (!lineSpread) {
                return $author$project$GrenPrintDefunctionalized$printExactlyParensOpening;
            }
            else {
                return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace;
            }
        }())));
    }, $author$project$GrenPrintDefunctionalized$exposingMulti = F2($author$project$GrenPrintDefunctionalized$exposingMulti_fn);
    var $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningDotDotParensClosing = $author$project$Print$exactly("(..)");
    var $author$project$GrenPrintDefunctionalized$importExposing_fn = function (syntaxComments, _v0) {
        var exposingRange = _v0.a;
        var syntaxExposing = _v0.b;
        if (!syntaxExposing.$) {
            return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningDotDotParensClosing;
        }
        else {
            var exposingSet = syntaxExposing.a;
            if (!exposingSet.b) {
                return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
            }
            else {
                var expose0 = exposingSet.a;
                var expose1Up = exposingSet.b;
                return $author$project$GrenPrintDefunctionalized$exposingMulti_fn(syntaxComments, { b6: expose0, b7: expose1Up, i: exposingRange });
            }
        }
    }, $author$project$GrenPrintDefunctionalized$importExposing = F2($author$project$GrenPrintDefunctionalized$importExposing_fn);
    var $author$project$GrenPrintDefunctionalized$moduleName = function (syntaxModuleName) {
        return $elm$core$String$join_fn(".", syntaxModuleName);
    };
    var $author$project$GrenPrintDefunctionalized$printExactImport = $author$project$Print$exactly("import");
    var $author$project$GrenPrintDefunctionalized$printExactlyExposing = $author$project$Print$exactly("exposing");
    var $author$project$GrenPrintDefunctionalized$printLinebreakIndentedAs = $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyAs, $author$project$Print$linebreakIndented);
    var $author$project$GrenPrintDefunctionalized$printLinebreakIndentedExposing = $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyExposing, $author$project$Print$linebreakIndented);
    var $author$project$GrenPrintDefunctionalized$import__fn = function (syntaxComments, _v0) {
        var incorrectImportRange = _v0.a;
        var syntaxImport = _v0.b;
        var importRange = function () {
            var _v12 = syntaxImport.a5;
            if (_v12.$ === 1) {
                return incorrectImportRange;
            }
            else {
                var _v13 = _v12.a;
                var syntaxExposingRange = _v13.a;
                return { c: syntaxExposingRange.c, d: incorrectImportRange.d };
            }
        }();
        var _v1 = syntaxImport.ag;
        var moduleNameRange = _v1.a;
        var syntaxModuleName = _v1.b;
        return $author$project$Print$FollowedBy_fn(function () {
            var _v8 = syntaxImport.a5;
            if (_v8.$ === 1) {
                return $author$project$Print$empty;
            }
            else {
                var syntaxExposing = _v8.a;
                var exposingPrint = $author$project$GrenPrintDefunctionalized$importExposing_fn(syntaxComments, syntaxExposing);
                var exposingPartStart = function () {
                    var _v10 = syntaxImport.cf;
                    if (_v10.$ === 1) {
                        return moduleNameRange.c;
                    }
                    else {
                        var _v11 = _v10.a;
                        var moduleAliasRange = _v11.a;
                        return moduleAliasRange.c;
                    }
                }();
                var _v9 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: importRange.c, d: exposingPartStart }, syntaxComments);
                if (!_v9.b) {
                    var lineSpread = $author$project$Print$lineSpread(exposingPrint);
                    return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(exposingPrint, $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyExposing, $author$project$Print$spaceOrLinebreakIndented(lineSpread))));
                }
                else {
                    var exposingComment0 = _v9.a;
                    var exposingComment1Up = _v9.b;
                    return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(exposingPrint, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(exposingComment0, exposingComment1Up)), $author$project$Print$linebreakIndented)))), $author$project$GrenPrintDefunctionalized$printLinebreakIndentedExposing));
                }
            }
        }(), $author$project$Print$FollowedBy_fn(function () {
            var _v2 = syntaxImport.cf;
            if (_v2.$ === 1) {
                var _v3 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: moduleNameRange.d, d: importRange.d }, syntaxComments);
                if (!_v3.b) {
                    return $author$project$Print$exactly(" " + $author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName));
                }
                else {
                    var comment0 = _v3.a;
                    var comment1Up = _v3.b;
                    return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up)), $author$project$Print$linebreakIndented))));
                }
            }
            else {
                var _v4 = _v2.a;
                var moduleAliasRange = _v4.a;
                var moduleAlias = _v4.b;
                var _v5 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: moduleAliasRange.d, d: moduleNameRange.c }, syntaxComments);
                if (!_v5.b) {
                    return $author$project$Print$FollowedBy_fn($author$project$Print$exactly(" as " + $author$project$GrenPrintDefunctionalized$moduleName(moduleAlias)), function () {
                        var _v6 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: moduleNameRange.d, d: importRange.d }, syntaxComments);
                        if (!_v6.b) {
                            return $author$project$Print$exactly(" " + $author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName));
                        }
                        else {
                            var moduleNameComment0 = _v6.a;
                            var moduleNameComment1Up = _v6.b;
                            return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(moduleNameComment0, moduleNameComment1Up)), $author$project$Print$linebreakIndented))));
                        }
                    }());
                }
                else {
                    var aliasComment0 = _v5.a;
                    var aliasComment1Up = _v5.b;
                    return $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenPrintDefunctionalized$moduleName(moduleAlias)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$comments(_List_Cons(aliasComment0, aliasComment1Up)), $author$project$Print$linebreakIndented)))), $author$project$GrenPrintDefunctionalized$printLinebreakIndentedAs)), $author$project$Print$FollowedBy_fn(function () {
                        var _v7 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: moduleNameRange.d, d: importRange.d }, syntaxComments);
                        if (!_v7.b) {
                            return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName));
                        }
                        else {
                            var moduleNameComment0 = _v7.a;
                            var moduleNameComment1Up = _v7.b;
                            return $author$project$Print$FollowedBy_fn($author$project$Print$exactly($author$project$GrenPrintDefunctionalized$moduleName(syntaxModuleName)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$GrenPrintDefunctionalized$comments(_List_Cons(moduleNameComment0, moduleNameComment1Up))));
                        }
                    }(), $author$project$Print$linebreakIndented)));
                }
            }
        }(), $author$project$GrenPrintDefunctionalized$printExactImport));
    }, $author$project$GrenPrintDefunctionalized$import_ = F2($author$project$GrenPrintDefunctionalized$import__fn);
    var $author$project$GrenPrintDefunctionalized$exposeCompare_fn = function (a, b) {
        switch (a.$) {
            case 0:
                var aOperatorSymbol = a.a;
                switch (b.$) {
                    case 0:
                        var bOperatorSymbol = b.a;
                        return _Utils_compare_fn(aOperatorSymbol, bOperatorSymbol);
                    case 1:
                        return 0;
                    case 2:
                        return 0;
                    default:
                        return 0;
                }
            case 1:
                var aName = a.a;
                switch (b.$) {
                    case 0:
                        return 2;
                    case 1:
                        var bName = b.a;
                        return _Utils_compare_fn(aName, bName);
                    case 2:
                        return 2;
                    default:
                        return 2;
                }
            case 2:
                var aName = a.a;
                switch (b.$) {
                    case 0:
                        return 2;
                    case 1:
                        return 0;
                    case 2:
                        var bName = b.a;
                        return _Utils_compare_fn(aName, bName);
                    default:
                        var bTypeExpose = b.a;
                        return _Utils_compare_fn(aName, bTypeExpose.q);
                }
            default:
                var aTypeExpose = a.a;
                switch (b.$) {
                    case 0:
                        return 2;
                    case 1:
                        return 0;
                    case 2:
                        var bName = b.a;
                        return _Utils_compare_fn(aTypeExpose.q, bName);
                    default:
                        var bTypeExpose = b.a;
                        return _Utils_compare_fn(aTypeExpose.q, bTypeExpose.q);
                }
        }
    }, $author$project$GrenPrintDefunctionalized$exposeCompare = F2($author$project$GrenPrintDefunctionalized$exposeCompare_fn);
    var $author$project$GrenPrintDefunctionalized$exposeMerge_fn = function (a, b) {
        switch (a.$) {
            case 3:
                var aTypeExpose = a.a;
                switch (b.$) {
                    case 3:
                        var bTypeExpose = b.a;
                        return $author$project$GrenSyntax$TypeExpose({
                            q: aTypeExpose.q,
                            ez: function () {
                                var _v2 = aTypeExpose.ez;
                                if (!_v2.$) {
                                    var openRange = _v2.a;
                                    return $elm$core$Maybe$Just(openRange);
                                }
                                else {
                                    return bTypeExpose.ez;
                                }
                            }()
                        });
                    case 0:
                        return $author$project$GrenSyntax$TypeExpose(aTypeExpose);
                    case 1:
                        return $author$project$GrenSyntax$TypeExpose(aTypeExpose);
                    default:
                        return $author$project$GrenSyntax$TypeExpose(aTypeExpose);
                }
            case 0:
                return b;
            case 1:
                return b;
            default:
                return b;
        }
    }, $author$project$GrenPrintDefunctionalized$exposeMerge = F2($author$project$GrenPrintDefunctionalized$exposeMerge_fn);
    var $author$project$GrenPrintDefunctionalized$exposesCombine = function (syntaxExposes) {
        exposesCombine: while (true) {
            if (!syntaxExposes.b) {
                return _List_Nil;
            }
            else {
                if (!syntaxExposes.b.b) {
                    var onlyExposeList = syntaxExposes;
                    return onlyExposeList;
                }
                else {
                    var expose0Node = syntaxExposes.a;
                    var _v1 = syntaxExposes.b;
                    var expose1Node = _v1.a;
                    var expose2Up = _v1.b;
                    var _v2 = expose1Node;
                    var expose1 = _v2.b;
                    var _v3 = expose0Node;
                    var expose0Range = _v3.a;
                    var expose0 = _v3.b;
                    var _v4 = $author$project$GrenPrintDefunctionalized$exposeCompare_fn(expose0, expose1);
                    switch (_v4) {
                        case 1:
                            var $temp$syntaxExposes = _List_Cons($author$project$GrenSyntax$Node_fn(expose0Range, $author$project$GrenPrintDefunctionalized$exposeMerge_fn(expose0, expose1)), expose2Up);
                            syntaxExposes = $temp$syntaxExposes;
                            continue exposesCombine;
                        case 0:
                            return _List_Cons(expose0Node, $author$project$GrenPrintDefunctionalized$exposesCombine(_List_Cons(expose1Node, expose2Up)));
                        default:
                            return _List_Cons(expose0Node, $author$project$GrenPrintDefunctionalized$exposesCombine(_List_Cons(expose1Node, expose2Up)));
                    }
                }
            }
        }
    };
    var $elm$core$List$sortWith = _List_sortWith;
    var $author$project$GrenPrintDefunctionalized$exposeListToNormal = function (syntaxExposeList) {
        return $author$project$GrenPrintDefunctionalized$exposesCombine(_List_sortWith_fn_unwrapped(function (_v0, _v1) {
            var a = _v0.b;
            var b = _v1.b;
            return $author$project$GrenPrintDefunctionalized$exposeCompare_fn(a, b);
        }, syntaxExposeList));
    };
    var $author$project$GrenPrintDefunctionalized$exposingToNormal = function (syntaxExposing) {
        if (!syntaxExposing.$) {
            var allRange = syntaxExposing.a;
            return $author$project$GrenSyntax$All(allRange);
        }
        else {
            var exposeSet = syntaxExposing.a;
            return $author$project$GrenSyntax$Explicit($author$project$GrenPrintDefunctionalized$exposeListToNormal(exposeSet));
        }
    };
    var $author$project$GrenPrintDefunctionalized$importToNormal = function (syntaxImport) {
        return {
            a5: function () {
                var _v0 = syntaxImport.a5;
                if (_v0.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var _v1 = _v0.a;
                    var exposingRange = _v1.a;
                    var syntaxExposing = _v1.b;
                    return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(exposingRange, $author$project$GrenPrintDefunctionalized$exposingToNormal(syntaxExposing)));
                }
            }(),
            cf: syntaxImport.cf,
            ag: syntaxImport.ag
        };
    };
    var $author$project$GrenPrintDefunctionalized$exposingCombine_fn = function (a, b) {
        if (!a.$) {
            if (!a.a.b.$) {
                var _v1 = a.a;
                var exposingAllRange = _v1.a;
                var allRange = _v1.b.a;
                return $elm$core$Maybe$Just($author$project$GrenSyntax$Node_fn(exposingAllRange, $author$project$GrenSyntax$All(allRange)));
            }
            else {
                var _v2 = a.a;
                var earlierExposingExplicitRange = _v2.a;
                var earlierExposeSet = _v2.b.a;
                return $elm$core$Maybe$Just(function () {
                    if (!b.$) {
                        if (!b.a.b.$) {
                            var _v4 = b.a;
                            var exposingAllRange = _v4.a;
                            var allRange = _v4.b.a;
                            return $author$project$GrenSyntax$Node_fn(exposingAllRange, $author$project$GrenSyntax$All(allRange));
                        }
                        else {
                            var _v5 = b.a;
                            var laterExposingExplicitRange = _v5.a;
                            var laterExposeSet = _v5.b.a;
                            return $author$project$GrenSyntax$Node_fn(function () {
                                var _v6 = $author$project$GrenPrintDefunctionalized$lineSpreadInRange(earlierExposingExplicitRange);
                                if (_v6 === 1) {
                                    return earlierExposingExplicitRange;
                                }
                                else {
                                    return laterExposingExplicitRange;
                                }
                            }(), $author$project$GrenSyntax$Explicit($author$project$GrenPrintDefunctionalized$exposeListToNormal(_Utils_ap(earlierExposeSet, laterExposeSet))));
                        }
                    }
                    else {
                        return $author$project$GrenSyntax$Node_fn(earlierExposingExplicitRange, $author$project$GrenSyntax$Explicit(earlierExposeSet));
                    }
                }());
            }
        }
        else {
            return b;
        }
    }, $author$project$GrenPrintDefunctionalized$exposingCombine = F2($author$project$GrenPrintDefunctionalized$exposingCombine_fn);
    var $author$project$GrenPrintDefunctionalized$importsMerge_fn = function (earlier, later) {
        return {
            a5: $author$project$GrenPrintDefunctionalized$exposingCombine_fn(earlier.a5, later.a5),
            cf: function () {
                var _v0 = earlier.cf;
                if (!_v0.$) {
                    var alias = _v0.a;
                    return $elm$core$Maybe$Just(alias);
                }
                else {
                    return later.cf;
                }
            }(),
            ag: later.ag
        };
    }, $author$project$GrenPrintDefunctionalized$importsMerge = F2($author$project$GrenPrintDefunctionalized$importsMerge_fn);
    var $author$project$GrenPrintDefunctionalized$importsCombine = function (syntaxImports) {
        importsCombine: while (true) {
            if (!syntaxImports.b) {
                return _List_Nil;
            }
            else {
                if (!syntaxImports.b.b) {
                    var onlyImport = syntaxImports.a;
                    return _List_fromArray([
                        $author$project$GrenSyntax$nodeMap_fn($author$project$GrenPrintDefunctionalized$importToNormal, onlyImport)
                    ]);
                }
                else {
                    var _v1 = syntaxImports.a;
                    var import0Range = _v1.a;
                    var import0 = _v1.b;
                    var _v2 = syntaxImports.b;
                    var _v3 = _v2.a;
                    var import1Range = _v3.a;
                    var import1 = _v3.b;
                    var import2Up = _v2.b;
                    if (_Utils_eq($author$project$GrenSyntax$nodeValue(import0.ag), $author$project$GrenSyntax$nodeValue(import1.ag))) {
                        var $temp$syntaxImports = _List_Cons($author$project$GrenSyntax$Node_fn(import1Range, $author$project$GrenPrintDefunctionalized$importsMerge_fn(import0, import1)), import2Up);
                        syntaxImports = $temp$syntaxImports;
                        continue importsCombine;
                    }
                    else {
                        return _List_Cons($author$project$GrenSyntax$Node_fn(import0Range, $author$project$GrenPrintDefunctionalized$importToNormal(import0)), $author$project$GrenPrintDefunctionalized$importsCombine(_List_Cons($author$project$GrenSyntax$Node_fn(import1Range, import1), import2Up)));
                    }
                }
            }
        }
    };
    var $author$project$GrenPrintDefunctionalized$imports_fn = function (syntaxComments, syntaxImports) {
        if (!syntaxImports.b) {
            return $author$project$Print$empty;
        }
        else {
            var _v1 = syntaxImports.a;
            var import0Range = _v1.a;
            var import0 = _v1.b;
            var imports1Up = syntaxImports.b;
            var commentsBetweenImports = $elm$core$List$foldl_fn_unwrapped(function (_v5, soFar) {
                var importRange = _v5.a;
                return {
                    b_: _Utils_ap(soFar.b_, $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: importRange.d, d: soFar.cD.c }, syntaxComments)),
                    cD: importRange
                };
            }, { b_: _List_Nil, cD: import0Range }, _List_Cons($author$project$GrenSyntax$Node_fn(import0Range, import0), imports1Up)).b_;
            return $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (syntaxImport) {
                return $author$project$GrenPrintDefunctionalized$import__fn(syntaxComments, syntaxImport);
            }, $author$project$Print$linebreak, $author$project$GrenPrintDefunctionalized$importsCombine(_List_sortWith_fn_unwrapped(function (_v3, _v4) {
                var a = _v3.b;
                var b = _v4.b;
                return _Utils_compare_fn($author$project$GrenSyntax$nodeValue(a.ag), $author$project$GrenSyntax$nodeValue(b.ag));
            }, _List_Cons($author$project$GrenSyntax$Node_fn(import0Range, import0), imports1Up)))), function () {
                if (!commentsBetweenImports.b) {
                    return $author$project$Print$empty;
                }
                else {
                    var comment0 = commentsBetweenImports.a;
                    var comment1Up = commentsBetweenImports.b;
                    return $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(comment0, comment1Up)));
                }
            }());
        }
    }, $author$project$GrenPrintDefunctionalized$imports = F2($author$project$GrenPrintDefunctionalized$imports_fn);
    var $author$project$GrenPrintDefunctionalized$moduleDocumentationBeforeCutOffLine_fn = function (cutOffLine, allComments) {
        moduleDocumentationBeforeCutOffLine: while (true) {
            if (!allComments.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var headComment = allComments.a;
                var restOfComments = allComments.b;
                var _v1 = headComment;
                var range = _v1.a;
                var content = _v1.b;
                if (_Utils_cmp(range.d.n, cutOffLine) > 0) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    if (_String_startsWith_fn("{-|", content)) {
                        return $elm$core$Maybe$Just(headComment);
                    }
                    else {
                        var $temp$cutOffLine = cutOffLine, $temp$allComments = restOfComments;
                        cutOffLine = $temp$cutOffLine;
                        allComments = $temp$allComments;
                        continue moduleDocumentationBeforeCutOffLine;
                    }
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$moduleDocumentationBeforeCutOffLine = F2($author$project$GrenPrintDefunctionalized$moduleDocumentationBeforeCutOffLine_fn);
    var $author$project$GrenPrintDefunctionalized$moduleDocumentation = function (ast) {
        var cutOffLine = function () {
            var _v0 = ast.eb;
            if (_v0.b) {
                var _v1 = _v0.a;
                var firstImportRange = _v1.a;
                return firstImportRange.d.n;
            }
            else {
                var _v2 = ast.b1;
                if (_v2.b) {
                    var _v3 = _v2.a;
                    var firstDeclarationRange = _v3.a;
                    return firstDeclarationRange.d.n;
                }
                else {
                    return 0;
                }
            }
        }();
        return $author$project$GrenPrintDefunctionalized$moduleDocumentationBeforeCutOffLine_fn(cutOffLine, ast.b);
    };
    var $author$project$GrenPrintDefunctionalized$rawSinceAtDocsEmptyFinishedBlocksEmpty = { aW: _List_Nil, a$: "" };
    var $author$project$GrenPrintDefunctionalized$moduleDocumentationParse = function (moduleDocumentationContent) {
        var parsed = $elm$core$List$foldl_fn_unwrapped(function (line, soFar) {
            return _String_startsWith_fn("@docs ", line) ? {
                aW: _List_Cons({
                    bU: $elm$core$List$map_fn($elm$core$String$trim, $elm$core$String$split_fn(",", _String_slice_fn(6, $elm$core$String$length(line), line))),
                    cF: soFar.a$
                }, soFar.aW),
                a$: ""
            } : ((line === "@docs") ? {
                aW: _List_Cons({ bU: _List_Nil, cF: soFar.a$ }, soFar.aW),
                a$: ""
            } : { aW: soFar.aW, a$: soFar.a$ + (line + "\n") });
        }, $author$project$GrenPrintDefunctionalized$rawSinceAtDocsEmptyFinishedBlocksEmpty, $elm$core$String$lines($elm$core$String$dropRight_fn(2, $elm$core$String$trimLeft($elm$core$String$dropLeft_fn(3, moduleDocumentationContent)))));
        return {
            dt: parsed.a$,
            cK: $elm$core$List$reverse(parsed.aW)
        };
    };
    var $author$project$GrenPrintDefunctionalized$exposeToAtDocsString = function (syntaxExpose) {
        switch (syntaxExpose.$) {
            case 0:
                var operatorSymbol = syntaxExpose.a;
                return "(" + (operatorSymbol + ")");
            case 1:
                var name = syntaxExpose.a;
                return name;
            case 2:
                var name = syntaxExpose.a;
                return name;
            default:
                var choiceTypeExpose = syntaxExpose.a;
                return choiceTypeExpose.q;
        }
    };
    var $author$project$GrenPrintDefunctionalized$listFirstJustMap_fn = function (elementToMaybe, list) {
        listFirstJustMap: while (true) {
            if (!list.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var head = list.a;
                var tail = list.b;
                var _v1 = elementToMaybe(head);
                if (_v1.$ === 1) {
                    var $temp$elementToMaybe = elementToMaybe, $temp$list = tail;
                    elementToMaybe = $temp$elementToMaybe;
                    list = $temp$list;
                    continue listFirstJustMap;
                }
                else {
                    var b = _v1.a;
                    return $elm$core$Maybe$Just(b);
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$listFirstJustMap = F2($author$project$GrenPrintDefunctionalized$listFirstJustMap_fn);
    var $author$project$GrenPrintDefunctionalized$atDocsLineToExposesAndRemaining_fn = function (atDocsLine, remainingExposes) {
        return $elm$core$List$foldr_fn(F2(function (exposeAsAtDocsString, soFar) {
            var toExposeReferencedByAtDocsString = function (ex) {
                return _Utils_eq($author$project$GrenPrintDefunctionalized$exposeToAtDocsString(ex), exposeAsAtDocsString) ? $elm$core$Maybe$Just(ex) : $elm$core$Maybe$Nothing;
            };
            var _v0 = $author$project$GrenPrintDefunctionalized$listFirstJustMap_fn(toExposeReferencedByAtDocsString, soFar.bN);
            if (_v0.$ === 1) {
                return soFar;
            }
            else {
                var exposeReferencedByAtDocsString = _v0.a;
                return {
                    b8: _List_Cons(exposeReferencedByAtDocsString, soFar.b8),
                    bN: $elm$core$List$filter_fn(function (ex) {
                        return !_Utils_eq(ex, exposeReferencedByAtDocsString);
                    }, soFar.bN)
                };
            }
        }), { b8: _List_Nil, bN: remainingExposes }, atDocsLine);
    }, $author$project$GrenPrintDefunctionalized$atDocsLineToExposesAndRemaining = F2($author$project$GrenPrintDefunctionalized$atDocsLineToExposesAndRemaining_fn);
    var $author$project$GrenPrintDefunctionalized$listMapAndIntersperseAndFlattenToString_fn = function (elementToString, betweenElements, elements) {
        if (!elements.b) {
            return "";
        }
        else {
            var head = elements.a;
            var tail = elements.b;
            return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
                return soFar + (betweenElements + (elementToString(next) + ""));
            }, elementToString(head), tail);
        }
    }, $author$project$GrenPrintDefunctionalized$listMapAndIntersperseAndFlattenToString = F3($author$project$GrenPrintDefunctionalized$listMapAndIntersperseAndFlattenToString_fn);
    var $author$project$GrenPrintDefunctionalized$printLinebreakIndentedCommaSpace = $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyCommaSpace, $author$project$Print$linebreakIndented);
    var $author$project$GrenPrintDefunctionalized$moduleExposing_fn = function (context, _v0) {
        var exposingRange = _v0.a;
        var syntaxExposing = _v0.b;
        if (!syntaxExposing.$) {
            return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningDotDotParensClosing;
        }
        else {
            var exposingSet = syntaxExposing.a;
            var _v2 = $author$project$GrenPrintDefunctionalized$exposeListToNormal(exposingSet);
            if (!_v2.b) {
                return $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningParensClosed;
            }
            else {
                if (!_v2.b.b) {
                    var _v3 = _v2.a;
                    var onlySyntaxExpose = _v3.b;
                    var containedComments = $author$project$GrenPrintDefunctionalized$commentsInRange_fn(exposingRange, context.b);
                    var lineSpread = function () {
                        if (containedComments.b) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }();
                    return $author$project$Print$FollowedBy_fn(function () {
                        if (!containedComments.b) {
                            return $author$project$GrenPrintDefunctionalized$printExactlyParensClosing;
                        }
                        else {
                            var comment0 = containedComments.a;
                            var comment1Up = containedComments.b;
                            return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$GrenPrintDefunctionalized$comments(_List_Cons(comment0, comment1Up))));
                        }
                    }(), $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$exactly(function () {
                        if (!lineSpread) {
                            return "(";
                        }
                        else {
                            return "( ";
                        }
                    }() + ($author$project$GrenPrintDefunctionalized$expose(onlySyntaxExpose) + ""))));
                }
                else {
                    var expose0 = _v2.a;
                    var _v7 = _v2.b;
                    var expose1 = _v7.a;
                    var expose2Up = _v7.b;
                    var _v8 = context.cQ;
                    if (_v8.b) {
                        var atDocsLine0 = _v8.a;
                        var atDocsLine1Up = _v8.b;
                        var atDocsExposeLines = $elm$core$List$foldr_fn(F2(function (atDocsLine, soFar) {
                            var atDocsExposeLine = $author$project$GrenPrintDefunctionalized$atDocsLineToExposesAndRemaining_fn(atDocsLine, soFar.cm);
                            return {
                                bT: _List_Cons(atDocsExposeLine.b8, soFar.bT),
                                cm: atDocsExposeLine.bN
                            };
                        }), {
                            bT: _List_Nil,
                            cm: $elm$core$List$map_fn($author$project$GrenSyntax$nodeValue, _List_Cons(expose0, _List_Cons(expose1, expose2Up)))
                        }, _List_Cons(atDocsLine0, atDocsLine1Up));
                        var _v9 = $elm$core$List$filter_fn(function (line) {
                            if (!line.b) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }, atDocsExposeLines.bT);
                        if (!_v9.b) {
                            return $author$project$GrenPrintDefunctionalized$exposingMulti_fn(context.b, {
                                b6: expose0,
                                b7: _List_Cons(expose1, expose2Up),
                                i: exposingRange
                            });
                        }
                        else {
                            var atDocsExposeLine0 = _v9.a;
                            var atDocsExposeLine1Up = _v9.b;
                            return $author$project$Print$FollowedBy_fn(function () {
                                var _v11 = atDocsExposeLines.cm;
                                if (!_v11.b) {
                                    return $author$project$GrenPrintDefunctionalized$printExactlyParensClosing;
                                }
                                else {
                                    var remainingExpose0 = _v11.a;
                                    var remainingExpose1Up = _v11.b;
                                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printExactlyParensClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$exactly(", " + $author$project$GrenPrintDefunctionalized$listMapAndIntersperseAndFlattenToString_fn($author$project$GrenPrintDefunctionalized$expose, ", ", _List_Cons(remainingExpose0, remainingExpose1Up)))));
                                }
                            }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (atDocsLine) {
                                return $author$project$Print$exactly($author$project$GrenPrintDefunctionalized$listMapAndIntersperseAndFlattenToString_fn($author$project$GrenPrintDefunctionalized$expose, ", ", atDocsLine));
                            }, $author$project$GrenPrintDefunctionalized$printLinebreakIndentedCommaSpace, _List_Cons(atDocsExposeLine0, atDocsExposeLine1Up)), $author$project$GrenPrintDefunctionalized$printExactlyParensOpeningSpace)));
                        }
                    }
                    else {
                        return $author$project$GrenPrintDefunctionalized$exposingMulti_fn(context.b, {
                            b6: expose0,
                            b7: _List_Cons(expose1, expose2Up),
                            i: exposingRange
                        });
                    }
                }
            }
        }
    }, $author$project$GrenPrintDefunctionalized$moduleExposing = F2($author$project$GrenPrintDefunctionalized$moduleExposing_fn);
    var $author$project$GrenPrintDefunctionalized$moduleHeader_fn = function (context, syntaxModuleHeader) {
        switch (syntaxModuleHeader.$) {
            case 0:
                var defaultModuleData = syntaxModuleHeader.a;
                var exposingPrint = $author$project$GrenPrintDefunctionalized$moduleExposing_fn(context, defaultModuleData.a5);
                var lineSpread = $author$project$Print$lineSpread(exposingPrint);
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(exposingPrint, $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$exactly("module " + ($author$project$GrenPrintDefunctionalized$moduleName($author$project$GrenSyntax$nodeValue(defaultModuleData.ag)) + " exposing")));
            case 1:
                var defaultModuleData = syntaxModuleHeader.a;
                var exposingPrint = $author$project$GrenPrintDefunctionalized$moduleExposing_fn(context, defaultModuleData.a5);
                var lineSpread = $author$project$Print$lineSpread(exposingPrint);
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(exposingPrint, $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$exactly("port module " + ($author$project$GrenPrintDefunctionalized$moduleName($author$project$GrenSyntax$nodeValue(defaultModuleData.ag)) + " exposing")));
            default:
                var effectModuleData = syntaxModuleHeader.a;
                var exposingPrint = $author$project$GrenPrintDefunctionalized$moduleExposing_fn(context, effectModuleData.a5);
                var lineSpread = $author$project$Print$lineSpread(exposingPrint);
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(exposingPrint, $author$project$Print$spaceOrLinebreakIndented(lineSpread))), $author$project$Print$exactly("effect module " + ($author$project$GrenPrintDefunctionalized$moduleName($author$project$GrenSyntax$nodeValue(effectModuleData.ag)) + (" where { " + ($elm$core$String$join_fn(", ", $elm$core$List$filterMap_fn($elm$core$Basics$identity, _List_fromArray([
                    function () {
                        var _v1 = effectModuleData.cv;
                        if (_v1.$ === 1) {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var _v2 = _v1.a;
                            var name = _v2.b;
                            return $elm$core$Maybe$Just("command = " + name);
                        }
                    }(),
                    function () {
                        var _v3 = effectModuleData.cH;
                        if (_v3.$ === 1) {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var _v4 = _v3.a;
                            var name = _v4.b;
                            return $elm$core$Maybe$Just("subscription = " + name);
                        }
                    }()
                ]))) + " } exposing")))));
        }
    }, $author$project$GrenPrintDefunctionalized$moduleHeader = F2($author$project$GrenPrintDefunctionalized$moduleHeader_fn);
    var $author$project$GrenPrintDefunctionalized$printModuleDocumentation = function (moduleDocumentationBlocks) {
        var content = $elm$core$String$trimRight(_Utils_ap($author$project$GrenPrintDefunctionalized$listMapAndFlattenToString_fn(function (atDocsLineAndBefore) {
            return _Utils_ap(atDocsLineAndBefore.cF, function () {
                var _v0 = atDocsLineAndBefore.bU;
                if (!_v0.b) {
                    return "";
                }
                else {
                    var atDocsExpose0 = _v0.a;
                    var atDocsExpose1Up = _v0.b;
                    return "@docs " + ($elm$core$String$join_fn(", ", _List_Cons(atDocsExpose0, atDocsExpose1Up)) + "\n");
                }
            }());
        }, moduleDocumentationBlocks.cK), moduleDocumentationBlocks.dt));
        return $author$project$Print$exactly("{-|" + ((_String_startsWith_fn("@docs ", content) ? "\n\n" : " ") + (content + (_String_contains_fn("\n", content) ? "\n\n-}" : "\n-}"))));
    };
    var $author$project$GrenPrintDefunctionalized$commentsEmptyPortDocumentationRemainingCommentsEmpty = { aI: _List_Nil, al: _List_Nil };
    var $author$project$GrenPrintDefunctionalized$splitOffPortDocumentationComments = function (commentsAndPortDocumentationComments) {
        return $elm$core$List$foldr_fn(F2(function (commentOrPortDocumentationComments, soFar) {
            return _String_startsWith_fn("{-|", $author$project$GrenSyntax$nodeValue(commentOrPortDocumentationComments)) ? {
                aI: _List_Cons(commentOrPortDocumentationComments, soFar.aI),
                al: soFar.al
            } : {
                aI: soFar.aI,
                al: _List_Cons(commentOrPortDocumentationComments, soFar.al)
            };
        }), $author$project$GrenPrintDefunctionalized$commentsEmptyPortDocumentationRemainingCommentsEmpty, commentsAndPortDocumentationComments);
    };
    var $author$project$GrenPrintDefunctionalized$module_ = function (syntaxModule) {
        var maybeModuleDocumentation = $author$project$GrenPrintDefunctionalized$moduleDocumentation(syntaxModule);
        var maybeModuleDocumentationParsed = function () {
            if (maybeModuleDocumentation.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v16 = maybeModuleDocumentation.a;
                var syntaxModuleDocumentation = _v16.b;
                return $elm$core$Maybe$Just($author$project$GrenPrintDefunctionalized$moduleDocumentationParse(syntaxModuleDocumentation));
            }
        }();
        var lastSyntaxLocationBeforeDeclarations = function () {
            var _v13 = syntaxModule.eb;
            if (_v13.b) {
                var _v14 = _v13.a;
                var firstImportRange = _v14.a;
                return firstImportRange.c;
            }
            else {
                return $author$project$GrenSyntax$nodeRange(syntaxModule.eu).c;
            }
        }();
        var commentsAndPortDocumentationComments = $author$project$GrenPrintDefunctionalized$splitOffPortDocumentationComments(function () {
            if (maybeModuleDocumentation.$ === 1) {
                return syntaxModule.b;
            }
            else {
                var syntaxModuleDocumentation = maybeModuleDocumentation.a;
                return $elm$core$List$filter_fn(function (c) {
                    return !_Utils_eq(c, syntaxModuleDocumentation);
                }, syntaxModule.b);
            }
        }());
        var commentsBeforeDeclarations = function () {
            var _v10 = syntaxModule.b1;
            if (!_v10.b) {
                return _List_Nil;
            }
            else {
                var _v11 = _v10.a;
                var declaration0Range = _v11.a;
                return $author$project$GrenPrintDefunctionalized$commentsInRange_fn({ c: declaration0Range.d, d: lastSyntaxLocationBeforeDeclarations }, commentsAndPortDocumentationComments.al);
            }
        }();
        var atDocsLines = function () {
            if (maybeModuleDocumentationParsed.$ === 1) {
                return _List_Nil;
            }
            else {
                var moduleDocumentationParsed = maybeModuleDocumentationParsed.a;
                return $elm$core$List$map_fn(function ($) {
                    return $.bU;
                }, moduleDocumentationParsed.cK);
            }
        }();
        return $author$project$Print$FollowedBy_fn(function () {
            var _v7 = syntaxModule.b1;
            if (!_v7.b) {
                return $author$project$Print$empty;
            }
            else {
                var declaration0 = _v7.a;
                var declaration1Up = _v7.b;
                var _v8 = $author$project$GrenPrintDefunctionalized$commentsAfter_fn($author$project$GrenSyntax$nodeRange($author$project$GrenPrintDefunctionalized$listFilledLast_fn(declaration0, declaration1Up)).c, commentsAndPortDocumentationComments.al);
                if (!_v8.b) {
                    return $author$project$Print$empty;
                }
                else {
                    var comment0 = _v8.a;
                    var comment1Up = _v8.b;
                    return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(comment0, comment1Up)), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreakLinebreak);
                }
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$declarations_fn({ b: commentsAndPortDocumentationComments.al, aI: commentsAndPortDocumentationComments.aI, $7: lastSyntaxLocationBeforeDeclarations }, syntaxModule.b1), $author$project$Print$FollowedBy_fn(function () {
            if (!commentsBeforeDeclarations.b) {
                return $author$project$Print$empty;
            }
            else {
                var comment0 = commentsBeforeDeclarations.a;
                var comment1Up = commentsBeforeDeclarations.b;
                return $author$project$GrenPrintDefunctionalized$moduleLevelCommentsBeforeDeclaration({ bY: comment0, bZ: comment1Up });
            }
        }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, $author$project$Print$FollowedBy_fn(function () {
            var _v1 = syntaxModule.eb;
            if (!_v1.b) {
                if (maybeModuleDocumentation.$ === 1) {
                    return $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak;
                }
                else {
                    if (!commentsBeforeDeclarations.b) {
                        return $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak;
                    }
                    else {
                        return $author$project$Print$empty;
                    }
                }
            }
            else {
                var _v4 = _v1.a;
                var import0Range = _v4.a;
                var import0 = _v4.b;
                var import1Up = _v1.b;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printLinebreakLinebreak, $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$imports_fn(commentsAndPortDocumentationComments.al, _List_Cons($author$project$GrenSyntax$Node_fn(import0Range, import0), import1Up)), $author$project$Print$FollowedBy_fn($author$project$Print$linebreak, function () {
                    var _v5 = $author$project$GrenPrintDefunctionalized$commentsInRange_fn({
                        c: import0Range.d,
                        d: $author$project$GrenSyntax$nodeRange(syntaxModule.eu).c
                    }, commentsAndPortDocumentationComments.al);
                    if (!_v5.b) {
                        return $author$project$Print$linebreak;
                    }
                    else {
                        var comment0 = _v5.a;
                        var comment1Up = _v5.b;
                        return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$moduleLevelComments(_List_Cons(comment0, comment1Up)), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak);
                    }
                }())));
            }
        }(), $author$project$Print$FollowedBy_fn(function () {
            if (maybeModuleDocumentationParsed.$ === 1) {
                return $author$project$Print$empty;
            }
            else {
                var moduleDocumentationParsed = maybeModuleDocumentationParsed.a;
                return $author$project$Print$FollowedBy_fn($author$project$GrenPrintDefunctionalized$printModuleDocumentation(moduleDocumentationParsed), $author$project$GrenPrintDefunctionalized$printLinebreakLinebreak);
            }
        }(), $author$project$GrenPrintDefunctionalized$moduleHeader_fn({ cQ: atDocsLines, b: commentsAndPortDocumentationComments.al }, $author$project$GrenSyntax$nodeValue(syntaxModule.eu)))))))));
    };
    var $author$project$GrenPrint$module_ = function (syntaxModule) {
        return function (state) {
            return $author$project$Print$toStringWithIndent_fn(state.H, $author$project$GrenPrintDefunctionalized$module_(syntaxModule));
        };
    };
    var $elm$core$String$right_fn = function (n, string) {
        return (n < 1) ? "" : _String_slice_fn(-n, $elm$core$String$length(string), string);
    }, $elm$core$String$right = F2($elm$core$String$right_fn);
    var $author$project$ParserFast$run_fn = function (_v0, src) {
        var parse = _v0;
        var _v1 = parse({ f: 1, H: _List_Nil, e: 0, n: 1, g: src });
        if (!_v1.$) {
            var value = _v1.a;
            var finalState = _v1.b;
            return (!(finalState.e - $elm$core$String$length(finalState.g))) ? $elm$core$Maybe$Just(value) : $elm$core$Maybe$Nothing;
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $author$project$ParserFast$run = F2($author$project$ParserFast$run_fn);
    var $author$project$GrenParserLenient$run_fn = function (syntaxParser, source) {
        return $author$project$ParserFast$run_fn(syntaxParser, source);
    }, $author$project$GrenParserLenient$run = F2($author$project$GrenParserLenient$run_fn);
    var $lue_bird$elm_state_interface_experimental$Node$standardInRawListen = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$StandardInRawListen($elm$core$Basics$identity));
    var $lue_bird$elm_state_interface_experimental$Node$standardOutWrite = function (text) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
    };
    var $author$project$GrenPrint$toString = function (print) {
        return print({ H: 0 });
    };
    var $author$project$Main$interfaceSingleFileStandardStreamRun = function (singleFileStandardStreamRun) {
        if (!singleFileStandardStreamRun.$) {
            var moduleSourceSoFar = singleFileStandardStreamRun.a;
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (nextModuleSourceChunkOrEnd) {
                return $author$project$Main$SingleFileStandardStreamRun(function () {
                    if (nextModuleSourceChunkOrEnd.$ === 1) {
                        return $author$project$Main$ModuleSourceReceived(moduleSourceSoFar);
                    }
                    else {
                        var nextModuleSourceChunk = nextModuleSourceChunkOrEnd.a;
                        return $author$project$Main$AssemblingModuleSourceFromStandardIn(moduleSourceSoFar + (nextModuleSourceChunk + ""));
                    }
                }());
            }, $lue_bird$elm_state_interface_experimental$Node$standardInRawListen);
        }
        else {
            var moduleSource = singleFileStandardStreamRun.a;
            var _v2 = $author$project$GrenParserLenient$run_fn($author$project$GrenParserLenient$module_, moduleSource);
            if (_v2.$ === 1) {
                return $author$project$Main$errorInterface("module failed to parse: " + ($elm$core$String$left_fn(90, moduleSource) + ("..." + $elm$core$String$right_fn(90, moduleSource))));
            }
            else {
                var moduleSyntax = _v2.a;
                return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite($author$project$GrenPrint$toString($author$project$GrenPrint$module_(moduleSyntax)));
            }
        }
    };
    var $lue_bird$elm_state_interface_experimental$Node$launchArgumentsRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest($elm$core$Basics$identity));
    var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
        switch (builder.$) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 4;
            case 3:
                return 1;
            case 4:
                return 2;
            case 5:
                return 4;
            case 6:
                return 4;
            case 7:
                return 8;
            case 8:
                var w = builder.a;
                return w;
            case 9:
                var w = builder.a;
                return w;
            default:
                var bs = builder.a;
                return _Bytes_width(bs);
        }
    };
    var $elm$bytes$Bytes$LE = 0;
    var $elm$bytes$Bytes$Encode$write_fn = function (builder, mb, offset) {
        switch (builder.$) {
            case 0:
                var n = builder.a;
                return _Bytes_write_i8_fn(mb, offset, n);
            case 1:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_i16_fn(mb, offset, n, !e);
            case 2:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_i32_fn(mb, offset, n, !e);
            case 3:
                var n = builder.a;
                return _Bytes_write_u8_fn(mb, offset, n);
            case 4:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_u16_fn(mb, offset, n, !e);
            case 5:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_u32_fn(mb, offset, n, !e);
            case 6:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_f32_fn(mb, offset, n, !e);
            case 7:
                var e = builder.a;
                var n = builder.b;
                return _Bytes_write_f64_fn(mb, offset, n, !e);
            case 8:
                var bs = builder.b;
                return $elm$bytes$Bytes$Encode$writeSequence_fn(bs, mb, offset);
            case 9:
                var s = builder.b;
                return _Bytes_write_string_fn(mb, offset, s);
            default:
                var bs = builder.a;
                return _Bytes_write_bytes_fn(mb, offset, bs);
        }
    }, $elm$bytes$Bytes$Encode$write = F3($elm$bytes$Bytes$Encode$write_fn);
    var $elm$bytes$Bytes$Encode$writeSequence_fn = function (builders, mb, offset) {
        writeSequence: while (true) {
            if (!builders.b) {
                return offset;
            }
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$builders = bs, $temp$mb = mb, $temp$offset = $elm$bytes$Bytes$Encode$write_fn(b, mb, offset);
                builders = $temp$builders;
                mb = $temp$mb;
                offset = $temp$offset;
                continue writeSequence;
            }
        }
    }, $elm$bytes$Bytes$Encode$writeSequence = F3($elm$bytes$Bytes$Encode$writeSequence_fn);
    var $elm$bytes$Bytes$Decode$decode_fn = function (_v0, bs) {
        var decoder = _v0;
        return _Bytes_decode_fn(decoder, bs);
    }, $elm$bytes$Bytes$Decode$decode = F2($elm$bytes$Bytes$Decode$decode_fn);
    var $elm$json$Json$Decode$decodeString = _Json_runOnString;
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $lue_bird$elm_state_interface_experimental$Node$fileRequest = function (path) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$FileRequest({ p: $elm$core$Basics$identity, bx: path }));
    };
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$json$Json$Decode$oneOf = _Json_oneOf;
    var $elm$bytes$Bytes$Decode$Decoder = $elm$core$Basics$identity;
    var $elm$bytes$Bytes$Decode$string = function (n) {
        return _Bytes_read_string(n);
    };
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $elm$bytes$Bytes$width = _Bytes_width;
    var $author$project$Main$nodeGrenJsonSourceDirectoriesRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (grenJsonBytesOrError) {
        if (grenJsonBytesOrError.$ === 1) {
            var fileReadError = grenJsonBytesOrError.a;
            return $elm$core$Result$Err("gren.json couldn't be read because " + fileReadError.aZ);
        }
        else {
            var grenJsonBytes = grenJsonBytesOrError.a;
            var _v1 = $elm$bytes$Bytes$Decode$decode_fn($elm$bytes$Bytes$Decode$string($elm$bytes$Bytes$width(grenJsonBytes)), grenJsonBytes);
            if (_v1.$ === 1) {
                return $elm$core$Result$Err("gren.json bytes could not be decoded into UTF-8 String");
            }
            else {
                var grenJsonString = _v1.a;
                var _v2 = _Json_runOnString_fn($elm$json$Json$Decode$oneOf(_List_fromArray([
                    _Json_decodeField_fn("source-directories", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
                    $elm$json$Json$Decode$succeed(_List_fromArray(["src"]))
                ])), grenJsonString);
                if (_v2.$ === 1) {
                    var jsonDecodeError = _v2.a;
                    return $elm$core$Result$Err("gren.json failed to parse due to " + $elm$json$Json$Decode$errorToString(jsonDecodeError));
                }
                else {
                    var grenJson = _v2.a;
                    return $elm$core$Result$Ok(grenJson);
                }
            }
        }
    }, $lue_bird$elm_state_interface_experimental$Node$fileRequest("gren.json"));
    var $wolfadex$elm_ansi$Ansi$Color$Cyan = { $: 6 };
    var $wolfadex$elm_ansi$Ansi$Color$cyan = $wolfadex$elm_ansi$Ansi$Color$Cyan;
    var $wolfadex$elm_ansi$Ansi$Color$Font = 0;
    var $wolfadex$elm_ansi$Ansi$Internal$esc = "\u001B[";
    var $wolfadex$elm_ansi$Ansi$Internal$toCommand = function (str) {
        return _Utils_ap($wolfadex$elm_ansi$Ansi$Internal$esc, str);
    };
    var $wolfadex$elm_ansi$Ansi$Color$end = function (location) {
        return $wolfadex$elm_ansi$Ansi$Internal$toCommand(function () {
            if (!location) {
                return "39";
            }
            else {
                return "49";
            }
        }() + "m");
    };
    var $wolfadex$elm_ansi$Ansi$Color$encodeLocation = function (loc) {
        if (!loc) {
            return 38;
        }
        else {
            return 48;
        }
    };
    var $wolfadex$elm_ansi$Ansi$Internal$separator = ";";
    var $wolfadex$elm_ansi$Ansi$Color$start_fn = function (location, color_) {
        return $wolfadex$elm_ansi$Ansi$Internal$toCommand(function (s) {
            return s + "m";
        }($elm$core$String$join_fn($wolfadex$elm_ansi$Ansi$Internal$separator, $elm$core$List$map_fn($elm$core$String$fromInt, function () {
            switch (color_.$) {
                case 0:
                    if (!location) {
                        return _List_fromArray([30]);
                    }
                    else {
                        return _List_fromArray([40]);
                    }
                case 1:
                    if (!location) {
                        return _List_fromArray([31]);
                    }
                    else {
                        return _List_fromArray([41]);
                    }
                case 2:
                    if (!location) {
                        return _List_fromArray([32]);
                    }
                    else {
                        return _List_fromArray([42]);
                    }
                case 3:
                    if (!location) {
                        return _List_fromArray([33]);
                    }
                    else {
                        return _List_fromArray([43]);
                    }
                case 4:
                    if (!location) {
                        return _List_fromArray([34]);
                    }
                    else {
                        return _List_fromArray([44]);
                    }
                case 5:
                    if (!location) {
                        return _List_fromArray([35]);
                    }
                    else {
                        return _List_fromArray([45]);
                    }
                case 6:
                    if (!location) {
                        return _List_fromArray([36]);
                    }
                    else {
                        return _List_fromArray([46]);
                    }
                case 7:
                    if (!location) {
                        return _List_fromArray([37]);
                    }
                    else {
                        return _List_fromArray([47]);
                    }
                case 8:
                    if (!location) {
                        return _List_fromArray([90]);
                    }
                    else {
                        return _List_fromArray([100]);
                    }
                case 9:
                    if (!location) {
                        return _List_fromArray([91]);
                    }
                    else {
                        return _List_fromArray([101]);
                    }
                case 10:
                    if (!location) {
                        return _List_fromArray([92]);
                    }
                    else {
                        return _List_fromArray([102]);
                    }
                case 11:
                    if (!location) {
                        return _List_fromArray([93]);
                    }
                    else {
                        return _List_fromArray([103]);
                    }
                case 12:
                    if (!location) {
                        return _List_fromArray([94]);
                    }
                    else {
                        return _List_fromArray([104]);
                    }
                case 13:
                    if (!location) {
                        return _List_fromArray([95]);
                    }
                    else {
                        return _List_fromArray([105]);
                    }
                case 14:
                    if (!location) {
                        return _List_fromArray([96]);
                    }
                    else {
                        return _List_fromArray([106]);
                    }
                case 15:
                    if (!location) {
                        return _List_fromArray([97]);
                    }
                    else {
                        return _List_fromArray([107]);
                    }
                case 16:
                    var color = color_.a.d$;
                    if (!location) {
                        return _List_fromArray([
                            $wolfadex$elm_ansi$Ansi$Color$encodeLocation(location),
                            5,
                            color
                        ]);
                    }
                    else {
                        return _List_fromArray([
                            $wolfadex$elm_ansi$Ansi$Color$encodeLocation(location),
                            5,
                            color
                        ]);
                    }
                default:
                    var customColor_ = color_.a;
                    return _List_fromArray([
                        $wolfadex$elm_ansi$Ansi$Color$encodeLocation(location),
                        2,
                        customColor_.cG,
                        customColor_.cy,
                        customColor_.ct
                    ]);
            }
        }()))));
    }, $wolfadex$elm_ansi$Ansi$Color$start = F2($wolfadex$elm_ansi$Ansi$Color$start_fn);
    var $wolfadex$elm_ansi$Ansi$Color$fontColor_fn = function (c, str) {
        return _Utils_ap($wolfadex$elm_ansi$Ansi$Color$start_fn(0, c), _Utils_ap(str, $wolfadex$elm_ansi$Ansi$Color$end(0)));
    }, $wolfadex$elm_ansi$Ansi$Color$fontColor = F2($wolfadex$elm_ansi$Ansi$Color$fontColor_fn);
    var $author$project$Main$nodeShowHelpText = $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("Format gren 0.19 source directory and tests/ modules in the current project like gren-format (https://github.com/avh4/gren-format).\n\n" + ($elm$core$String$join_fn("\n", $elm$core$List$map_fn(function (commandAndDescription) {
        return "  - " + ($wolfadex$elm_ansi$Ansi$Color$fontColor_fn($wolfadex$elm_ansi$Ansi$Color$cyan, commandAndDescription.cv) + (": " + commandAndDescription.b2));
    }, _List_fromArray([
        { cv: "gren-format-unofficial", b2: "format all of them once" },
        { cv: "gren-format-unofficial watch", b2: "format edited and added modules on save" },
        { cv: "gren-format-unofficial --stdin", b2: "for editors and other tooling. Behaves exactly like gren-format --stdin so you can drop-in replace it" }
    ]))) + "\n\n"));
    var $author$project$Main$bytesToGrenSyntaxModule = function (sourceBytes) {
        var _v0 = $elm$bytes$Bytes$Decode$decode_fn($elm$bytes$Bytes$Decode$string($elm$bytes$Bytes$width(sourceBytes)), sourceBytes);
        if (_v0.$ === 1) {
            return $elm$core$Result$Err("source bytes couldn't be decoded into UTF-8");
        }
        else {
            var source = _v0.a;
            var _v1 = $author$project$GrenParserLenient$run_fn($author$project$GrenParserLenient$module_, source);
            if (_v1.$ === 1) {
                return $elm$core$Result$Err("source couldn't be parsed. Check for compiler errors.");
            }
            else {
                var syntax = _v1.a;
                return $elm$core$Result$Ok(syntax);
            }
        }
    };
    var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest = function (path) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest({ p: $elm$core$Basics$identity, bx: path }));
    };
    var $elm$core$String$endsWith = _String_endsWith;
    var $miniBill$elm_fast_dict$FastDict$foldrInner_fn = function (func, acc, t) {
        foldrInner: while (true) {
            if (t.$ === 1) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, $miniBill$elm_fast_dict$FastDict$foldrInner_fn(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldrInner;
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$foldrInner_fn_unwrapped = function (func, acc, t) {
        foldrInner: while (true) {
            if (t.$ === 1) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = func(key, value, $miniBill$elm_fast_dict$FastDict$foldrInner_fn_unwrapped(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldrInner;
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$foldrInner = F3($miniBill$elm_fast_dict$FastDict$foldrInner_fn);
    var $miniBill$elm_fast_dict$FastDict$foldr_fn = function (func, acc, _v0) {
        var dict = _v0.b;
        return $miniBill$elm_fast_dict$FastDict$foldrInner_fn(func, acc, dict);
    }, $miniBill$elm_fast_dict$FastDict$foldr = F3($miniBill$elm_fast_dict$FastDict$foldr_fn);
    var $author$project$Main$fastDictToListAndMap_fn = function (keyValueToElement, fastDict) {
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, soFar) {
            return _List_Cons(A2(keyValueToElement, key, value), soFar);
        }), _List_Nil, fastDict);
    }, $author$project$Main$fastDictToListAndMap_fn_unwrapped = function (keyValueToElement, fastDict) {
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, soFar) {
            return _List_Cons(keyValueToElement(key, value), soFar);
        }), _List_Nil, fastDict);
    }, $author$project$Main$fastDictToListAndMap = F2($author$project$Main$fastDictToListAndMap_fn);
    var $miniBill$elm_fast_dict$FastSet$foldr_fn = function (func, acc, _v0) {
        var set = _v0;
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (v, _v1, iacc) {
            return A2(func, v, iacc);
        }), acc, set);
    }, $miniBill$elm_fast_dict$FastSet$foldr_fn_unwrapped = function (func, acc, _v0) {
        var set = _v0;
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (v, _v1, iacc) {
            return func(v, iacc);
        }), acc, set);
    }, $miniBill$elm_fast_dict$FastSet$foldr = F3($miniBill$elm_fast_dict$FastSet$foldr_fn);
    var $author$project$Main$fastSetToListAndMap_fn = function (keyToElement, fastDict) {
        return $miniBill$elm_fast_dict$FastSet$foldr_fn_unwrapped(function (key, soFar) {
            return _List_Cons(keyToElement(key), soFar);
        }, _List_Nil, fastDict);
    }, $author$project$Main$fastSetToListAndMap = F2($author$project$Main$fastSetToListAndMap_fn);
    var $elm$bytes$Bytes$Decode$loopHelp_fn = function (state, callback, bites, offset) {
        loopHelp: while (true) {
            var _v0 = callback(state);
            var decoder = _v0;
            var _v1 = A2(decoder, bites, offset);
            var newOffset = _v1.a;
            var step = _v1.b;
            if (!step.$) {
                var newState = step.a;
                var $temp$state = newState, $temp$callback = callback, $temp$bites = bites, $temp$offset = newOffset;
                state = $temp$state;
                callback = $temp$callback;
                bites = $temp$bites;
                offset = $temp$offset;
                continue loopHelp;
            }
            else {
                var result = step.a;
                return _Utils_Tuple2(newOffset, result);
            }
        }
    }, $elm$bytes$Bytes$Decode$loopHelp = F4($elm$bytes$Bytes$Decode$loopHelp_fn);
    var $elm$bytes$Bytes$Decode$loop_fn = function (state, callback) {
        return A2($elm$bytes$Bytes$Decode$loopHelp, state, callback);
    }, $elm$bytes$Bytes$Decode$loop = F2($elm$bytes$Bytes$Decode$loop_fn);
    var $elm$bytes$Bytes$Decode$Done = function (a) {
        return { $: 1, a: a };
    };
    var $elm$bytes$Bytes$Decode$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $elm$bytes$Bytes$BE = 1;
    var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
        return _Bytes_read_u32(!endianness);
    };
    var $lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE = $elm$bytes$Bytes$Decode$unsignedInt32(1);
    var $elm$bytes$Bytes$Decode$map_fn = function (func, _v0) {
        var decodeA = _v0;
        return F2(function (bites, offset) {
            var _v1 = A2(decodeA, bites, offset);
            var aOffset = _v1.a;
            var a = _v1.b;
            return _Utils_Tuple2(aOffset, func(a));
        });
    }, $elm$bytes$Bytes$Decode$map = F2($elm$bytes$Bytes$Decode$map_fn);
    var $elm$bytes$Bytes$Decode$succeed = function (a) {
        return F2(function (_v0, offset) {
            return _Utils_Tuple2(offset, a);
        });
    };
    var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
    var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString = function (bits) {
        return $elm$core$String$fromChar($elm$core$Char$fromCode(bits));
    };
    var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString = function (bits) {
        return _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 24) & 255), _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 16) & 255), _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 8) & 255), $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(bits & 255))));
    };
    var $elm$bytes$Bytes$Decode$unsignedInt8 = _Bytes_read_u8;
    var $lue_bird$elm_state_interface_experimental$AsciiString$loopHelp = function (soFar) {
        return (soFar.bN >= 4) ? $elm$bytes$Bytes$Decode$map_fn(function (chunk) {
            return $elm$bytes$Bytes$Decode$Loop({
                bN: soFar.bN - 4,
                bQ: _Utils_ap(soFar.bQ, $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString(chunk))
            });
        }, $lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE) : ((!soFar.bN) ? $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done(soFar.bQ)) : $elm$bytes$Bytes$Decode$map_fn(function (a) {
            return $elm$bytes$Bytes$Decode$Loop({
                bN: soFar.bN - 1,
                bQ: _Utils_ap(soFar.bQ, $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(a))
            });
        }, $elm$bytes$Bytes$Decode$unsignedInt8));
    };
    var $lue_bird$elm_state_interface_experimental$AsciiString$decoder = function (width) {
        return $elm$bytes$Bytes$Decode$loop_fn({ bN: width, bQ: "" }, $lue_bird$elm_state_interface_experimental$AsciiString$loopHelp);
    };
    var $elm$core$Maybe$withDefault_fn = function (_default, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return value;
        }
        else {
            return _default;
        }
    }, $elm$core$Maybe$withDefault = F2($elm$core$Maybe$withDefault_fn);
    var $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes = function (bytes) {
        return $elm$core$Maybe$withDefault_fn("", $elm$bytes$Bytes$Decode$decode_fn($lue_bird$elm_state_interface_experimental$AsciiString$decoder($elm$bytes$Bytes$width(bytes)), bytes));
    };
    var $lue_bird$elm_state_interface_experimental$Node$fileWrite = function (write) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$FileWrite({
            bF: $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes(write.cU),
            p: $elm$core$Basics$identity,
            bx: write.bx
        }));
    };
    var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
    var $elm$bytes$Bytes$Encode$Utf8_fn = function (a, b) {
        return { $: 9, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$Utf8 = F2($elm$bytes$Bytes$Encode$Utf8_fn);
    var $elm$bytes$Bytes$Encode$string = function (str) {
        return $elm$bytes$Bytes$Encode$Utf8_fn(_Bytes_getStringWidth(str), str);
    };
    var $author$project$Main$grenSyntaxModuleToBytes = function (grenSyntaxModule) {
        return $elm$bytes$Bytes$Encode$encode($elm$bytes$Bytes$Encode$string($author$project$GrenPrint$toString($author$project$GrenPrint$module_(grenSyntaxModule))));
    };
    var $miniBill$elm_fast_dict$FastDict$getMinInner = function (n) {
        getMinInner: while (true) {
            if (n.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                if (n.d.$ === 1) {
                    var k = n.b;
                    var v = n.c;
                    var _v1 = n.d;
                    return $elm$core$Maybe$Just(_Utils_Tuple2(k, v));
                }
                else {
                    var l = n.d;
                    var $temp$n = l;
                    n = $temp$n;
                    continue getMinInner;
                }
            }
        }
    };
    var $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn = function (clr, k, v, left, right) {
        if (!left.$) {
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            if (!right.$) {
                if ((!right.d.$) && (!right.d.a)) {
                    var rK = right.b;
                    var rV = right.c;
                    var _v2 = right.d;
                    var _v3 = _v2.a;
                    var rlK = _v2.b;
                    var rlV = _v2.c;
                    var rlL = _v2.d;
                    var rlR = _v2.e;
                    var rRight = right.e;
                    return {
                        d$: 0,
                        a8: rlK,
                        de: $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight), rlL),
                        dv: $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, rK, rV, rlR, rRight),
                        bh: rlV
                    };
                }
                else {
                    var rK = right.b;
                    var rV = right.c;
                    var rLeft = right.d;
                    var rRight = right.e;
                    if (clr === 1) {
                        return {
                            d$: 1,
                            a8: k,
                            de: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight),
                            dv: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight),
                            bh: v
                        };
                    }
                    else {
                        return {
                            d$: 1,
                            a8: k,
                            de: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight),
                            dv: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight),
                            bh: v
                        };
                    }
                }
            }
            else {
                return { d$: clr, a8: k, de: left, dv: right, bh: v };
            }
        }
        else {
            return { d$: clr, a8: k, de: left, dv: right, bh: v };
        }
    }, $miniBill$elm_fast_dict$FastDict$moveRedLeft = F5($miniBill$elm_fast_dict$FastDict$moveRedLeft_fn);
    var $miniBill$elm_fast_dict$FastDict$moveRedRight = function (key) {
        return function (value) {
            return function (lK) {
                return function (lV) {
                    return function (lLeft) {
                        return function (lRight) {
                            return function (rK) {
                                return function (rV) {
                                    return function (rLeft) {
                                        return function (rRight) {
                                            if ((!lLeft.$) && (!lLeft.a)) {
                                                var _v1 = lLeft.a;
                                                var llK = lLeft.b;
                                                var llV = lLeft.c;
                                                var llLeft = lLeft.d;
                                                var llRight = lLeft.e;
                                                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, llK, llV, llLeft, llRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, lRight, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight)));
                                            }
                                            else {
                                                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight));
                                            }
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn = function (dict, color, key, value, left, right) {
        if (!left.$) {
            if (!left.a) {
                var _v1 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, lK, lV, lLeft, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, lRight, right));
            }
            else {
                var _v2 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                _v3$2: while (true) {
                    if ((!right.$) && (right.a === 1)) {
                        if (!right.d.$) {
                            if (right.d.a === 1) {
                                var _v4 = right.a;
                                var rK = right.b;
                                var rV = right.c;
                                var rLeft = right.d;
                                var _v5 = rLeft.a;
                                var rRight = right.e;
                                return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)(rLeft)(rRight);
                            }
                            else {
                                break _v3$2;
                            }
                        }
                        else {
                            var _v6 = right.a;
                            var rK = right.b;
                            var rV = right.c;
                            var _v7 = right.d;
                            var rRight = right.e;
                            return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)($miniBill$elm_fast_dict$Internal$Leaf)(rRight);
                        }
                    }
                    else {
                        break _v3$2;
                    }
                }
                return dict;
            }
        }
        else {
            return dict;
        }
    }, $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT = F6($miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn);
    var $miniBill$elm_fast_dict$FastDict$removeMin = function (dict) {
        if ((!dict.$) && (!dict.d.$)) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var lColor = left.a;
            var lLeft = left.d;
            var right = dict.e;
            if (lColor === 1) {
                if ((!lLeft.$) && (!lLeft.a)) {
                    var _v3 = lLeft.a;
                    return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, $miniBill$elm_fast_dict$FastDict$removeMin(left), right);
                }
                else {
                    var res = $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn(color, key, value, left, right);
                    return $miniBill$elm_fast_dict$FastDict$balance_fn(res.d$, res.a8, res.bh, $miniBill$elm_fast_dict$FastDict$removeMin(res.de), res.dv);
                }
            }
            else {
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, $miniBill$elm_fast_dict$FastDict$removeMin(left), right);
            }
        }
        else {
            return $miniBill$elm_fast_dict$Internal$Leaf;
        }
    };
    var $miniBill$elm_fast_dict$FastDict$removeHelp_fn = function (targetKey, dict) {
        if (dict.$ === 1) {
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$Leaf, false);
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
                if ((!left.$) && (left.a === 1)) {
                    var _v6 = left.a;
                    var lLeft = left.d;
                    if ((!lLeft.$) && (!lLeft.a)) {
                        var _v8 = lLeft.a;
                        var _v9 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, left);
                        var newLeft = _v9.a;
                        var wasMember = _v9.b;
                        return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, newLeft, right), wasMember);
                    }
                    else {
                        var res = $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn(color, key, value, left, right);
                        var _v10 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, res.de);
                        var newLeft = _v10.a;
                        var wasMember = _v10.b;
                        return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(res.d$, res.a8, res.bh, newLeft, res.dv), wasMember);
                    }
                }
                else {
                    var _v11 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, left);
                    var newLeft = _v11.a;
                    var wasMember = _v11.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, newLeft, right), wasMember);
                }
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn(targetKey, $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn(dict, color, key, value, left, right));
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$removeHelp = F2($miniBill$elm_fast_dict$FastDict$removeHelp_fn);
    var $miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn = function (targetKey, dict) {
        if (!dict.$) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
                var _v1 = $miniBill$elm_fast_dict$FastDict$getMinInner(right);
                if (!_v1.$) {
                    var _v2 = _v1.a;
                    var minKey = _v2.a;
                    var minValue = _v2.b;
                    return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(color, minKey, minValue, left, $miniBill$elm_fast_dict$FastDict$removeMin(right)), true);
                }
                else {
                    return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$Leaf, true);
                }
            }
            else {
                var _v3 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, right);
                var newRight = _v3.a;
                var wasMember = _v3.b;
                return _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$balance_fn(color, key, value, left, newRight), wasMember);
            }
        }
        else {
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$Leaf, false);
        }
    }, $miniBill$elm_fast_dict$FastDict$removeHelpEQGT = F2($miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn);
    var $miniBill$elm_fast_dict$FastDict$removeInner_fn = function (key, dict) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(key, dict);
        if ((!_v0.a.$) && (!_v0.a.a)) {
            var _v1 = _v0.a;
            var _v2 = _v1.a;
            var k = _v1.b;
            var v = _v1.c;
            var l = _v1.d;
            var r = _v1.e;
            var wasMember = _v0.b;
            return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, l, r), wasMember);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $miniBill$elm_fast_dict$FastDict$removeInner = F2($miniBill$elm_fast_dict$FastDict$removeInner_fn);
    var $miniBill$elm_fast_dict$FastDict$remove_fn = function (key, orig) {
        var sz = orig.a;
        var dict = orig.b;
        var _v0 = $miniBill$elm_fast_dict$FastDict$removeInner_fn(key, dict);
        var result = _v0.a;
        var wasMember = _v0.b;
        return wasMember ? $miniBill$elm_fast_dict$Internal$Dict_fn(sz - 1, result) : orig;
    }, $miniBill$elm_fast_dict$FastDict$remove = F2($miniBill$elm_fast_dict$FastDict$remove_fn);
    var $miniBill$elm_fast_dict$FastSet$remove_fn = function (value, _v0) {
        var set = _v0;
        return $miniBill$elm_fast_dict$FastDict$remove_fn(value, set);
    }, $miniBill$elm_fast_dict$FastSet$remove = F2($miniBill$elm_fast_dict$FastSet$remove_fn);
    var $author$project$Main$singleRunInterface = function (state) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastDictToListAndMap_fn_unwrapped(function (moduleToFormatPath, moduleToFormatContent) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (_v0) {
                    return $author$project$Main$SingleProjectRun((new $$Record1($miniBill$elm_fast_dict$FastDict$remove_fn(moduleToFormatPath, state.G), state.an, state.Y, state.A, state.E)));
                }, $lue_bird$elm_state_interface_experimental$Node$fileWrite({ cU: moduleToFormatContent, bx: moduleToFormatPath }));
            }, state.G)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastSetToListAndMap_fn(function (sourceDirectoryPath) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (subPathsOrError) {
                    if (subPathsOrError.$ === 1) {
                        var sourceDirectoryReadError = subPathsOrError.a;
                        return $author$project$Main$SingleProjectRun(function () {
                            var $r = state.$c();
                            $r.Y = _List_Cons({ aZ: sourceDirectoryReadError.aZ, bx: sourceDirectoryPath }, state.Y);
                            return $r;
                        }());
                    }
                    else {
                        var subPaths = subPathsOrError.a;
                        return $author$project$Main$SingleProjectRun((new $$Record1(state.G, $miniBill$elm_fast_dict$FastSet$remove_fn(sourceDirectoryPath, state.an), state.Y, state.A, $elm$core$List$foldl_fn_unwrapped(function (subPath, soFar) {
                            return _String_endsWith_fn(".gren", subPath) ? $miniBill$elm_fast_dict$FastSet$insert_fn(sourceDirectoryPath + ("/" + subPath), soFar) : soFar;
                        }, state.E, subPaths))));
                    }
                }, $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest(sourceDirectoryPath));
            }, state.an)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (testSubPathsOrError) {
                if (testSubPathsOrError.$ === 1) {
                    return $author$project$Main$SingleProjectRun(state);
                }
                else {
                    var subPaths = testSubPathsOrError.a;
                    return $author$project$Main$SingleProjectRun((new $$Record1(state.G, state.an, state.Y, state.A, $elm$core$List$foldl_fn_unwrapped(function (subPath, soFar) {
                        return _String_endsWith_fn(".gren", subPath) ? $miniBill$elm_fast_dict$FastSet$insert_fn("tests/" + subPath, soFar) : soFar;
                    }, state.E, subPaths))));
                }
            }, $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest("tests")),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastSetToListAndMap_fn(function (sourceFilePath) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (sourceBytesOrError) {
                    var sourceBytesOrReadError = function () {
                        if (sourceBytesOrError.$ === 1) {
                            var sourceFileReadError = sourceBytesOrError.a;
                            return $elm$core$Result$Err(sourceFileReadError.aZ);
                        }
                        else {
                            var sourceBytes = sourceBytesOrError.a;
                            return $author$project$Main$bytesToGrenSyntaxModule(sourceBytes);
                        }
                    }();
                    if (sourceBytesOrReadError.$ === 1) {
                        var readError = sourceBytesOrReadError.a;
                        return $author$project$Main$SingleProjectRun(function () {
                            var $r = state.$c();
                            $r.A = _List_Cons({ aZ: readError, bx: sourceFilePath }, state.A);
                            return $r;
                        }());
                    }
                    else {
                        var syntax = sourceBytesOrReadError.a;
                        return $author$project$Main$SingleProjectRun((new $$Record1($miniBill$elm_fast_dict$FastDict$insert_fn(sourceFilePath, $author$project$Main$grenSyntaxModuleToBytes(syntax), state.G), state.an, state.Y, state.A, $miniBill$elm_fast_dict$FastSet$remove_fn(sourceFilePath, state.E))));
                    }
                }, $lue_bird$elm_state_interface_experimental$Node$fileRequest(sourceFilePath));
            }, state.E)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($elm$core$List$map_fn(function (directoryReadError) {
                return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("failed to read the source directory " + (directoryReadError.bx + (": " + (directoryReadError.aZ + "\n"))));
            }, state.Y)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($elm$core$List$map_fn(function (fileReadError) {
                return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("failed to read the source file " + (fileReadError.bx + (": " + (fileReadError.aZ + "\n"))));
            }, state.A))
        ]));
    };
    var $lue_bird$elm_state_interface_experimental$Node$fileChangeListen = function (path) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$FileChangeListen({ p: $elm$core$Basics$identity, bx: path }));
    };
    var $wolfadex$elm_ansi$Ansi$Cursor$hide = $wolfadex$elm_ansi$Ansi$Internal$toCommand("?25l");
    var $author$project$Main$nodeHideCursor = $lue_bird$elm_state_interface_experimental$Node$standardOutWrite($wolfadex$elm_ansi$Ansi$Cursor$hide);
    var $author$project$Main$nodeTestsChangeListen = $lue_bird$elm_state_interface_experimental$Node$fileChangeListen("tests");
    var $wolfadex$elm_ansi$Ansi$Color$Yellow = { $: 3 };
    var $wolfadex$elm_ansi$Ansi$Color$yellow = $wolfadex$elm_ansi$Ansi$Color$Yellow;
    var $author$project$Main$watchInterface = function (state) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($elm$core$List$map_fn(function (grenJsonSourceDirectory) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (fileChange) {
                    if (fileChange.$ === 1) {
                        return $author$project$Main$Watching(state);
                    }
                    else {
                        var addedOrChangedPath = fileChange.a;
                        return _String_endsWith_fn(".gren", addedOrChangedPath) ? $author$project$Main$Watching((new $$Record2(state.G, state.ae, state.A, $miniBill$elm_fast_dict$FastSet$insert_fn(addedOrChangedPath, state.E)))) : $author$project$Main$Watching(state);
                    }
                }, $lue_bird$elm_state_interface_experimental$Node$fileChangeListen(grenJsonSourceDirectory));
            }, state.ae)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (fileChange) {
                if (fileChange.$ === 1) {
                    return $author$project$Main$Watching(state);
                }
                else {
                    var addedOrChangedPath = fileChange.a;
                    return _String_endsWith_fn(".gren", addedOrChangedPath) ? $author$project$Main$Watching((new $$Record2(state.G, state.ae, state.A, $miniBill$elm_fast_dict$FastSet$insert_fn(addedOrChangedPath, state.E)))) : $author$project$Main$Watching(state);
                }
            }, $author$project$Main$nodeTestsChangeListen),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastDictToListAndMap_fn_unwrapped(function (moduleToFormatPath, moduleToFormatContent) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (_v2) {
                    return $author$project$Main$Watching((new $$Record2($miniBill$elm_fast_dict$FastDict$remove_fn(moduleToFormatPath, state.G), state.ae, state.A, state.E)));
                }, $lue_bird$elm_state_interface_experimental$Node$fileWrite({ cU: moduleToFormatContent, bx: moduleToFormatPath }));
            }, state.G)),
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastSetToListAndMap_fn(function (sourceFilePath) {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (sourceBytesOrError) {
                    var sourceBytesOrReadError = function () {
                        if (sourceBytesOrError.$ === 1) {
                            var sourceFileReadError = sourceBytesOrError.a;
                            return $elm$core$Result$Err(sourceFileReadError.aZ);
                        }
                        else {
                            var sourceBytes = sourceBytesOrError.a;
                            return $author$project$Main$bytesToGrenSyntaxModule(sourceBytes);
                        }
                    }();
                    if (sourceBytesOrReadError.$ === 1) {
                        var readError = sourceBytesOrReadError.a;
                        return $author$project$Main$Watching(function () {
                            var $r = state.$c();
                            $r.A = $miniBill$elm_fast_dict$FastDict$insert_fn(sourceFilePath, readError, state.A);
                            $r.E = $miniBill$elm_fast_dict$FastSet$remove_fn(sourceFilePath, state.E);
                            return $r;
                        }());
                    }
                    else {
                        var syntax = sourceBytesOrReadError.a;
                        return $author$project$Main$Watching((new $$Record2($miniBill$elm_fast_dict$FastDict$insert_fn(sourceFilePath, $author$project$Main$grenSyntaxModuleToBytes(syntax), state.G), state.ae, $miniBill$elm_fast_dict$FastDict$remove_fn(sourceFilePath, state.A), $miniBill$elm_fast_dict$FastSet$remove_fn(sourceFilePath, state.E))));
                    }
                }, $lue_bird$elm_state_interface_experimental$Node$fileRequest(sourceFilePath));
            }, state.E)),
            $author$project$Main$nodeHideCursor,
            $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastDictToListAndMap_fn_unwrapped(function (fileReadErrorPath, fileReadError) {
                return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite($wolfadex$elm_ansi$Ansi$Color$fontColor_fn($wolfadex$elm_ansi$Ansi$Color$yellow, "failed to read the source file " + (fileReadErrorPath + (": " + (fileReadError + "\n")))));
            }, state.A))
        ]));
    };
    var $author$project$Main$interface = function (state) {
        switch (state.$) {
            case 0:
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (launchArguments) {
                    var _v1 = $elm$core$List$filter_fn(function (arg) {
                        return (arg !== "--yes") && ((arg !== "--gren-version") && ((arg !== "0.19.0") && ((arg !== "0.19.1") && ((arg !== "0.19") && ((arg !== "--gren-version=0.19") && ((arg !== "--gren-version=0.19.0") && (arg !== "--gren-version=0.19.1")))))));
                    }, $elm$core$List$drop_fn(2, launchArguments));
                    _v1$4: while (true) {
                        if (!_v1.b) {
                            return $author$project$Main$WaitingForGrenJson({ cA: 0 });
                        }
                        else {
                            if (!_v1.b.b) {
                                switch (_v1.a) {
                                    case "watch":
                                        return $author$project$Main$WaitingForGrenJson({ cA: 1 });
                                    case "help":
                                        return $author$project$Main$ShowingHelp;
                                    case "--stdin":
                                        return $author$project$Main$SingleFileStandardStreamRun($author$project$Main$AssemblingModuleSourceFromStandardIn(""));
                                    default:
                                        break _v1$4;
                                }
                            }
                            else {
                                break _v1$4;
                            }
                        }
                    }
                    return $author$project$Main$ShowingHelp;
                }, $lue_bird$elm_state_interface_experimental$Node$launchArgumentsRequest);
            case 1:
                return $author$project$Main$nodeShowHelpText;
            case 4:
                var singleFileStandardStreamRun = state.a;
                return $author$project$Main$interfaceSingleFileStandardStreamRun(singleFileStandardStreamRun);
            case 2:
                var waitingForGrenJson = state.a;
                return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (grenJsonBytesOrError) {
                    if (grenJsonBytesOrError.$ === 1) {
                        var grenJsonReadError = grenJsonBytesOrError.a;
                        return $author$project$Main$GrenJsonReadFailed(grenJsonReadError);
                    }
                    else {
                        var grenJsonSourceDirectories = grenJsonBytesOrError.a;
                        var _v3 = waitingForGrenJson.cA;
                        if (!_v3) {
                            return $author$project$Main$SingleProjectRun((new $$Record1($miniBill$elm_fast_dict$FastDict$empty, $miniBill$elm_fast_dict$FastSet$fromList(grenJsonSourceDirectories), _List_Nil, _List_Nil, $miniBill$elm_fast_dict$FastSet$empty)));
                        }
                        else {
                            return $author$project$Main$Watching((new $$Record2($miniBill$elm_fast_dict$FastDict$empty, grenJsonSourceDirectories, $miniBill$elm_fast_dict$FastDict$empty, $miniBill$elm_fast_dict$FastSet$empty)));
                        }
                    }
                }, $author$project$Main$nodeGrenJsonSourceDirectoriesRequest);
            case 3:
                var singleRunState = state.a;
                return $author$project$Main$singleRunInterface(singleRunState);
            case 5:
                var watchState = state.a;
                return $author$project$Main$watchInterface(watchState);
            default:
                var grenJsonDecodeError = state.a;
                return $author$project$Main$errorInterface(grenJsonDecodeError);
        }
    };
    var $lue_bird$elm_state_interface_experimental$Node$Add = function (a) {
        return { $: 0, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$State = $elm$core$Basics$identity;
    var $elm$core$Platform$Cmd$batch = _Platform_batch;
    var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn = function (valueToJson, maybe) {
        if (maybe.$ === 1) {
            return $elm$json$Json$Encode$null;
        }
        else {
            var value = maybe.a;
            return valueToJson(value);
        }
    }, $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable = F2($lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn);
    var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant = function (tagAndValue) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("tag", $elm$json$Json$Encode$string(tagAndValue.eX)),
            _Utils_Tuple2("value", tagAndValue.aN)
        ]));
    };
    var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson = function (interfaceSingle) {
        return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(function () {
            switch (interfaceSingle.$) {
                case 9:
                    var send = interfaceSingle.a;
                    return {
                        eX: "HttpRequestSend",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("url", $elm$json$Json$Encode$string(send.bC)),
                            _Utils_Tuple2("method", $elm$json$Json$Encode$string(send.bv)),
                            _Utils_Tuple2("headers", $elm$json$Json$Encode$list_fn(function (header) {
                                return $elm$json$Json$Encode$object(_List_fromArray([
                                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(header.q)),
                                    _Utils_Tuple2("value", $elm$json$Json$Encode$string(header.aN))
                                ]));
                            }, send.af)),
                            _Utils_Tuple2("bodyAsciiString", $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn($elm$json$Json$Encode$string, send.bW))
                        ]))
                    };
                case 10:
                    var listen = interfaceSingle.a;
                    return {
                        eX: "HttpRequestListen",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("port", $elm$json$Json$Encode$int(listen.aw))
                        ]))
                    };
                case 11:
                    var send = interfaceSingle.a;
                    return {
                        eX: "HttpResponseSend",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("port", $elm$json$Json$Encode$int(send.aw)),
                            _Utils_Tuple2("statusCode", $elm$json$Json$Encode$int(send.bf)),
                            _Utils_Tuple2("headers", $elm$json$Json$Encode$list_fn(function (header) {
                                return $elm$json$Json$Encode$object(_List_fromArray([
                                    _Utils_Tuple2("name", $elm$json$Json$Encode$string(header.q)),
                                    _Utils_Tuple2("value", $elm$json$Json$Encode$string(header.aN))
                                ]));
                            }, send.af)),
                            _Utils_Tuple2("dataAsciiString", $elm$json$Json$Encode$string(send.cw))
                        ]))
                    };
                case 12:
                    return { eX: "TimePosixRequest", aN: $elm$json$Json$Encode$null };
                case 13:
                    return { eX: "TimezoneOffsetRequest", aN: $elm$json$Json$Encode$null };
                case 16:
                    return { eX: "TimezoneNameRequest", aN: $elm$json$Json$Encode$null };
                case 14:
                    var once = interfaceSingle.a;
                    return {
                        eX: "TimeOnce",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("pointInTime", $elm$json$Json$Encode$int($elm$time$Time$posixToMillis(once.bL)))
                        ]))
                    };
                case 17:
                    var request = interfaceSingle.a;
                    return {
                        eX: "RandomUnsignedInt32sRequest",
                        aN: $elm$json$Json$Encode$int(request.bG)
                    };
                case 15:
                    var intervalDuration = interfaceSingle.a;
                    return {
                        eX: "TimePeriodicallyListen",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("milliSeconds", $elm$json$Json$Encode$int(intervalDuration.bI))
                        ]))
                    };
                case 18:
                    var code = interfaceSingle.a;
                    return {
                        eX: "Exit",
                        aN: $elm$json$Json$Encode$int(code)
                    };
                case 19:
                    var make = interfaceSingle.a;
                    return {
                        eX: "DirectoryMake",
                        aN: $elm$json$Json$Encode$string(make.bx)
                    };
                case 20:
                    var path = interfaceSingle.a;
                    return {
                        eX: "FileRemove",
                        aN: $elm$json$Json$Encode$string(path)
                    };
                case 21:
                    var write = interfaceSingle.a;
                    return {
                        eX: "FileWrite",
                        aN: $elm$json$Json$Encode$object(_List_fromArray([
                            _Utils_Tuple2("path", $elm$json$Json$Encode$string(write.bx)),
                            _Utils_Tuple2("contentAsciiString", $elm$json$Json$Encode$string(write.bF))
                        ]))
                    };
                case 22:
                    var request = interfaceSingle.a;
                    return {
                        eX: "FileRequest",
                        aN: $elm$json$Json$Encode$string(request.bx)
                    };
                case 23:
                    var listen = interfaceSingle.a;
                    return {
                        eX: "FileChangeListen",
                        aN: $elm$json$Json$Encode$string(listen.bx)
                    };
                case 24:
                    var request = interfaceSingle.a;
                    return {
                        eX: "FileInfoRequest",
                        aN: $elm$json$Json$Encode$string(request.bx)
                    };
                case 25:
                    var request = interfaceSingle.a;
                    return {
                        eX: "DirectorySubPathsRequest",
                        aN: $elm$json$Json$Encode$string(request.bx)
                    };
                case 0:
                    return { eX: "WorkingDirectoryPathRequest", aN: $elm$json$Json$Encode$null };
                case 1:
                    return { eX: "LaunchArgumentsRequest", aN: $elm$json$Json$Encode$null };
                case 7:
                    return { eX: "TerminalSizeRequest", aN: $elm$json$Json$Encode$null };
                case 8:
                    return { eX: "TerminalSizeChangeListen", aN: $elm$json$Json$Encode$null };
                case 2:
                    var newTitle = interfaceSingle.a;
                    return {
                        eX: "ProcessTitleSet",
                        aN: $elm$json$Json$Encode$string(newTitle)
                    };
                case 3:
                    var text = interfaceSingle.a;
                    return {
                        eX: "StandardOutWrite",
                        aN: $elm$json$Json$Encode$string(text)
                    };
                case 4:
                    var text = interfaceSingle.a;
                    return {
                        eX: "StandardErrWrite",
                        aN: $elm$json$Json$Encode$string(text)
                    };
                case 5:
                    return { eX: "StandardInListen", aN: $elm$json$Json$Encode$null };
                default:
                    return { eX: "StandardInRawListen", aN: $elm$json$Json$Encode$null };
            }
        }());
    };
    var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson = function (diff) {
        return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(function () {
            if (!diff.$) {
                var interfaceSingleInfo = diff.a;
                return {
                    eX: "Add",
                    aN: $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson(interfaceSingleInfo)
                };
            }
            else {
                return { eX: "Remove", aN: $elm$json$Json$Encode$null };
            }
        }());
    };
    var $lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn = function (id, diff) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("id", $elm$json$Json$Encode$string(id)),
            _Utils_Tuple2("diff", $lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson(diff))
        ]));
    }, $lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson = F2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn);
    var $lue_bird$elm_state_interface_experimental$Node$programInit = function (appConfig) {
        var initialInterface = appConfig.ef(appConfig.ee);
        return _Utils_Tuple2({ cO: appConfig.ee, ef: initialInterface }, $elm$core$Platform$Cmd$batch($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (id, _new, soFar) {
            return _List_Cons(appConfig.eB.e2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn(id, $lue_bird$elm_state_interface_experimental$Node$Add(_new))), soFar);
        }), _List_Nil, initialInterface)));
    };
    var $lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode = function (a) {
        return { $: 0, a: a };
    };
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $miniBill$elm_fast_dict$FastDict$getInner_fn = function (targetKey, dict) {
        getInner: while (true) {
            if (dict.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = _Utils_compare_fn(targetKey, key);
                switch (_v1) {
                    case 0:
                        var $temp$targetKey = targetKey, $temp$dict = left;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue getInner;
                    case 1:
                        return $elm$core$Maybe$Just(value);
                    default:
                        var $temp$targetKey = targetKey, $temp$dict = right;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue getInner;
                }
            }
        }
    }, $miniBill$elm_fast_dict$FastDict$getInner = F2($miniBill$elm_fast_dict$FastDict$getInner_fn);
    var $miniBill$elm_fast_dict$FastDict$get_fn = function (targetKey, _v0) {
        var dict = _v0.b;
        return $miniBill$elm_fast_dict$FastDict$getInner_fn(targetKey, dict);
    }, $miniBill$elm_fast_dict$FastDict$get = F2($miniBill$elm_fast_dict$FastDict$get_fn);
    var $lue_bird$elm_state_interface_experimental$Node$idStringJsonDecoder = _Json_decodeField_fn("id", $elm$json$Json$Decode$string);
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $elm$json$Json$Decode$null = _Json_decodeNull;
    var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn = function (okJsonDecoder, errJsonDecoder) {
        var valueOkJsonDecoder = _Json_decodeField_fn("value", okJsonDecoder);
        var valueErrJsonDecoder = _Json_decodeField_fn("value", errJsonDecoder);
        return _Json_andThen_fn(function (tag) {
            switch (tag) {
                case "Ok":
                    return valueOkJsonDecoder;
                case "Err":
                    return valueErrJsonDecoder;
                default:
                    return $elm$json$Json$Decode$fail("expected either Ok or Err");
            }
        }, _Json_decodeField_fn("tag", $elm$json$Json$Decode$string));
    }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr = F2($lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn);
    var $lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($elm$json$Json$Decode$null($elm$core$Result$Ok(0)), _Json_map2_fn(F2(function (code, message) {
        return $elm$core$Result$Err({ bE: code, aZ: message });
    }), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ])), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ]))));
    var $elm$json$Json$Decode$map = _Json_map1;
    var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn(_Json_map1_fn($elm$core$Result$Ok, $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), _Json_map2_fn(F2(function (code, message) {
        return $elm$core$Result$Err({ bE: code, aZ: message });
    }), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ])), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ]))));
    var $lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged = function (a) {
        return { $: 0, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$FileRemoved = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn = function (name, valueJsonDecoder) {
        return _Json_andThen_fn(function (tag) {
            return _Utils_eq(tag, name) ? _Json_decodeField_fn("value", valueJsonDecoder) : $elm$json$Json$Decode$fail("expected only \"" + (name + "\""));
        }, _Json_decodeField_fn("tag", $elm$json$Json$Decode$string));
    }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant = F2($lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn);
    var $lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("Removed", _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$FileRemoved, $elm$json$Json$Decode$string)),
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("AddedOrChanged", _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged, $elm$json$Json$Decode$string))
    ]));
    var $lue_bird$elm_state_interface_experimental$Node$KindDirectory = 0;
    var $lue_bird$elm_state_interface_experimental$Node$KindFile = 1;
    var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString = function (specificAllowedString) {
        return _Json_andThen_fn(function (str) {
            return _Utils_eq(str, specificAllowedString) ? $elm$json$Json$Decode$succeed(0) : $elm$json$Json$Decode$fail("expected only \"" + (specificAllowedString + "\""));
        }, $elm$json$Json$Decode$string);
    };
    var $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_map1_fn(function (_v0) {
            return 1;
        }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("File")),
        _Json_map1_fn(function (_v1) {
            return 0;
        }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("Directory"))
    ]));
    var $elm$json$Json$Decode$int = _Json_decodeInt;
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $elm$time$Time$Posix = $elm$core$Basics$identity;
    var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
    var $elm$json$Json$Decode$nullable = function (decoder) {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
            _Json_map1_fn($elm$core$Maybe$Just, decoder)
        ]));
    };
    var $lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder = $elm$json$Json$Decode$nullable(_Json_map3_fn(F3(function (kind, byteCount, lastContentChangeTime) {
        return { dZ: byteCount, ei: kind, ek: lastContentChangeTime };
    }), _Json_decodeField_fn("kind", $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder), _Json_decodeField_fn("byteCount", $elm$json$Json$Decode$int), _Json_decodeField_fn("lastContentChangePosixMilliseconds", _Json_map1_fn($elm$time$Time$millisToPosix, $elm$json$Json$Decode$int))));
    var $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt = function (asciiChar) {
        return $elm$core$Char$toCode(asciiChar);
    };
    var $elm$core$Bitwise$or = _Bitwise_or;
    var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
    var $elm$bytes$Bytes$Encode$U32_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$U32 = F2($elm$bytes$Bytes$Encode$U32_fn);
    var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
    var $elm$bytes$Bytes$Encode$U8 = function (a) {
        return { $: 3, a: a };
    };
    var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
    var $lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn = function (input, inputLength, soFar) {
        encodeChunks: while (true) {
            var _v0 = $elm$core$String$toList(_String_slice_fn(0, 4, input));
            if (_v0.b) {
                if (((_v0.b.b && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
                    var a = _v0.a;
                    var _v1 = _v0.b;
                    var b = _v1.a;
                    var _v2 = _v1.b;
                    var c = _v2.a;
                    var _v3 = _v2.b;
                    var d = _v3.a;
                    var $temp$input = _String_slice_fn(4, inputLength, input), $temp$inputLength = inputLength, $temp$soFar = _List_Cons($elm$bytes$Bytes$Encode$U32_fn(1, (($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a) << 24) | ($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(b) << 16)) | (($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(c) << 8) | $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(d))), soFar);
                    input = $temp$input;
                    inputLength = $temp$inputLength;
                    soFar = $temp$soFar;
                    continue encodeChunks;
                }
                else {
                    var a = _v0.a;
                    var $temp$input = _String_slice_fn(1, inputLength, input), $temp$inputLength = inputLength, $temp$soFar = _List_Cons($elm$bytes$Bytes$Encode$unsignedInt8($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a)), soFar);
                    input = $temp$input;
                    inputLength = $temp$inputLength;
                    soFar = $temp$soFar;
                    continue encodeChunks;
                }
            }
            else {
                return soFar;
            }
        }
    }, $lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks = F3($lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn);
    var $elm$bytes$Bytes$Encode$Seq_fn = function (a, b) {
        return { $: 8, a: a, b: b };
    }, $elm$bytes$Bytes$Encode$Seq = F2($elm$bytes$Bytes$Encode$Seq_fn);
    var $elm$bytes$Bytes$Encode$getWidths_fn = function (width, builders) {
        getWidths: while (true) {
            if (!builders.b) {
                return width;
            }
            else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b), $temp$builders = bs;
                width = $temp$width;
                builders = $temp$builders;
                continue getWidths;
            }
        }
    }, $elm$bytes$Bytes$Encode$getWidths = F2($elm$bytes$Bytes$Encode$getWidths_fn);
    var $elm$bytes$Bytes$Encode$sequence = function (builders) {
        return $elm$bytes$Bytes$Encode$Seq_fn($elm$bytes$Bytes$Encode$getWidths_fn(0, builders), builders);
    };
    var $lue_bird$elm_state_interface_experimental$AsciiString$encoder = function (string) {
        return $elm$bytes$Bytes$Encode$sequence($elm$core$List$reverse($lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn(string, $elm$core$String$length(string), _List_Nil)));
    };
    var $lue_bird$elm_state_interface_experimental$AsciiString$toBytes = function (string) {
        return $elm$bytes$Bytes$Encode$encode($lue_bird$elm_state_interface_experimental$AsciiString$encoder(string));
    };
    var $lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn(_Json_map1_fn(function (asciiString) {
        return $elm$core$Result$Ok($lue_bird$elm_state_interface_experimental$AsciiString$toBytes(asciiString));
    }, $elm$json$Json$Decode$string), _Json_map2_fn(F2(function (code, message) {
        return $elm$core$Result$Err({ bE: code, aZ: message });
    }), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ])), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ]))));
    var $lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($elm$json$Json$Decode$null($elm$core$Result$Ok(0)), _Json_map2_fn(F2(function (code, message) {
        return $elm$core$Result$Err({ bE: code, aZ: message });
    }), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ])), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ]))));
    var $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl = { $: 0 };
    var $lue_bird$elm_state_interface_experimental$Node$HttpNetworkError = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_map1_fn(function (_v0) {
            return $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl;
        }, _Json_decodeField_fn("cause", _Json_decodeField_fn("code", $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("BAD_URL")))),
        _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$HttpNetworkError, $elm$json$Json$Decode$oneOf(_List_fromArray([
            _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
            $elm$json$Json$Decode$succeed("")
        ])))
    ]));
    var $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSent = { $: 2 };
    var $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed = function (a) {
        return { $: 3, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$HttpServerOpened = { $: 0 };
    var $lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("HttpServerOpened", $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpServerOpened)),
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("HttpRequestReceived", _Json_map3_fn(F3(function (method, headers, data) {
            return $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived({ cV: data, af: headers, bv: method });
        }), _Json_decodeField_fn("method", $elm$json$Json$Decode$string), _Json_decodeField_fn("headers", $elm$json$Json$Decode$list(_Json_map2_fn(F2(function (name, value) {
            return { q: name, aN: value };
        }), _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("value", $elm$json$Json$Decode$string)))), _Json_decodeField_fn("dataAsciiString", _Json_map1_fn($lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)))),
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("HttpResponseSent", $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpResponseSent)),
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("HttpServerFailed", _Json_map2_fn(F2(function (code, message) {
            return $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed({ bE: code, aZ: message });
        }), _Json_decodeField_fn("code", $elm$json$Json$Decode$string), _Json_decodeField_fn("message", $elm$json$Json$Decode$string)))
    ]));
    var $lue_bird$elm_state_interface_experimental$Node$HttpBadStatus = function (a) {
        return { $: 2, a: a };
    };
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder = _Json_map4_fn(F4(function (statusCode, statusText, headers, body) {
        return { cu: body, af: headers, bf: statusCode, eT: statusText };
    }), _Json_decodeField_fn("statusCode", $elm$json$Json$Decode$int), _Json_decodeField_fn("statusText", $elm$json$Json$Decode$string), _Json_decodeField_fn("headers", $elm$json$Json$Decode$list(_Json_map2_fn(F2(function (name, value) {
        return { q: name, aN: value };
    }), _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("value", $elm$json$Json$Decode$string)))), _Json_decodeField_fn("bodyAsciiString", _Json_map1_fn($lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)));
    var $lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder = _Json_map1_fn(function (response) {
        return ((response.bf >= 200) && (response.bf < 300)) ? $elm$core$Result$Ok(response.cu) : $elm$core$Result$Err($lue_bird$elm_state_interface_experimental$Node$HttpBadStatus(response));
    }, $lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder);
    var $lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder = $elm$json$Json$Decode$list($elm$json$Json$Decode$string);
    var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder = _Json_map1_fn($elm$time$Time$millisToPosix, $elm$json$Json$Decode$int);
    var $lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached = { $: 1 };
    var $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived = function (a) {
        return { $: 0, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$streamReadEventJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$StreamDataReceived, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("StreamDataReceived", $elm$json$Json$Decode$string)),
        $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$variant_fn("StreamDataEndReached", $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached))
    ]));
    var $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder = _Json_map2_fn(F2(function (lines, columns) {
        return { d0: columns, eq: lines };
    }), _Json_decodeField_fn("lines", $elm$json$Json$Decode$int), _Json_decodeField_fn("columns", $elm$json$Json$Decode$int));
    var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder = function (_interface) {
        switch (_interface.$) {
            case 9:
                var send = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(send.p, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder, _Json_map1_fn($elm$core$Result$Err, $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder))));
            case 10:
                var listen = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(listen.p, $lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder));
            case 11:
                return $elm$core$Maybe$Nothing;
            case 12:
                var toFuture = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(toFuture, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder));
            case 13:
                var toFuture = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(toFuture, $elm$json$Json$Decode$int));
            case 15:
                var periodicallyListen = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(periodicallyListen.p, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder));
            case 14:
                var once = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(once.p, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder));
            case 16:
                var toFuture = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(toFuture, $elm$json$Json$Decode$string));
            case 17:
                var request = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(request.p, $elm$json$Json$Decode$list($elm$json$Json$Decode$int)));
            case 18:
                return $elm$core$Maybe$Nothing;
            case 19:
                var make = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(make.p, $lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder));
            case 20:
                return $elm$core$Maybe$Nothing;
            case 21:
                var write = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(write.p, $lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder));
            case 22:
                var request = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(request.p, $lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder));
            case 23:
                var listen = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(listen.p, $lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder));
            case 24:
                var request = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(request.p, $lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder));
            case 25:
                var request = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(request.p, $lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder));
            case 0:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $elm$json$Json$Decode$string));
            case 1:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder));
            case 7:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder));
            case 8:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder));
            case 2:
                return $elm$core$Maybe$Nothing;
            case 3:
                return $elm$core$Maybe$Nothing;
            case 4:
                return $elm$core$Maybe$Nothing;
            case 5:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $elm$json$Json$Decode$string));
            default:
                var on = _interface.a;
                return $elm$core$Maybe$Just(_Json_map1_fn(on, $lue_bird$elm_state_interface_experimental$Node$streamReadEventJsonDecoder));
        }
    };
    var $miniBill$elm_fast_dict$FastDict$keys = function (dict) {
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, _v0, keyList) {
            return _List_Cons(key, keyList);
        }), _List_Nil, dict);
    };
    var $lue_bird$elm_state_interface_experimental$Result$LocalExtra$valueOrOnError_fn = function (errorToValue, result) {
        if (!result.$) {
            var value = result.a;
            return value;
        }
        else {
            var error = result.a;
            return errorToValue(error);
        }
    }, $lue_bird$elm_state_interface_experimental$Result$LocalExtra$valueOrOnError = F2($lue_bird$elm_state_interface_experimental$Result$LocalExtra$valueOrOnError_fn);
    var $lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn = function (appConfig, _v0) {
        var state = _v0;
        return appConfig.eB.d7(function (interfaceJson) {
            return $lue_bird$elm_state_interface_experimental$Result$LocalExtra$valueOrOnError_fn($lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode, _Json_run_fn(_Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState, _Json_andThen_fn(function (originalInterfaceId) {
                var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(originalInterfaceId, state.ef);
                if (!_v1.$) {
                    var interfaceSingleAcceptingFuture = _v1.a;
                    var _v2 = $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder(interfaceSingleAcceptingFuture);
                    if (!_v2.$) {
                        var eventDataDecoder = _v2.a;
                        return _Json_decodeField_fn("eventData", eventDataDecoder);
                    }
                    else {
                        return $elm$json$Json$Decode$fail("interface did not expect any events");
                    }
                }
                else {
                    return $elm$json$Json$Decode$fail("no associated interface found among ids\n" + $elm$core$String$join_fn("\n", $miniBill$elm_fast_dict$FastDict$keys(state.ef)));
                }
            }, $lue_bird$elm_state_interface_experimental$Node$idStringJsonDecoder)), interfaceJson));
        });
    }, $lue_bird$elm_state_interface_experimental$Node$programSubscriptions = F2($lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn);
    var $elm$core$String$concat = function (strings) {
        return $elm$core$String$join_fn("", strings);
    };
    var $miniBill$elm_fast_dict$FastDict$toList = function (dict) {
        return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, list) {
            return _List_Cons(_Utils_Tuple2(key, value), list);
        }), _List_Nil, dict);
    };
    var $miniBill$elm_fast_dict$FastDict$merge_fn = function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
        var stepState = F3(function (rKey, rValue, _v0) {
            stepState: while (true) {
                var list = _v0.a;
                var result = _v0.b;
                if (!list.b) {
                    return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                }
                else {
                    var _v2 = list.a;
                    var lKey = _v2.a;
                    var lValue = _v2.b;
                    var rest = list.b;
                    if (_Utils_cmp(lKey, rKey) < 0) {
                        var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                        rKey = $temp$rKey;
                        rValue = $temp$rValue;
                        _v0 = $temp$_v0;
                        continue stepState;
                    }
                    else {
                        if (_Utils_cmp(lKey, rKey) > 0) {
                            return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                        }
                        else {
                            return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                        }
                    }
                }
            }
        });
        var _v3 = $miniBill$elm_fast_dict$FastDict$foldl_fn(stepState, _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$toList(leftDict), initialResult), rightDict);
        var leftovers = _v3.a;
        var intermediateResult = _v3.b;
        return $elm$core$List$foldl_fn_unwrapped(function (_v4, result) {
            var k = _v4.a;
            var v = _v4.b;
            return A3(leftStep, k, v, result);
        }, intermediateResult, leftovers);
    }, $miniBill$elm_fast_dict$FastDict$merge = F6($miniBill$elm_fast_dict$FastDict$merge_fn);
    var $lue_bird$elm_state_interface_experimental$Node$Remove = function (a) {
        return { $: 1, a: a };
    };
    var $lue_bird$elm_state_interface_experimental$Node$remove = $lue_bird$elm_state_interface_experimental$Node$Remove(0);
    var $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn = function (idAndDiffCombine, interfaces) {
        return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (removedId, _v0, soFar) {
            return _List_Cons(A2(idAndDiffCombine, removedId, $lue_bird$elm_state_interface_experimental$Node$remove), soFar);
        }), F4(function (_v1, _v2, _v3, soFar) {
            return soFar;
        }), F3(function (addedId, onlyNew, soFar) {
            return _List_Cons(A2(idAndDiffCombine, addedId, $lue_bird$elm_state_interface_experimental$Node$Add(onlyNew)), soFar);
        }), interfaces.dm, interfaces.dN, _List_Nil);
    }, $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn_unwrapped = function (idAndDiffCombine, interfaces) {
        return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (removedId, _v0, soFar) {
            return _List_Cons(idAndDiffCombine(removedId, $lue_bird$elm_state_interface_experimental$Node$remove), soFar);
        }), F4(function (_v1, _v2, _v3, soFar) {
            return soFar;
        }), F3(function (addedId, onlyNew, soFar) {
            return _List_Cons(idAndDiffCombine(addedId, $lue_bird$elm_state_interface_experimental$Node$Add(onlyNew)), soFar);
        }), interfaces.dm, interfaces.dN, _List_Nil);
    }, $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap = F2($lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn);
    var $lue_bird$elm_state_interface_experimental$Node$programUpdate_fn = function (appConfig, event, state) {
        if (!event.$) {
            var jsonError = event.a;
            return _Utils_Tuple2(state, function () {
                var notifyOfBugInterface = $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite($elm$core$String$concat(_List_fromArray([
                    "bug: js event failed to decode: ",
                    $elm$json$Json$Decode$errorToString(jsonError),
                    ". Please open an issue on github.com/lue-bird/elm-state-interface-experimental\n"
                ])));
                return appConfig.eB.e2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn($lue_bird$elm_state_interface_experimental$StructuredId$toString($lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(notifyOfBugInterface)), $lue_bird$elm_state_interface_experimental$Node$Add(notifyOfBugInterface)));
            }());
        }
        else {
            var updatedAppState = event.a;
            var updatedInterface = appConfig.ef(updatedAppState);
            var _v1 = state;
            var oldState = _v1;
            return _Utils_Tuple2({ cO: updatedAppState, ef: updatedInterface }, $elm$core$Platform$Cmd$batch($lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn_unwrapped(function (id, diff) {
                return appConfig.eB.e2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn(id, diff));
            }, { dm: oldState.ef, dN: updatedInterface })));
        }
    }, $lue_bird$elm_state_interface_experimental$Node$programUpdate = F3($lue_bird$elm_state_interface_experimental$Node$programUpdate_fn);
    var $elm$core$Platform$worker = _Platform_worker;
    var $lue_bird$elm_state_interface_experimental$Node$program = function (appConfig) {
        return $elm$core$Platform$worker({
            ed: function (_v0) {
                return $lue_bird$elm_state_interface_experimental$Node$programInit(appConfig);
            },
            eW: function (state) {
                return $lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn(appConfig, state);
            },
            e6: F2(function (event, state) {
                return $lue_bird$elm_state_interface_experimental$Node$programUpdate_fn(appConfig, event, state);
            })
        });
    };
    var $author$project$Main$toJs = _Platform_outgoingPort("toJs", $elm$core$Basics$identity);
    var $author$project$Main$main = $lue_bird$elm_state_interface_experimental$Node$program({
        ee: $author$project$Main$initialState,
        ef: $author$project$Main$interface,
        eB: { d7: $author$project$Main$fromJs, e2: $author$project$Main$toJs }
    });
/*
    _Platform_export({ "Main": { "init": $author$project$Main$main($elm$json$Json$Decode$succeed(0))(0) } });
}(this));
*/

export const Elm = { "Main": { "init": $author$project$Main$main($elm$json$Json$Decode$succeed(0))(0) } };
  